
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00004fd8  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080011e  0080011e  0000512a  2**0
                  ALLOC
  3 .stab         000057b4  00000000  00000000  0000512c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000032de  00000000  00000000  0000a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000dbbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000dcfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000de6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000fab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000109a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011750  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000118b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001230b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 64 1d 	jmp	0x3ac8	; 0x3ac8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 33       	cpi	r26, 0x30	; 48
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <main>
      8a:	0c 94 ea 27 	jmp	0x4fd4	; 0x4fd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 27 	jmp	0x4f66	; 0x4f66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 27 	jmp	0x4f9e	; 0x4f9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 27 	jmp	0x4f7e	; 0x4f7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 27 	jmp	0x4f7e	; 0x4f7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 27 	jmp	0x4f66	; 0x4f66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 27 	jmp	0x4f9e	; 0x4f9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 27 	jmp	0x4f7e	; 0x4f7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 27 	jmp	0x4f7e	; 0x4f7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 27 	jmp	0x4f7e	; 0x4f7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 27 	jmp	0x4f86	; 0x4f86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 27 	jmp	0x4fbe	; 0x4fbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include "../../../INCLUDE/MCAL/UART/UART_priv.h"
#include "../../../SERVICES/bit_utilies.h"
//#include "../../../INCLUDE/MCAL/GIE/GIE.h"
u8 Global_u8UBRRH_Value=0;
u8 Global_u8UCSRC_Value=0;
void UART_voidInit(UART_structCfg*Add_structUARTcfg){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
	// SET BAUD RATE
	switch(Add_structUARTcfg->UART_u8BaudRate){
     b5e:	e9 81       	ldd	r30, Y+1	; 0x01
     b60:	fa 81       	ldd	r31, Y+2	; 0x02
     b62:	85 81       	ldd	r24, Z+5	; 0x05
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	38 8b       	std	Y+16, r19	; 0x10
     b6a:	2f 87       	std	Y+15, r18	; 0x0f
     b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6e:	98 89       	ldd	r25, Y+16	; 0x10
     b70:	8c 30       	cpi	r24, 0x0C	; 12
     b72:	91 05       	cpc	r25, r1
     b74:	09 f4       	brne	.+2      	; 0xb78 <UART_voidInit+0x32>
     b76:	7f c0       	rjmp	.+254    	; 0xc76 <UART_voidInit+0x130>
     b78:	2f 85       	ldd	r18, Y+15	; 0x0f
     b7a:	38 89       	ldd	r19, Y+16	; 0x10
     b7c:	2d 30       	cpi	r18, 0x0D	; 13
     b7e:	31 05       	cpc	r19, r1
     b80:	24 f5       	brge	.+72     	; 0xbca <UART_voidInit+0x84>
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	98 89       	ldd	r25, Y+16	; 0x10
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <UART_voidInit+0x48>
     b8c:	8c c0       	rjmp	.+280    	; 0xca6 <UART_voidInit+0x160>
     b8e:	2f 85       	ldd	r18, Y+15	; 0x0f
     b90:	38 89       	ldd	r19, Y+16	; 0x10
     b92:	24 30       	cpi	r18, 0x04	; 4
     b94:	31 05       	cpc	r19, r1
     b96:	64 f4       	brge	.+24     	; 0xbb0 <UART_voidInit+0x6a>
     b98:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9a:	98 89       	ldd	r25, Y+16	; 0x10
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <UART_voidInit+0x5c>
     ba0:	92 c0       	rjmp	.+292    	; 0xcc6 <UART_voidInit+0x180>
     ba2:	2f 85       	ldd	r18, Y+15	; 0x0f
     ba4:	38 89       	ldd	r19, Y+16	; 0x10
     ba6:	21 30       	cpi	r18, 0x01	; 1
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <UART_voidInit+0x68>
     bac:	84 c0       	rjmp	.+264    	; 0xcb6 <UART_voidInit+0x170>
     bae:	91 c0       	rjmp	.+290    	; 0xcd2 <UART_voidInit+0x18c>
     bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb2:	98 89       	ldd	r25, Y+16	; 0x10
     bb4:	86 30       	cpi	r24, 0x06	; 6
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <UART_voidInit+0x76>
     bba:	6d c0       	rjmp	.+218    	; 0xc96 <UART_voidInit+0x150>
     bbc:	2f 85       	ldd	r18, Y+15	; 0x0f
     bbe:	38 89       	ldd	r19, Y+16	; 0x10
     bc0:	28 30       	cpi	r18, 0x08	; 8
     bc2:	31 05       	cpc	r19, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <UART_voidInit+0x82>
     bc6:	5f c0       	rjmp	.+190    	; 0xc86 <UART_voidInit+0x140>
     bc8:	84 c0       	rjmp	.+264    	; 0xcd2 <UART_voidInit+0x18c>
     bca:	8f 85       	ldd	r24, Y+15	; 0x0f
     bcc:	98 89       	ldd	r25, Y+16	; 0x10
     bce:	82 32       	cpi	r24, 0x22	; 34
     bd0:	91 05       	cpc	r25, r1
     bd2:	c9 f1       	breq	.+114    	; 0xc46 <UART_voidInit+0x100>
     bd4:	2f 85       	ldd	r18, Y+15	; 0x0f
     bd6:	38 89       	ldd	r19, Y+16	; 0x10
     bd8:	23 32       	cpi	r18, 0x23	; 35
     bda:	31 05       	cpc	r19, r1
     bdc:	64 f4       	brge	.+24     	; 0xbf6 <UART_voidInit+0xb0>
     bde:	8f 85       	ldd	r24, Y+15	; 0x0f
     be0:	98 89       	ldd	r25, Y+16	; 0x10
     be2:	80 31       	cpi	r24, 0x10	; 16
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <UART_voidInit+0xa4>
     be8:	3e c0       	rjmp	.+124    	; 0xc66 <UART_voidInit+0x120>
     bea:	2f 85       	ldd	r18, Y+15	; 0x0f
     bec:	38 89       	ldd	r19, Y+16	; 0x10
     bee:	29 31       	cpi	r18, 0x19	; 25
     bf0:	31 05       	cpc	r19, r1
     bf2:	89 f1       	breq	.+98     	; 0xc56 <UART_voidInit+0x110>
     bf4:	6e c0       	rjmp	.+220    	; 0xcd2 <UART_voidInit+0x18c>
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	98 89       	ldd	r25, Y+16	; 0x10
     bfa:	87 36       	cpi	r24, 0x67	; 103
     bfc:	91 05       	cpc	r25, r1
     bfe:	99 f0       	breq	.+38     	; 0xc26 <UART_voidInit+0xe0>
     c00:	2f 85       	ldd	r18, Y+15	; 0x0f
     c02:	38 89       	ldd	r19, Y+16	; 0x10
     c04:	2f 3c       	cpi	r18, 0xCF	; 207
     c06:	31 05       	cpc	r19, r1
     c08:	31 f0       	breq	.+12     	; 0xc16 <UART_voidInit+0xd0>
     c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0c:	98 89       	ldd	r25, Y+16	; 0x10
     c0e:	83 33       	cpi	r24, 0x33	; 51
     c10:	91 05       	cpc	r25, r1
     c12:	89 f0       	breq	.+34     	; 0xc36 <UART_voidInit+0xf0>
     c14:	5e c0       	rjmp	.+188    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_2400     :UBRRL|=UART_BAUD_RATE_2400     ;break;
     c16:	a9 e2       	ldi	r26, 0x29	; 41
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e9 e2       	ldi	r30, 0x29	; 41
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8f 6c       	ori	r24, 0xCF	; 207
     c22:	8c 93       	st	X, r24
     c24:	56 c0       	rjmp	.+172    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_4800     :UBRRL|=UART_BAUD_RATE_4800     ;break;
     c26:	a9 e2       	ldi	r26, 0x29	; 41
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e9 e2       	ldi	r30, 0x29	; 41
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	87 66       	ori	r24, 0x67	; 103
     c32:	8c 93       	st	X, r24
     c34:	4e c0       	rjmp	.+156    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_9600     :UBRRL|=UART_BAUD_RATE_9600     ;break;
     c36:	a9 e2       	ldi	r26, 0x29	; 41
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e9 e2       	ldi	r30, 0x29	; 41
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	83 63       	ori	r24, 0x33	; 51
     c42:	8c 93       	st	X, r24
     c44:	46 c0       	rjmp	.+140    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_14K      :UBRRL|=UART_BAUD_RATE_14K      ;break;
     c46:	a9 e2       	ldi	r26, 0x29	; 41
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	82 62       	ori	r24, 0x22	; 34
     c52:	8c 93       	st	X, r24
     c54:	3e c0       	rjmp	.+124    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_19K      :UBRRL|=UART_BAUD_RATE_19K      ;break;
     c56:	a9 e2       	ldi	r26, 0x29	; 41
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e9 e2       	ldi	r30, 0x29	; 41
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	89 61       	ori	r24, 0x19	; 25
     c62:	8c 93       	st	X, r24
     c64:	36 c0       	rjmp	.+108    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_28K      :UBRRL|=UART_BAUD_RATE_28K      ;break;
     c66:	a9 e2       	ldi	r26, 0x29	; 41
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e9 e2       	ldi	r30, 0x29	; 41
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	8c 93       	st	X, r24
     c74:	2e c0       	rjmp	.+92     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_38K      :UBRRL|=UART_BAUD_RATE_38K      ;break;
     c76:	a9 e2       	ldi	r26, 0x29	; 41
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e9 e2       	ldi	r30, 0x29	; 41
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8c 60       	ori	r24, 0x0C	; 12
     c82:	8c 93       	st	X, r24
     c84:	26 c0       	rjmp	.+76     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_57K      :UBRRL|=UART_BAUD_RATE_57K      ;break;
     c86:	a9 e2       	ldi	r26, 0x29	; 41
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e9 e2       	ldi	r30, 0x29	; 41
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	88 60       	ori	r24, 0x08	; 8
     c92:	8c 93       	st	X, r24
     c94:	1e c0       	rjmp	.+60     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_76K      :UBRRL|=UART_BAUD_RATE_76K      ;break;
     c96:	a9 e2       	ldi	r26, 0x29	; 41
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e9 e2       	ldi	r30, 0x29	; 41
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	86 60       	ori	r24, 0x06	; 6
     ca2:	8c 93       	st	X, r24
     ca4:	16 c0       	rjmp	.+44     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_115K     :UBRRL|=UART_BAUD_RATE_115K     ;break;
     ca6:	a9 e2       	ldi	r26, 0x29	; 41
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e9 e2       	ldi	r30, 0x29	; 41
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	83 60       	ori	r24, 0x03	; 3
     cb2:	8c 93       	st	X, r24
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_230K     :UBRRL|=UART_BAUD_RATE_230K     ;break;
     cb6:	a9 e2       	ldi	r26, 0x29	; 41
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e9 e2       	ldi	r30, 0x29	; 41
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <UART_voidInit+0x18c>
	//case UART_BAUD_RATE_250K     :UBRRL|=UART_BAUD_RATE_250K     ;break;
	case UART_BAUD_RATE_HALF_MEGA:UBRRL|=UART_BAUD_RATE_HALF_MEGA;break;
     cc6:	e9 e2       	ldi	r30, 0x29	; 41
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	a9 e2       	ldi	r26, 0x29	; 41
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	8c 91       	ld	r24, X
     cd0:	80 83       	st	Z, r24
	}
	// SET FRAME FORMAT
	// 1- SYNC OR ASYNC
	switch(Add_structUARTcfg->UART_u8Mode){
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	80 81       	ld	r24, Z
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	3e 87       	std	Y+14, r19	; 0x0e
     cde:	2d 87       	std	Y+13, r18	; 0x0d
     ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce4:	80 38       	cpi	r24, 0x80	; 128
     ce6:	91 05       	cpc	r25, r1
     ce8:	41 f1       	breq	.+80     	; 0xd3a <UART_voidInit+0x1f4>
     cea:	2d 85       	ldd	r18, Y+13	; 0x0d
     cec:	3e 85       	ldd	r19, Y+14	; 0x0e
     cee:	20 3c       	cpi	r18, 0xC0	; 192
     cf0:	31 05       	cpc	r19, r1
     cf2:	41 f5       	brne	.+80     	; 0xd44 <UART_voidInit+0x1fe>
	case UART_MODE_SYNCHRONOUS:
		Global_u8UCSRC_Value|=UART_MODE_SYNCHRONOUS;
     cf4:	80 91 1f 01 	lds	r24, 0x011F
     cf8:	80 6c       	ori	r24, 0xC0	; 192
     cfa:	80 93 1f 01 	sts	0x011F, r24
		// SET WHEN ACTION HAPPENS
		switch(Add_structUARTcfg->UART_u8ClockPolarity){
     cfe:	e9 81       	ldd	r30, Y+1	; 0x01
     d00:	fa 81       	ldd	r31, Y+2	; 0x02
     d02:	84 81       	ldd	r24, Z+4	; 0x04
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	3c 87       	std	Y+12, r19	; 0x0c
     d0a:	2b 87       	std	Y+11, r18	; 0x0b
     d0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d10:	80 38       	cpi	r24, 0x80	; 128
     d12:	91 05       	cpc	r25, r1
     d14:	31 f0       	breq	.+12     	; 0xd22 <UART_voidInit+0x1dc>
     d16:	2b 85       	ldd	r18, Y+11	; 0x0b
     d18:	3c 85       	ldd	r19, Y+12	; 0x0c
     d1a:	21 38       	cpi	r18, 0x81	; 129
     d1c:	31 05       	cpc	r19, r1
     d1e:	39 f0       	breq	.+14     	; 0xd2e <UART_voidInit+0x1e8>
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <UART_voidInit+0x1fe>
		case UART_CLOCK_POLARITY_TX_RISING_RX_FALLING: Global_u8UCSRC_Value|=UART_CLOCK_POLARITY_TX_RISING_RX_FALLING;break;
     d22:	80 91 1f 01 	lds	r24, 0x011F
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	80 93 1f 01 	sts	0x011F, r24
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <UART_voidInit+0x1fe>
		case UART_CLOCK_POLARITY_TX_FALLING_RX_RISING: Global_u8UCSRC_Value|=UART_CLOCK_POLARITY_TX_FALLING_RX_RISING;break;
     d2e:	80 91 1f 01 	lds	r24, 0x011F
     d32:	81 68       	ori	r24, 0x81	; 129
     d34:	80 93 1f 01 	sts	0x011F, r24
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <UART_voidInit+0x1fe>
		}
	break;
	case UART_MODE_ASYNCHRONOUS: Global_u8UCSRC_Value|=UART_MODE_ASYNCHRONOUS;break;
     d3a:	80 91 1f 01 	lds	r24, 0x011F
     d3e:	80 68       	ori	r24, 0x80	; 128
     d40:	80 93 1f 01 	sts	0x011F, r24
	}

	// 2- PARITY
	switch(Add_structUARTcfg->UART_u8Parity){
     d44:	e9 81       	ldd	r30, Y+1	; 0x01
     d46:	fa 81       	ldd	r31, Y+2	; 0x02
     d48:	81 81       	ldd	r24, Z+1	; 0x01
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3a 87       	std	Y+10, r19	; 0x0a
     d50:	29 87       	std	Y+9, r18	; 0x09
     d52:	89 85       	ldd	r24, Y+9	; 0x09
     d54:	9a 85       	ldd	r25, Y+10	; 0x0a
     d56:	80 3a       	cpi	r24, 0xA0	; 160
     d58:	91 05       	cpc	r25, r1
     d5a:	81 f0       	breq	.+32     	; 0xd7c <UART_voidInit+0x236>
     d5c:	29 85       	ldd	r18, Y+9	; 0x09
     d5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d60:	20 3b       	cpi	r18, 0xB0	; 176
     d62:	31 05       	cpc	r19, r1
     d64:	89 f0       	breq	.+34     	; 0xd88 <UART_voidInit+0x242>
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6a:	80 38       	cpi	r24, 0x80	; 128
     d6c:	91 05       	cpc	r25, r1
     d6e:	89 f4       	brne	.+34     	; 0xd92 <UART_voidInit+0x24c>
	case UART_PARITY_DISABLED: Global_u8UCSRC_Value|=UART_PARITY_DISABLED;break;
     d70:	80 91 1f 01 	lds	r24, 0x011F
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	80 93 1f 01 	sts	0x011F, r24
     d7a:	0b c0       	rjmp	.+22     	; 0xd92 <UART_voidInit+0x24c>
	case UART_PARITY_EVEN: Global_u8UCSRC_Value|=UART_PARITY_EVEN;break;
     d7c:	80 91 1f 01 	lds	r24, 0x011F
     d80:	80 6a       	ori	r24, 0xA0	; 160
     d82:	80 93 1f 01 	sts	0x011F, r24
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <UART_voidInit+0x24c>
	case UART_PARITY_ODD: Global_u8UCSRC_Value|=UART_PARITY_ODD;break;
     d88:	80 91 1f 01 	lds	r24, 0x011F
     d8c:	80 6b       	ori	r24, 0xB0	; 176
     d8e:	80 93 1f 01 	sts	0x011F, r24
	}

	// 3- CHARACTER SIZE
	switch(Add_structUARTcfg->UART_u8CharSize){
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	83 81       	ldd	r24, Z+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	38 87       	std	Y+8, r19	; 0x08
     d9e:	2f 83       	std	Y+7, r18	; 0x07
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	82 38       	cpi	r24, 0x82	; 130
     da6:	91 05       	cpc	r25, r1
     da8:	e1 f0       	breq	.+56     	; 0xde2 <UART_voidInit+0x29c>
     daa:	2f 81       	ldd	r18, Y+7	; 0x07
     dac:	38 85       	ldd	r19, Y+8	; 0x08
     dae:	23 38       	cpi	r18, 0x83	; 131
     db0:	31 05       	cpc	r19, r1
     db2:	34 f4       	brge	.+12     	; 0xdc0 <UART_voidInit+0x27a>
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	98 85       	ldd	r25, Y+8	; 0x08
     db8:	80 38       	cpi	r24, 0x80	; 128
     dba:	91 05       	cpc	r25, r1
     dbc:	61 f0       	breq	.+24     	; 0xdd6 <UART_voidInit+0x290>
     dbe:	22 c0       	rjmp	.+68     	; 0xe04 <UART_voidInit+0x2be>
     dc0:	2f 81       	ldd	r18, Y+7	; 0x07
     dc2:	38 85       	ldd	r19, Y+8	; 0x08
     dc4:	24 38       	cpi	r18, 0x84	; 132
     dc6:	31 05       	cpc	r19, r1
     dc8:	91 f0       	breq	.+36     	; 0xdee <UART_voidInit+0x2a8>
     dca:	8f 81       	ldd	r24, Y+7	; 0x07
     dcc:	98 85       	ldd	r25, Y+8	; 0x08
     dce:	86 38       	cpi	r24, 0x86	; 134
     dd0:	91 05       	cpc	r25, r1
     dd2:	99 f0       	breq	.+38     	; 0xdfa <UART_voidInit+0x2b4>
     dd4:	17 c0       	rjmp	.+46     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_5_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_5_BIT;break;
     dd6:	80 91 1f 01 	lds	r24, 0x011F
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	80 93 1f 01 	sts	0x011F, r24
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_6_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_6_BIT;break;
     de2:	80 91 1f 01 	lds	r24, 0x011F
     de6:	82 68       	ori	r24, 0x82	; 130
     de8:	80 93 1f 01 	sts	0x011F, r24
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_7_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_7_BIT;break;
     dee:	80 91 1f 01 	lds	r24, 0x011F
     df2:	84 68       	ori	r24, 0x84	; 132
     df4:	80 93 1f 01 	sts	0x011F, r24
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_8_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_8_BIT;break;
     dfa:	80 91 1f 01 	lds	r24, 0x011F
     dfe:	86 68       	ori	r24, 0x86	; 134
     e00:	80 93 1f 01 	sts	0x011F, r24
//		UCSRB|=UART_CHARACTER_SIZE_9_BIT_UCSRB_REG;
//	break;
	}

	// STOP BIT
	switch(Add_structUARTcfg->UART_u8StopBit){
     e04:	e9 81       	ldd	r30, Y+1	; 0x01
     e06:	fa 81       	ldd	r31, Y+2	; 0x02
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	3e 83       	std	Y+6, r19	; 0x06
     e10:	2d 83       	std	Y+5, r18	; 0x05
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	9e 81       	ldd	r25, Y+6	; 0x06
     e16:	80 38       	cpi	r24, 0x80	; 128
     e18:	91 05       	cpc	r25, r1
     e1a:	31 f0       	breq	.+12     	; 0xe28 <UART_voidInit+0x2e2>
     e1c:	2d 81       	ldd	r18, Y+5	; 0x05
     e1e:	3e 81       	ldd	r19, Y+6	; 0x06
     e20:	28 38       	cpi	r18, 0x88	; 136
     e22:	31 05       	cpc	r19, r1
     e24:	39 f0       	breq	.+14     	; 0xe34 <UART_voidInit+0x2ee>
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <UART_voidInit+0x2f8>
	case UART_STOP_BIT_SELECT_1_BIT: Global_u8UCSRC_Value |= UART_STOP_BIT_SELECT_1_BIT;break;
     e28:	80 91 1f 01 	lds	r24, 0x011F
     e2c:	80 68       	ori	r24, 0x80	; 128
     e2e:	80 93 1f 01 	sts	0x011F, r24
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <UART_voidInit+0x2f8>
	case UART_STOP_BIT_SELECT_2_BIT: Global_u8UCSRC_Value |= UART_STOP_BIT_SELECT_2_BIT;break;
     e34:	80 91 1f 01 	lds	r24, 0x011F
     e38:	88 68       	ori	r24, 0x88	; 136
     e3a:	80 93 1f 01 	sts	0x011F, r24
	}
	UCSRC=Global_u8UCSRC_Value;
     e3e:	e0 e4       	ldi	r30, 0x40	; 64
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 91 1f 01 	lds	r24, 0x011F
     e46:	80 83       	st	Z, r24
	//////////////////////////////////////////////////////////////////////////////////////////
	/***************************** ENABLE RX OR TX ******************************************/
	switch(Add_structUARTcfg->UART_u8EnableTXorRX){
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	86 81       	ldd	r24, Z+6	; 0x06
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3c 83       	std	Y+4, r19	; 0x04
     e54:	2b 83       	std	Y+3, r18	; 0x03
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	80 31       	cpi	r24, 0x10	; 16
     e5c:	91 05       	cpc	r25, r1
     e5e:	91 f0       	breq	.+36     	; 0xe84 <UART_voidInit+0x33e>
     e60:	2b 81       	ldd	r18, Y+3	; 0x03
     e62:	3c 81       	ldd	r19, Y+4	; 0x04
     e64:	28 31       	cpi	r18, 0x18	; 24
     e66:	31 05       	cpc	r19, r1
     e68:	a9 f0       	breq	.+42     	; 0xe94 <UART_voidInit+0x34e>
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	91 05       	cpc	r25, r1
     e72:	b9 f4       	brne	.+46     	; 0xea2 <UART_voidInit+0x35c>
	case UART_ENABLE_TX:UCSRB|=UART_ENABLE_TX;break;
     e74:	aa e2       	ldi	r26, 0x2A	; 42
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea e2       	ldi	r30, 0x2A	; 42
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	8c 93       	st	X, r24
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <UART_voidInit+0x35c>
	case UART_ENABLE_RX:UCSRB|=UART_ENABLE_RX;break;
     e84:	aa e2       	ldi	r26, 0x2A	; 42
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ea e2       	ldi	r30, 0x2A	; 42
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 61       	ori	r24, 0x10	; 16
     e90:	8c 93       	st	X, r24
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <UART_voidInit+0x35c>
	case UART_ENABLE_TX_RX:UCSRB|=UART_ENABLE_TX_RX;break;
     e94:	aa e2       	ldi	r26, 0x2A	; 42
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ea e2       	ldi	r30, 0x2A	; 42
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 61       	ori	r24, 0x18	; 24
     ea0:	8c 93       	st	X, r24
//	UBRRH = 0;
//	// SET FRAME FORMAT --> 8 DATA , 1 STOP , NO PARITY
//	UCSRC = 0x86;
//	// ENABLE RX AND TX
//	UCSRB = 0x18;
}
     ea2:	60 96       	adiw	r28, 0x10	; 16
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <UART_voidSendChar>:

void UART_voidSendChar(u8 Copy_u8Data){
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <UART_voidSendChar+0x6>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8UARTtimeOut=200;
     ec0:	88 ec       	ldi	r24, 0xC8	; 200
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <UART_voidSendChar+0x30>
	while(Loc_u8UARTtimeOut>0){
	if(GET_BIT(UCSRA,UART_DATA_REGISTER_EMPTY)==1)
     ec6:	eb e2       	ldi	r30, 0x2B	; 43
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 95       	swap	r24
     ece:	86 95       	lsr	r24
     ed0:	87 70       	andi	r24, 0x07	; 7
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	88 23       	and	r24, r24
     edc:	31 f4       	brne	.+12     	; 0xeea <UART_voidSendChar+0x36>
		break;
	else
		#warning TimeOut DATA REGISTER NOT EMPTY
	Loc_u8UARTtimeOut--;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	81 50       	subi	r24, 0x01	; 1
     ee2:	89 83       	std	Y+1, r24	; 0x01
//	UCSRB = 0x18;
}

void UART_voidSendChar(u8 Copy_u8Data){
	u8 Loc_u8UARTtimeOut=200;
	while(Loc_u8UARTtimeOut>0){
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	88 23       	and	r24, r24
     ee8:	71 f7       	brne	.-36     	; 0xec6 <UART_voidSendChar+0x12>
		break;
	else
		#warning TimeOut DATA REGISTER NOT EMPTY
	Loc_u8UARTtimeOut--;
	}
	UDR_T=Copy_u8Data;
     eea:	ec e2       	ldi	r30, 0x2C	; 44
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	80 83       	st	Z, r24
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <UART_u8GetChar>:

u8 UART_u8GetChar(void){
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <UART_u8GetChar+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Res;
	u8 Loc_u8UARTtimeOut=200;
     f06:	88 ec       	ldi	r24, 0xC8	; 200
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	0b c0       	rjmp	.+22     	; 0xf22 <UART_u8GetChar+0x26>
	while(Loc_u8UARTtimeOut>0){
		if(GET_BIT(UCSRA,UART_RECIEVE_COMPLETE)==1)
     f0c:	eb e2       	ldi	r30, 0x2B	; 43
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 1f       	adc	r24, r24
     f14:	88 27       	eor	r24, r24
     f16:	88 1f       	adc	r24, r24
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	31 f0       	breq	.+12     	; 0xf28 <UART_u8GetChar+0x2c>
			break;
		else
			#warning TimeOut RECIEVE NOT COMPLETED
		Loc_u8UARTtimeOut--;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01
}

u8 UART_u8GetChar(void){
	u8 Loc_u8Res;
	u8 Loc_u8UARTtimeOut=200;
	while(Loc_u8UARTtimeOut>0){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	91 f7       	brne	.-28     	; 0xf0c <UART_u8GetChar+0x10>
			break;
		else
			#warning TimeOut RECIEVE NOT COMPLETED
		Loc_u8UARTtimeOut--;
	}
	Loc_u8Res = UDR_R;
     f28:	ec e2       	ldi	r30, 0x2C	; 44
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8a 83       	std	Y+2, r24	; 0x02
	return Loc_u8Res;
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <TIMER_voidTimerInit>:
volatile f32 Global_u8TickTimeValue=0;
volatile f32 Global_u16PeriodicTimeValue=0;
volatile u16 Global_u8WaveFormGenerationMode;
volatile u8 Loc_u8BigDelayValueCounterMaxValue;

void TIMER_voidTimerInit(Timer_structTimerCfg*Add_structTimerCfg){
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	a6 97       	sbiw	r28, 0x26	; 38
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
	switch(Add_structTimerCfg->Timer_u8TimerNo){
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	80 81       	ld	r24, Z
     f5a:	83 70       	andi	r24, 0x03	; 3
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3e a3       	std	Y+38, r19	; 0x26
     f62:	2d a3       	std	Y+37, r18	; 0x25
     f64:	8d a1       	ldd	r24, Y+37	; 0x25
     f66:	9e a1       	ldd	r25, Y+38	; 0x26
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <TIMER_voidTimerInit+0x34>
     f6e:	32 c1       	rjmp	.+612    	; 0x11d4 <TIMER_voidTimerInit+0x298>
     f70:	2d a1       	ldd	r18, Y+37	; 0x25
     f72:	3e a1       	ldd	r19, Y+38	; 0x26
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <TIMER_voidTimerInit+0x40>
     f7a:	c8 c3       	rjmp	.+1936   	; 0x170c <TIMER_voidTimerInit+0x7d0>
     f7c:	8d a1       	ldd	r24, Y+37	; 0x25
     f7e:	9e a1       	ldd	r25, Y+38	; 0x26
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	09 f0       	breq	.+2      	; 0xf86 <TIMER_voidTimerInit+0x4a>
     f84:	f7 c4       	rjmp	.+2542   	; 0x1974 <TIMER_voidTimerInit+0xa38>
	case TIMER_NO_TIMER0:

		switch(Add_structTimerCfg->Timer_u8TimerForceOutputCompare){
     f86:	e9 81       	ldd	r30, Y+1	; 0x01
     f88:	fa 81       	ldd	r31, Y+2	; 0x02
     f8a:	21 81       	ldd	r18, Z+1	; 0x01
     f8c:	32 81       	ldd	r19, Z+2	; 0x02
     f8e:	3c a3       	std	Y+36, r19	; 0x24
     f90:	2b a3       	std	Y+35, r18	; 0x23
     f92:	8b a1       	ldd	r24, Y+35	; 0x23
     f94:	9c a1       	ldd	r25, Y+36	; 0x24
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	69 f0       	breq	.+26     	; 0xfb4 <TIMER_voidTimerInit+0x78>
     f9a:	2b a1       	ldd	r18, Y+35	; 0x23
     f9c:	3c a1       	ldd	r19, Y+36	; 0x24
     f9e:	20 38       	cpi	r18, 0x80	; 128
     fa0:	31 05       	cpc	r19, r1
     fa2:	71 f4       	brne	.+28     	; 0xfc0 <TIMER_voidTimerInit+0x84>
		case TIMER0_FOC_ON:TCCR0|=TIMER0_FOC_ON;break;
     fa4:	a3 e5       	ldi	r26, 0x53	; 83
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e3 e5       	ldi	r30, 0x53	; 83
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	8c 93       	st	X, r24
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <TIMER_voidTimerInit+0x84>
		case TIMER0_FOC_OFF:TCCR0|=TIMER0_FOC_OFF;break;
     fb4:	e3 e5       	ldi	r30, 0x53	; 83
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	a3 e5       	ldi	r26, 0x53	; 83
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	8c 91       	ld	r24, X
     fbe:	80 83       	st	Z, r24
		}

		switch(Add_structTimerCfg->Timer_u8WaveFormGenerationMode){
     fc0:	e9 81       	ldd	r30, Y+1	; 0x01
     fc2:	fa 81       	ldd	r31, Y+2	; 0x02
     fc4:	83 81       	ldd	r24, Z+3	; 0x03
     fc6:	94 81       	ldd	r25, Z+4	; 0x04
     fc8:	9a a3       	std	Y+34, r25	; 0x22
     fca:	89 a3       	std	Y+33, r24	; 0x21
     fcc:	29 a1       	ldd	r18, Y+33	; 0x21
     fce:	3a a1       	ldd	r19, Y+34	; 0x22
     fd0:	28 34       	cpi	r18, 0x48	; 72
     fd2:	31 05       	cpc	r19, r1
     fd4:	a9 f1       	breq	.+106    	; 0x1040 <TIMER_voidTimerInit+0x104>
     fd6:	89 a1       	ldd	r24, Y+33	; 0x21
     fd8:	9a a1       	ldd	r25, Y+34	; 0x22
     fda:	89 34       	cpi	r24, 0x49	; 73
     fdc:	91 05       	cpc	r25, r1
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <TIMER_voidTimerInit+0xa6>
     fe0:	4a c0       	rjmp	.+148    	; 0x1076 <TIMER_voidTimerInit+0x13a>
     fe2:	29 a1       	ldd	r18, Y+33	; 0x21
     fe4:	3a a1       	ldd	r19, Y+34	; 0x22
     fe6:	20 34       	cpi	r18, 0x40	; 64
     fe8:	31 05       	cpc	r19, r1
     fea:	e1 f0       	breq	.+56     	; 0x1024 <TIMER_voidTimerInit+0xe8>
     fec:	89 a1       	ldd	r24, Y+33	; 0x21
     fee:	9a a1       	ldd	r25, Y+34	; 0x22
     ff0:	81 34       	cpi	r24, 0x41	; 65
     ff2:	91 05       	cpc	r25, r1
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <TIMER_voidTimerInit+0xbc>
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <TIMER_voidTimerInit+0x13a>
     ff8:	29 a1       	ldd	r18, Y+33	; 0x21
     ffa:	3a a1       	ldd	r19, Y+34	; 0x22
     ffc:	21 15       	cp	r18, r1
     ffe:	31 05       	cpc	r19, r1
    1000:	31 f0       	breq	.+12     	; 0x100e <TIMER_voidTimerInit+0xd2>
    1002:	89 a1       	ldd	r24, Y+33	; 0x21
    1004:	9a a1       	ldd	r25, Y+34	; 0x22
    1006:	88 30       	cpi	r24, 0x08	; 8
    1008:	91 05       	cpc	r25, r1
    100a:	41 f1       	breq	.+80     	; 0x105c <TIMER_voidTimerInit+0x120>
    100c:	34 c0       	rjmp	.+104    	; 0x1076 <TIMER_voidTimerInit+0x13a>
		case TIMER0_MODE_NORMAL:			TCCR0|=TIMER0_MODE_NORMAL;Global_u8WaveFormGenerationMode=TIMER0_MODE_NORMAL;break;
    100e:	e3 e5       	ldi	r30, 0x53	; 83
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	a3 e5       	ldi	r26, 0x53	; 83
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	8c 91       	ld	r24, X
    1018:	80 83       	st	Z, r24
    101a:	10 92 2e 01 	sts	0x012E, r1
    101e:	10 92 2d 01 	sts	0x012D, r1
    1022:	29 c0       	rjmp	.+82     	; 0x1076 <TIMER_voidTimerInit+0x13a>
		case TIMER0_MODE_CTC:				TCCR0|=TIMER0_MODE_CTC;Global_u8WaveFormGenerationMode=TIMER0_MODE_CTC;break;
    1024:	a3 e5       	ldi	r26, 0x53	; 83
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e3 e5       	ldi	r30, 0x53	; 83
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	80 64       	ori	r24, 0x40	; 64
    1030:	8c 93       	st	X, r24
    1032:	80 e4       	ldi	r24, 0x40	; 64
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	90 93 2e 01 	sts	0x012E, r25
    103a:	80 93 2d 01 	sts	0x012D, r24
    103e:	1b c0       	rjmp	.+54     	; 0x1076 <TIMER_voidTimerInit+0x13a>
		case TIMER0_MODE_PWM_FAST:			TCCR0|=TIMER0_MODE_PWM_FAST;Global_u8WaveFormGenerationMode=TIMER0_MODE_PWM_FAST;break;
    1040:	a3 e5       	ldi	r26, 0x53	; 83
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e3 e5       	ldi	r30, 0x53	; 83
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 64       	ori	r24, 0x48	; 72
    104c:	8c 93       	st	X, r24
    104e:	88 e4       	ldi	r24, 0x48	; 72
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	90 93 2e 01 	sts	0x012E, r25
    1056:	80 93 2d 01 	sts	0x012D, r24
    105a:	0d c0       	rjmp	.+26     	; 0x1076 <TIMER_voidTimerInit+0x13a>
		case TIMER0_MODE_PWM_PHASE_CORRECT: TCCR0|=TIMER0_MODE_PWM_PHASE_CORRECT;Global_u8WaveFormGenerationMode=TIMER0_MODE_PWM_PHASE_CORRECT;break;
    105c:	a3 e5       	ldi	r26, 0x53	; 83
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e3 e5       	ldi	r30, 0x53	; 83
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	88 60       	ori	r24, 0x08	; 8
    1068:	8c 93       	st	X, r24
    106a:	88 e0       	ldi	r24, 0x08	; 8
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 2e 01 	sts	0x012E, r25
    1072:	80 93 2d 01 	sts	0x012D, r24
		}

		switch(Add_structTimerCfg->Timer_u8OcBehaviour){
    1076:	e9 81       	ldd	r30, Y+1	; 0x01
    1078:	fa 81       	ldd	r31, Y+2	; 0x02
    107a:	27 81       	ldd	r18, Z+7	; 0x07
    107c:	30 85       	ldd	r19, Z+8	; 0x08
    107e:	38 a3       	std	Y+32, r19	; 0x20
    1080:	2f 8f       	std	Y+31, r18	; 0x1f
    1082:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1084:	98 a1       	ldd	r25, Y+32	; 0x20
    1086:	80 31       	cpi	r24, 0x10	; 16
    1088:	91 05       	cpc	r25, r1
    108a:	e1 f0       	breq	.+56     	; 0x10c4 <TIMER_voidTimerInit+0x188>
    108c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    108e:	38 a1       	ldd	r19, Y+32	; 0x20
    1090:	21 31       	cpi	r18, 0x11	; 17
    1092:	31 05       	cpc	r19, r1
    1094:	28 f4       	brcc	.+10     	; 0x10a0 <TIMER_voidTimerInit+0x164>
    1096:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1098:	98 a1       	ldd	r25, Y+32	; 0x20
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	61 f0       	breq	.+24     	; 0x10b6 <TIMER_voidTimerInit+0x17a>
    109e:	29 c0       	rjmp	.+82     	; 0x10f2 <TIMER_voidTimerInit+0x1b6>
    10a0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    10a2:	38 a1       	ldd	r19, Y+32	; 0x20
    10a4:	20 32       	cpi	r18, 0x20	; 32
    10a6:	31 05       	cpc	r19, r1
    10a8:	a9 f0       	breq	.+42     	; 0x10d4 <TIMER_voidTimerInit+0x198>
    10aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ac:	98 a1       	ldd	r25, Y+32	; 0x20
    10ae:	80 33       	cpi	r24, 0x30	; 48
    10b0:	91 05       	cpc	r25, r1
    10b2:	c1 f0       	breq	.+48     	; 0x10e4 <TIMER_voidTimerInit+0x1a8>
    10b4:	1e c0       	rjmp	.+60     	; 0x10f2 <TIMER_voidTimerInit+0x1b6>
		case TIMER0_OC0_NO_PWM_NORMAL_OPERATION:TCCR0|=TIMER0_OC0_NO_PWM_NORMAL_OPERATION;break;
    10b6:	e3 e5       	ldi	r30, 0x53	; 83
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	a3 e5       	ldi	r26, 0x53	; 83
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	8c 91       	ld	r24, X
    10c0:	80 83       	st	Z, r24
    10c2:	17 c0       	rjmp	.+46     	; 0x10f2 <TIMER_voidTimerInit+0x1b6>
		case TIMER0_OC0_NO_PWM_TOGGLE_OPERATION:TCCR0|=TIMER0_OC0_NO_PWM_TOGGLE_OPERATION;break;
    10c4:	a3 e5       	ldi	r26, 0x53	; 83
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e3 e5       	ldi	r30, 0x53	; 83
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	80 61       	ori	r24, 0x10	; 16
    10d0:	8c 93       	st	X, r24
    10d2:	0f c0       	rjmp	.+30     	; 0x10f2 <TIMER_voidTimerInit+0x1b6>
		case TIMER0_OC0_NO_PWM_CLEAR_OPERATION: TCCR0|=TIMER0_OC0_NO_PWM_CLEAR_OPERATION;break;
    10d4:	a3 e5       	ldi	r26, 0x53	; 83
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e3 e5       	ldi	r30, 0x53	; 83
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 62       	ori	r24, 0x20	; 32
    10e0:	8c 93       	st	X, r24
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <TIMER_voidTimerInit+0x1b6>
		case TIMER0_OC0_NO_PWM_SET_OPERATION:   TCCR0|=TIMER0_OC0_NO_PWM_SET_OPERATION;break;
    10e4:	a3 e5       	ldi	r26, 0x53	; 83
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e3 e5       	ldi	r30, 0x53	; 83
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 63       	ori	r24, 0x30	; 48
    10f0:	8c 93       	st	X, r24
		}


		switch(Add_structTimerCfg->Timer_u8ClockSelect){
    10f2:	e9 81       	ldd	r30, Y+1	; 0x01
    10f4:	fa 81       	ldd	r31, Y+2	; 0x02
    10f6:	25 81       	ldd	r18, Z+5	; 0x05
    10f8:	36 81       	ldd	r19, Z+6	; 0x06
    10fa:	3e 8f       	std	Y+30, r19	; 0x1e
    10fc:	2d 8f       	std	Y+29, r18	; 0x1d
    10fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1100:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	91 05       	cpc	r25, r1
    1106:	71 f1       	breq	.+92     	; 0x1164 <TIMER_voidTimerInit+0x228>
    1108:	2d 8d       	ldd	r18, Y+29	; 0x1d
    110a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    110c:	23 30       	cpi	r18, 0x03	; 3
    110e:	31 05       	cpc	r19, r1
    1110:	50 f4       	brcc	.+20     	; 0x1126 <TIMER_voidTimerInit+0x1ea>
    1112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1114:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	b1 f0       	breq	.+44     	; 0x1146 <TIMER_voidTimerInit+0x20a>
    111a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    111c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	31 05       	cpc	r19, r1
    1122:	c1 f0       	breq	.+48     	; 0x1154 <TIMER_voidTimerInit+0x218>
    1124:	27 c4       	rjmp	.+2126   	; 0x1974 <TIMER_voidTimerInit+0xa38>
    1126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1128:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	91 05       	cpc	r25, r1
    112e:	b1 f1       	breq	.+108    	; 0x119c <TIMER_voidTimerInit+0x260>
    1130:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1132:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1134:	24 30       	cpi	r18, 0x04	; 4
    1136:	31 05       	cpc	r19, r1
    1138:	18 f1       	brcs	.+70     	; 0x1180 <TIMER_voidTimerInit+0x244>
    113a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    113c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    113e:	85 30       	cpi	r24, 0x05	; 5
    1140:	91 05       	cpc	r25, r1
    1142:	d1 f1       	breq	.+116    	; 0x11b8 <TIMER_voidTimerInit+0x27c>
    1144:	17 c4       	rjmp	.+2094   	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER0_CLOCK_NO_CLOCK_SOURCE : TCCR0|=TIMER0_CLOCK_NO_CLOCK_SOURCE ; break;
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	a3 e5       	ldi	r26, 0x53	; 83
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	8c 91       	ld	r24, X
    1150:	80 83       	st	Z, r24
    1152:	10 c4       	rjmp	.+2080   	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER0_CLOCK_NO_PRESCALLING  : TCCR0|=TIMER0_CLOCK_NO_PRESCALLING  ; break;
    1154:	a3 e5       	ldi	r26, 0x53	; 83
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e3 e5       	ldi	r30, 0x53	; 83
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	8c 93       	st	X, r24
    1162:	08 c4       	rjmp	.+2064   	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER0_CLOCK_PRESCALLING_8   : TCCR0|=TIMER0_CLOCK_PRESCALLING_8;Global_u16TimerClockPrescalerValue=8; break;
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	82 60       	ori	r24, 0x02	; 2
    1170:	8c 93       	st	X, r24
    1172:	88 e0       	ldi	r24, 0x08	; 8
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	90 93 21 01 	sts	0x0121, r25
    117a:	80 93 20 01 	sts	0x0120, r24
    117e:	fa c3       	rjmp	.+2036   	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER0_CLOCK_PRESCALLING_64  : TCCR0|=TIMER0_CLOCK_PRESCALLING_64;Global_u16TimerClockPrescalerValue=64; break;
    1180:	a3 e5       	ldi	r26, 0x53	; 83
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e3 e5       	ldi	r30, 0x53	; 83
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	83 60       	ori	r24, 0x03	; 3
    118c:	8c 93       	st	X, r24
    118e:	80 e4       	ldi	r24, 0x40	; 64
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	90 93 21 01 	sts	0x0121, r25
    1196:	80 93 20 01 	sts	0x0120, r24
    119a:	ec c3       	rjmp	.+2008   	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER0_CLOCK_PRESCALLING_256 : TCCR0|=TIMER0_CLOCK_PRESCALLING_256;Global_u16TimerClockPrescalerValue=128;break;
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	8c 93       	st	X, r24
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	90 93 21 01 	sts	0x0121, r25
    11b2:	80 93 20 01 	sts	0x0120, r24
    11b6:	de c3       	rjmp	.+1980   	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER0_CLOCK_PRESCALLING_1024: TCCR0|=TIMER0_CLOCK_PRESCALLING_1024;Global_u16TimerClockPrescalerValue=1024;break;
    11b8:	a3 e5       	ldi	r26, 0x53	; 83
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e3 e5       	ldi	r30, 0x53	; 83
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	85 60       	ori	r24, 0x05	; 5
    11c4:	8c 93       	st	X, r24
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	94 e0       	ldi	r25, 0x04	; 4
    11ca:	90 93 21 01 	sts	0x0121, r25
    11ce:	80 93 20 01 	sts	0x0120, r24
    11d2:	d0 c3       	rjmp	.+1952   	; 0x1974 <TIMER_voidTimerInit+0xa38>
		}
	break;
	case TIMER_NO_TIMER1:

		switch(Add_structTimerCfg->Timer_u8TimerForceOutputCompare){
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	21 81       	ldd	r18, Z+1	; 0x01
    11da:	32 81       	ldd	r19, Z+2	; 0x02
    11dc:	3c 8f       	std	Y+28, r19	; 0x1c
    11de:	2b 8f       	std	Y+27, r18	; 0x1b
    11e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f1       	breq	.+90     	; 0x1242 <TIMER_voidTimerInit+0x306>
    11e8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    11ea:	3c 8d       	ldd	r19, Y+28	; 0x1c
    11ec:	21 30       	cpi	r18, 0x01	; 1
    11ee:	31 05       	cpc	r19, r1
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <TIMER_voidTimerInit+0x2b8>
    11f2:	4a c0       	rjmp	.+148    	; 0x1288 <TIMER_voidTimerInit+0x34c>
		case TIMER1_FOC_ON:
			switch(Add_structTimerCfg->Timer1_u8Channel){
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	81 85       	ldd	r24, Z+9	; 0x09
    11fa:	92 85       	ldd	r25, Z+10	; 0x0a
    11fc:	9a 8f       	std	Y+26, r25	; 0x1a
    11fe:	89 8f       	std	Y+25, r24	; 0x19
    1200:	29 8d       	ldd	r18, Y+25	; 0x19
    1202:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1204:	21 15       	cp	r18, r1
    1206:	31 05       	cpc	r19, r1
    1208:	31 f0       	breq	.+12     	; 0x1216 <TIMER_voidTimerInit+0x2da>
    120a:	89 8d       	ldd	r24, Y+25	; 0x19
    120c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	61 f0       	breq	.+24     	; 0x122c <TIMER_voidTimerInit+0x2f0>
    1214:	39 c0       	rjmp	.+114    	; 0x1288 <TIMER_voidTimerInit+0x34c>
				case TIMER1_CHANNEL_A: TCCR1|=TIMER1_FOC_CHANNEL_A_ON;break;
    1216:	ae e4       	ldi	r26, 0x4E	; 78
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ee e4       	ldi	r30, 0x4E	; 78
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	94 60       	ori	r25, 0x04	; 4
    1224:	11 96       	adiw	r26, 0x01	; 1
    1226:	9c 93       	st	X, r25
    1228:	8e 93       	st	-X, r24
    122a:	2e c0       	rjmp	.+92     	; 0x1288 <TIMER_voidTimerInit+0x34c>
				case TIMER1_CHANNEL_B: TCCR1|=TIMER1_FOC_CHANNEL_B_ON;break;
    122c:	ae e4       	ldi	r26, 0x4E	; 78
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ee e4       	ldi	r30, 0x4E	; 78
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	98 60       	ori	r25, 0x08	; 8
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	9c 93       	st	X, r25
    123e:	8e 93       	st	-X, r24
    1240:	23 c0       	rjmp	.+70     	; 0x1288 <TIMER_voidTimerInit+0x34c>
			}
		break;
		case TIMER1_FOC_OFF:
			switch(Add_structTimerCfg->Timer1_u8Channel){
    1242:	e9 81       	ldd	r30, Y+1	; 0x01
    1244:	fa 81       	ldd	r31, Y+2	; 0x02
    1246:	21 85       	ldd	r18, Z+9	; 0x09
    1248:	32 85       	ldd	r19, Z+10	; 0x0a
    124a:	38 8f       	std	Y+24, r19	; 0x18
    124c:	2f 8b       	std	Y+23, r18	; 0x17
    124e:	8f 89       	ldd	r24, Y+23	; 0x17
    1250:	98 8d       	ldd	r25, Y+24	; 0x18
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	31 f0       	breq	.+12     	; 0x1262 <TIMER_voidTimerInit+0x326>
    1256:	2f 89       	ldd	r18, Y+23	; 0x17
    1258:	38 8d       	ldd	r19, Y+24	; 0x18
    125a:	21 30       	cpi	r18, 0x01	; 1
    125c:	31 05       	cpc	r19, r1
    125e:	59 f0       	breq	.+22     	; 0x1276 <TIMER_voidTimerInit+0x33a>
    1260:	13 c0       	rjmp	.+38     	; 0x1288 <TIMER_voidTimerInit+0x34c>
				case TIMER1_CHANNEL_A: TCCR1|=TIMER1_FOC_CHANNEL_A_OFF;break;
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	ae e4       	ldi	r26, 0x4E	; 78
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	8d 91       	ld	r24, X+
    126c:	9c 91       	ld	r25, X
    126e:	11 97       	sbiw	r26, 0x01	; 1
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <TIMER_voidTimerInit+0x34c>
				case TIMER1_CHANNEL_B: TCCR1|=TIMER1_FOC_CHANNEL_B_OFF;break;
    1276:	ee e4       	ldi	r30, 0x4E	; 78
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	ae e4       	ldi	r26, 0x4E	; 78
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	8d 91       	ld	r24, X+
    1280:	9c 91       	ld	r25, X
    1282:	11 97       	sbiw	r26, 0x01	; 1
    1284:	91 83       	std	Z+1, r25	; 0x01
    1286:	80 83       	st	Z, r24
			}
		break;
		}

		switch(Add_structTimerCfg->Timer_u8WaveFormGenerationMode){
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	83 81       	ldd	r24, Z+3	; 0x03
    128e:	94 81       	ldd	r25, Z+4	; 0x04
    1290:	9e 8b       	std	Y+22, r25	; 0x16
    1292:	8d 8b       	std	Y+21, r24	; 0x15
    1294:	2d 89       	ldd	r18, Y+21	; 0x15
    1296:	3e 89       	ldd	r19, Y+22	; 0x16
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	20 30       	cpi	r18, 0x00	; 0
    129c:	38 07       	cpc	r19, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <TIMER_voidTimerInit+0x366>
    12a0:	85 c0       	rjmp	.+266    	; 0x13ac <TIMER_voidTimerInit+0x470>
    12a2:	2d 89       	ldd	r18, Y+21	; 0x15
    12a4:	3e 89       	ldd	r19, Y+22	; 0x16
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	21 30       	cpi	r18, 0x01	; 1
    12aa:	38 07       	cpc	r19, r24
    12ac:	70 f5       	brcc	.+92     	; 0x130a <TIMER_voidTimerInit+0x3ce>
    12ae:	2d 89       	ldd	r18, Y+21	; 0x15
    12b0:	3e 89       	ldd	r19, Y+22	; 0x16
    12b2:	28 31       	cpi	r18, 0x18	; 24
    12b4:	31 05       	cpc	r19, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <TIMER_voidTimerInit+0x37e>
    12b8:	06 c1       	rjmp	.+524    	; 0x14c6 <TIMER_voidTimerInit+0x58a>
    12ba:	8d 89       	ldd	r24, Y+21	; 0x15
    12bc:	9e 89       	ldd	r25, Y+22	; 0x16
    12be:	89 31       	cpi	r24, 0x19	; 25
    12c0:	91 05       	cpc	r25, r1
    12c2:	68 f4       	brcc	.+26     	; 0x12de <TIMER_voidTimerInit+0x3a2>
    12c4:	2d 89       	ldd	r18, Y+21	; 0x15
    12c6:	3e 89       	ldd	r19, Y+22	; 0x16
    12c8:	21 15       	cp	r18, r1
    12ca:	31 05       	cpc	r19, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <TIMER_voidTimerInit+0x394>
    12ce:	4f c0       	rjmp	.+158    	; 0x136e <TIMER_voidTimerInit+0x432>
    12d0:	8d 89       	ldd	r24, Y+21	; 0x15
    12d2:	9e 89       	ldd	r25, Y+22	; 0x16
    12d4:	88 30       	cpi	r24, 0x08	; 8
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <TIMER_voidTimerInit+0x3a0>
    12da:	8a c0       	rjmp	.+276    	; 0x13f0 <TIMER_voidTimerInit+0x4b4>
    12dc:	28 c1       	rjmp	.+592    	; 0x152e <TIMER_voidTimerInit+0x5f2>
    12de:	2d 89       	ldd	r18, Y+21	; 0x15
    12e0:	3e 89       	ldd	r19, Y+22	; 0x16
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	28 30       	cpi	r18, 0x08	; 8
    12e6:	38 07       	cpc	r19, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <TIMER_voidTimerInit+0x3b0>
    12ea:	93 c0       	rjmp	.+294    	; 0x1412 <TIMER_voidTimerInit+0x4d6>
    12ec:	2d 89       	ldd	r18, Y+21	; 0x15
    12ee:	3e 89       	ldd	r19, Y+22	; 0x16
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	28 31       	cpi	r18, 0x18	; 24
    12f4:	38 07       	cpc	r19, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <TIMER_voidTimerInit+0x3be>
    12f8:	f7 c0       	rjmp	.+494    	; 0x14e8 <TIMER_voidTimerInit+0x5ac>
    12fa:	2d 89       	ldd	r18, Y+21	; 0x15
    12fc:	3e 89       	ldd	r19, Y+22	; 0x16
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	20 30       	cpi	r18, 0x00	; 0
    1302:	38 07       	cpc	r19, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <TIMER_voidTimerInit+0x3cc>
    1306:	41 c0       	rjmp	.+130    	; 0x138a <TIMER_voidTimerInit+0x44e>
    1308:	12 c1       	rjmp	.+548    	; 0x152e <TIMER_voidTimerInit+0x5f2>
    130a:	2d 89       	ldd	r18, Y+21	; 0x15
    130c:	3e 89       	ldd	r19, Y+22	; 0x16
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	20 30       	cpi	r18, 0x00	; 0
    1312:	38 07       	cpc	r19, r24
    1314:	09 f4       	brne	.+2      	; 0x1318 <TIMER_voidTimerInit+0x3dc>
    1316:	5b c0       	rjmp	.+182    	; 0x13ce <TIMER_voidTimerInit+0x492>
    1318:	2d 89       	ldd	r18, Y+21	; 0x15
    131a:	3e 89       	ldd	r19, Y+22	; 0x16
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	21 30       	cpi	r18, 0x01	; 1
    1320:	38 07       	cpc	r19, r24
    1322:	78 f4       	brcc	.+30     	; 0x1342 <TIMER_voidTimerInit+0x406>
    1324:	2d 89       	ldd	r18, Y+21	; 0x15
    1326:	3e 89       	ldd	r19, Y+22	; 0x16
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	28 30       	cpi	r18, 0x08	; 8
    132c:	38 07       	cpc	r19, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <TIMER_voidTimerInit+0x3f6>
    1330:	82 c0       	rjmp	.+260    	; 0x1436 <TIMER_voidTimerInit+0x4fa>
    1332:	2d 89       	ldd	r18, Y+21	; 0x15
    1334:	3e 89       	ldd	r19, Y+22	; 0x16
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	20 31       	cpi	r18, 0x10	; 16
    133a:	38 07       	cpc	r19, r24
    133c:	09 f4       	brne	.+2      	; 0x1340 <TIMER_voidTimerInit+0x404>
    133e:	9f c0       	rjmp	.+318    	; 0x147e <TIMER_voidTimerInit+0x542>
    1340:	f6 c0       	rjmp	.+492    	; 0x152e <TIMER_voidTimerInit+0x5f2>
    1342:	2d 89       	ldd	r18, Y+21	; 0x15
    1344:	3e 89       	ldd	r19, Y+22	; 0x16
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	20 31       	cpi	r18, 0x10	; 16
    134a:	38 07       	cpc	r19, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <TIMER_voidTimerInit+0x414>
    134e:	a9 c0       	rjmp	.+338    	; 0x14a2 <TIMER_voidTimerInit+0x566>
    1350:	2d 89       	ldd	r18, Y+21	; 0x15
    1352:	3e 89       	ldd	r19, Y+22	; 0x16
    1354:	83 e0       	ldi	r24, 0x03	; 3
    1356:	28 31       	cpi	r18, 0x18	; 24
    1358:	38 07       	cpc	r19, r24
    135a:	09 f4       	brne	.+2      	; 0x135e <TIMER_voidTimerInit+0x422>
    135c:	d7 c0       	rjmp	.+430    	; 0x150c <TIMER_voidTimerInit+0x5d0>
    135e:	2d 89       	ldd	r18, Y+21	; 0x15
    1360:	3e 89       	ldd	r19, Y+22	; 0x16
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	28 30       	cpi	r18, 0x08	; 8
    1366:	38 07       	cpc	r19, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <TIMER_voidTimerInit+0x430>
    136a:	77 c0       	rjmp	.+238    	; 0x145a <TIMER_voidTimerInit+0x51e>
    136c:	e0 c0       	rjmp	.+448    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_NORMAL                              :TCCR1|=TIMER1_MODE_NORMAL                              ;Global_u8WaveFormGenerationMode=TIMER1_MODE_NORMAL                             ;break;
    136e:	ee e4       	ldi	r30, 0x4E	; 78
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	ae e4       	ldi	r26, 0x4E	; 78
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	8d 91       	ld	r24, X+
    1378:	9c 91       	ld	r25, X
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	80 83       	st	Z, r24
    1380:	10 92 2e 01 	sts	0x012E, r1
    1384:	10 92 2d 01 	sts	0x012D, r1
    1388:	d2 c0       	rjmp	.+420    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT             :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT             ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT            ;break;
    138a:	ae e4       	ldi	r26, 0x4E	; 78
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ee e4       	ldi	r30, 0x4E	; 78
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	91 60       	ori	r25, 0x01	; 1
    1398:	11 96       	adiw	r26, 0x01	; 1
    139a:	9c 93       	st	X, r25
    139c:	8e 93       	st	-X, r24
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	90 93 2e 01 	sts	0x012E, r25
    13a6:	80 93 2d 01 	sts	0x012D, r24
    13aa:	c1 c0       	rjmp	.+386    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT             :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT             ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT            ;break;
    13ac:	ae e4       	ldi	r26, 0x4E	; 78
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ee e4       	ldi	r30, 0x4E	; 78
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	92 60       	ori	r25, 0x02	; 2
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	9c 93       	st	X, r25
    13be:	8e 93       	st	-X, r24
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	90 93 2e 01 	sts	0x012E, r25
    13c8:	80 93 2d 01 	sts	0x012D, r24
    13cc:	b0 c0       	rjmp	.+352    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT            :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT           ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT           ;break;
    13ce:	ae e4       	ldi	r26, 0x4E	; 78
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ee e4       	ldi	r30, 0x4E	; 78
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	93 60       	ori	r25, 0x03	; 3
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	9c 93       	st	X, r25
    13e0:	8e 93       	st	-X, r24
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	90 93 2e 01 	sts	0x012E, r25
    13ea:	80 93 2d 01 	sts	0x012D, r24
    13ee:	9f c0       	rjmp	.+318    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_CTC                                 :TCCR1|=TIMER1_MODE_CTC                                ;Global_u8WaveFormGenerationMode=TIMER1_MODE_CTC                                ;break;
    13f0:	ae e4       	ldi	r26, 0x4E	; 78
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ee e4       	ldi	r30, 0x4E	; 78
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	88 60       	ori	r24, 0x08	; 8
    13fe:	11 96       	adiw	r26, 0x01	; 1
    1400:	9c 93       	st	X, r25
    1402:	8e 93       	st	-X, r24
    1404:	88 e0       	ldi	r24, 0x08	; 8
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	90 93 2e 01 	sts	0x012E, r25
    140c:	80 93 2d 01 	sts	0x012D, r24
    1410:	8e c0       	rjmp	.+284    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_FAST_8_BIT                      :TCCR1|=TIMER1_MODE_PWM_FAST_8_BIT                     ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_8_BIT                     ;break;
    1412:	ae e4       	ldi	r26, 0x4E	; 78
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ee e4       	ldi	r30, 0x4E	; 78
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	88 60       	ori	r24, 0x08	; 8
    1420:	91 60       	ori	r25, 0x01	; 1
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
    1428:	88 e0       	ldi	r24, 0x08	; 8
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	90 93 2e 01 	sts	0x012E, r25
    1430:	80 93 2d 01 	sts	0x012D, r24
    1434:	7c c0       	rjmp	.+248    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_FAST_9_BIT                      :TCCR1|=TIMER1_MODE_PWM_FAST_9_BIT                     ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_9_BIT                     ;break;
    1436:	ae e4       	ldi	r26, 0x4E	; 78
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ee e4       	ldi	r30, 0x4E	; 78
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	88 60       	ori	r24, 0x08	; 8
    1444:	92 60       	ori	r25, 0x02	; 2
    1446:	11 96       	adiw	r26, 0x01	; 1
    1448:	9c 93       	st	X, r25
    144a:	8e 93       	st	-X, r24
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	90 93 2e 01 	sts	0x012E, r25
    1454:	80 93 2d 01 	sts	0x012D, r24
    1458:	6a c0       	rjmp	.+212    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_FAST_10_BIT                     :TCCR1|=TIMER1_MODE_PWM_FAST_10_BIT                    ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_10_BIT                    ;break;
    145a:	ae e4       	ldi	r26, 0x4E	; 78
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ee e4       	ldi	r30, 0x4E	; 78
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	88 60       	ori	r24, 0x08	; 8
    1468:	93 60       	ori	r25, 0x03	; 3
    146a:	11 96       	adiw	r26, 0x01	; 1
    146c:	9c 93       	st	X, r25
    146e:	8e 93       	st	-X, r24
    1470:	88 e0       	ldi	r24, 0x08	; 8
    1472:	93 e0       	ldi	r25, 0x03	; 3
    1474:	90 93 2e 01 	sts	0x012E, r25
    1478:	80 93 2d 01 	sts	0x012D, r24
    147c:	58 c0       	rjmp	.+176    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_PHASE_CORRECT_SET_TOP_VALUE     :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_SET_TOP_VALUE    ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_SET_TOP_VALUE    ;break;
    147e:	ae e4       	ldi	r26, 0x4E	; 78
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ee e4       	ldi	r30, 0x4E	; 78
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	80 61       	ori	r24, 0x10	; 16
    148c:	92 60       	ori	r25, 0x02	; 2
    148e:	11 96       	adiw	r26, 0x01	; 1
    1490:	9c 93       	st	X, r25
    1492:	8e 93       	st	-X, r24
    1494:	80 e1       	ldi	r24, 0x10	; 16
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	90 93 2e 01 	sts	0x012E, r25
    149c:	80 93 2d 01 	sts	0x012D, r24
    14a0:	46 c0       	rjmp	.+140    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_PHASE_CORRECT_COMPARE_CHANNEL_A :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_COMPARE_CHANNEL_A;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_COMPARE_CHANNEL_A;break;
    14a2:	ae e4       	ldi	r26, 0x4E	; 78
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ee e4       	ldi	r30, 0x4E	; 78
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	80 61       	ori	r24, 0x10	; 16
    14b0:	93 60       	ori	r25, 0x03	; 3
    14b2:	11 96       	adiw	r26, 0x01	; 1
    14b4:	9c 93       	st	X, r25
    14b6:	8e 93       	st	-X, r24
    14b8:	80 e1       	ldi	r24, 0x10	; 16
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	90 93 2e 01 	sts	0x012E, r25
    14c0:	80 93 2d 01 	sts	0x012D, r24
    14c4:	34 c0       	rjmp	.+104    	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_CTC_SET_TOP_VALUE               :TCCR1|=TIMER1_MODE_PWM_CTC_SET_TOP_VALUE              ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_CTC_SET_TOP_VALUE              ;break;
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	88 61       	ori	r24, 0x18	; 24
    14d4:	11 96       	adiw	r26, 0x01	; 1
    14d6:	9c 93       	st	X, r25
    14d8:	8e 93       	st	-X, r24
    14da:	88 e1       	ldi	r24, 0x18	; 24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	90 93 2e 01 	sts	0x012E, r25
    14e2:	80 93 2d 01 	sts	0x012D, r24
    14e6:	23 c0       	rjmp	.+70     	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_FAST_SET_TOP_VALUE              :TCCR1|=TIMER1_MODE_PWM_FAST_SET_TOP_VALUE             ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_SET_TOP_VALUE             ;break;
    14e8:	ae e4       	ldi	r26, 0x4E	; 78
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ee e4       	ldi	r30, 0x4E	; 78
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	88 61       	ori	r24, 0x18	; 24
    14f6:	91 60       	ori	r25, 0x01	; 1
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	9c 93       	st	X, r25
    14fc:	8e 93       	st	-X, r24
    14fe:	88 e1       	ldi	r24, 0x18	; 24
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	90 93 2e 01 	sts	0x012E, r25
    1506:	80 93 2d 01 	sts	0x012D, r24
    150a:	11 c0       	rjmp	.+34     	; 0x152e <TIMER_voidTimerInit+0x5f2>
		case TIMER1_MODE_PWM_FAST_COMPARE_CHANNEL_A          :TCCR1|=TIMER1_MODE_PWM_FAST_COMPARE_CHANNEL_A         ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_COMPARE_CHANNEL_A         ;break;
    150c:	ae e4       	ldi	r26, 0x4E	; 78
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ee e4       	ldi	r30, 0x4E	; 78
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	88 61       	ori	r24, 0x18	; 24
    151a:	93 60       	ori	r25, 0x03	; 3
    151c:	11 96       	adiw	r26, 0x01	; 1
    151e:	9c 93       	st	X, r25
    1520:	8e 93       	st	-X, r24
    1522:	88 e1       	ldi	r24, 0x18	; 24
    1524:	93 e0       	ldi	r25, 0x03	; 3
    1526:	90 93 2e 01 	sts	0x012E, r25
    152a:	80 93 2d 01 	sts	0x012D, r24

		}

		switch(Add_structTimerCfg->Timer_u8OcBehaviour){
    152e:	e9 81       	ldd	r30, Y+1	; 0x01
    1530:	fa 81       	ldd	r31, Y+2	; 0x02
    1532:	27 81       	ldd	r18, Z+7	; 0x07
    1534:	30 85       	ldd	r19, Z+8	; 0x08
    1536:	3c 8b       	std	Y+20, r19	; 0x14
    1538:	2b 8b       	std	Y+19, r18	; 0x13
    153a:	8b 89       	ldd	r24, Y+19	; 0x13
    153c:	9c 89       	ldd	r25, Y+20	; 0x14
    153e:	20 e3       	ldi	r18, 0x30	; 48
    1540:	80 30       	cpi	r24, 0x00	; 0
    1542:	92 07       	cpc	r25, r18
    1544:	09 f4       	brne	.+2      	; 0x1548 <TIMER_voidTimerInit+0x60c>
    1546:	4c c0       	rjmp	.+152    	; 0x15e0 <TIMER_voidTimerInit+0x6a4>
    1548:	8b 89       	ldd	r24, Y+19	; 0x13
    154a:	9c 89       	ldd	r25, Y+20	; 0x14
    154c:	20 e3       	ldi	r18, 0x30	; 48
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	92 07       	cpc	r25, r18
    1552:	88 f4       	brcc	.+34     	; 0x1576 <TIMER_voidTimerInit+0x63a>
    1554:	8b 89       	ldd	r24, Y+19	; 0x13
    1556:	9c 89       	ldd	r25, Y+20	; 0x14
    1558:	20 e1       	ldi	r18, 0x10	; 16
    155a:	80 30       	cpi	r24, 0x00	; 0
    155c:	92 07       	cpc	r25, r18
    155e:	51 f1       	breq	.+84     	; 0x15b4 <TIMER_voidTimerInit+0x678>
    1560:	8b 89       	ldd	r24, Y+19	; 0x13
    1562:	9c 89       	ldd	r25, Y+20	; 0x14
    1564:	20 e2       	ldi	r18, 0x20	; 32
    1566:	80 30       	cpi	r24, 0x00	; 0
    1568:	92 07       	cpc	r25, r18
    156a:	79 f1       	breq	.+94     	; 0x15ca <TIMER_voidTimerInit+0x68e>
    156c:	8b 89       	ldd	r24, Y+19	; 0x13
    156e:	9c 89       	ldd	r25, Y+20	; 0x14
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	b1 f0       	breq	.+44     	; 0x15a0 <TIMER_voidTimerInit+0x664>
    1574:	60 c0       	rjmp	.+192    	; 0x1636 <TIMER_voidTimerInit+0x6fa>
    1576:	2b 89       	ldd	r18, Y+19	; 0x13
    1578:	3c 89       	ldd	r19, Y+20	; 0x14
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	20 30       	cpi	r18, 0x00	; 0
    157e:	38 07       	cpc	r19, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <TIMER_voidTimerInit+0x648>
    1582:	44 c0       	rjmp	.+136    	; 0x160c <TIMER_voidTimerInit+0x6d0>
    1584:	2b 89       	ldd	r18, Y+19	; 0x13
    1586:	3c 89       	ldd	r19, Y+20	; 0x14
    1588:	80 ec       	ldi	r24, 0xC0	; 192
    158a:	20 30       	cpi	r18, 0x00	; 0
    158c:	38 07       	cpc	r19, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <TIMER_voidTimerInit+0x656>
    1590:	48 c0       	rjmp	.+144    	; 0x1622 <TIMER_voidTimerInit+0x6e6>
    1592:	2b 89       	ldd	r18, Y+19	; 0x13
    1594:	3c 89       	ldd	r19, Y+20	; 0x14
    1596:	80 e4       	ldi	r24, 0x40	; 64
    1598:	20 30       	cpi	r18, 0x00	; 0
    159a:	38 07       	cpc	r19, r24
    159c:	61 f1       	breq	.+88     	; 0x15f6 <TIMER_voidTimerInit+0x6ba>
    159e:	4b c0       	rjmp	.+150    	; 0x1636 <TIMER_voidTimerInit+0x6fa>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_NORMAL_OPERATION: TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_NORMAL_OPERATION;break;
    15a0:	ee e4       	ldi	r30, 0x4E	; 78
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	ae e4       	ldi	r26, 0x4E	; 78
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	8d 91       	ld	r24, X+
    15aa:	9c 91       	ld	r25, X
    15ac:	11 97       	sbiw	r26, 0x01	; 1
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
    15b2:	41 c0       	rjmp	.+130    	; 0x1636 <TIMER_voidTimerInit+0x6fa>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_TOGGLE_OPERATION: TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_TOGGLE_OPERATION;break;
    15b4:	ae e4       	ldi	r26, 0x4E	; 78
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ee e4       	ldi	r30, 0x4E	; 78
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	90 61       	ori	r25, 0x10	; 16
    15c2:	11 96       	adiw	r26, 0x01	; 1
    15c4:	9c 93       	st	X, r25
    15c6:	8e 93       	st	-X, r24
    15c8:	36 c0       	rjmp	.+108    	; 0x1636 <TIMER_voidTimerInit+0x6fa>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_CLEAR_OPERATION : TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_CLEAR_OPERATION ;break;
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	91 81       	ldd	r25, Z+1	; 0x01
    15d6:	90 62       	ori	r25, 0x20	; 32
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	9c 93       	st	X, r25
    15dc:	8e 93       	st	-X, r24
    15de:	2b c0       	rjmp	.+86     	; 0x1636 <TIMER_voidTimerInit+0x6fa>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_SET_OPERATION   : TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_SET_OPERATION   ;break;
    15e0:	ae e4       	ldi	r26, 0x4E	; 78
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	90 63       	ori	r25, 0x30	; 48
    15ee:	11 96       	adiw	r26, 0x01	; 1
    15f0:	9c 93       	st	X, r25
    15f2:	8e 93       	st	-X, r24
    15f4:	20 c0       	rjmp	.+64     	; 0x1636 <TIMER_voidTimerInit+0x6fa>

//		case TIMER1_CHANNEL_A_OC1_NO_PWM_NORMAL_OPERATION: TCCR0|=TIMER1_CHANNEL_A_OC1_NO_PWM_NORMAL_OPERATION;break;
		case TIMER1_CHANNEL_A_OC1_NO_PWM_TOGGLE_OPERATION: TCCR1|=TIMER1_CHANNEL_A_OC1_NO_PWM_TOGGLE_OPERATION;break;
    15f6:	ae e4       	ldi	r26, 0x4E	; 78
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ee e4       	ldi	r30, 0x4E	; 78
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	90 64       	ori	r25, 0x40	; 64
    1604:	11 96       	adiw	r26, 0x01	; 1
    1606:	9c 93       	st	X, r25
    1608:	8e 93       	st	-X, r24
    160a:	15 c0       	rjmp	.+42     	; 0x1636 <TIMER_voidTimerInit+0x6fa>
		case TIMER1_CHANNEL_A_OC1_NO_PWM_CLEAR_OPERATION : TCCR1|=TIMER1_CHANNEL_A_OC1_NO_PWM_CLEAR_OPERATION ;break;
    160c:	ae e4       	ldi	r26, 0x4E	; 78
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	ee e4       	ldi	r30, 0x4E	; 78
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	90 68       	ori	r25, 0x80	; 128
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	9c 93       	st	X, r25
    161e:	8e 93       	st	-X, r24
    1620:	0a c0       	rjmp	.+20     	; 0x1636 <TIMER_voidTimerInit+0x6fa>
		case TIMER1_CHANNEL_A_OC1_NO_PWM_SET_OPERATION   : TCCR1|=TIMER1_CHANNEL_A_OC1_NO_PWM_SET_OPERATION   ;break;
    1622:	ae e4       	ldi	r26, 0x4E	; 78
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ee e4       	ldi	r30, 0x4E	; 78
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	90 6c       	ori	r25, 0xC0	; 192
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	9c 93       	st	X, r25
    1634:	8e 93       	st	-X, r24
		}


		switch(Add_structTimerCfg->Timer_u8ClockSelect){
    1636:	e9 81       	ldd	r30, Y+1	; 0x01
    1638:	fa 81       	ldd	r31, Y+2	; 0x02
    163a:	25 81       	ldd	r18, Z+5	; 0x05
    163c:	36 81       	ldd	r19, Z+6	; 0x06
    163e:	3a 8b       	std	Y+18, r19	; 0x12
    1640:	29 8b       	std	Y+17, r18	; 0x11
    1642:	89 89       	ldd	r24, Y+17	; 0x11
    1644:	9a 89       	ldd	r25, Y+18	; 0x12
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	91 05       	cpc	r25, r1
    164a:	a1 f1       	breq	.+104    	; 0x16b4 <TIMER_voidTimerInit+0x778>
    164c:	29 89       	ldd	r18, Y+17	; 0x11
    164e:	3a 89       	ldd	r19, Y+18	; 0x12
    1650:	23 30       	cpi	r18, 0x03	; 3
    1652:	31 05       	cpc	r19, r1
    1654:	50 f4       	brcc	.+20     	; 0x166a <TIMER_voidTimerInit+0x72e>
    1656:	89 89       	ldd	r24, Y+17	; 0x11
    1658:	9a 89       	ldd	r25, Y+18	; 0x12
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	b1 f0       	breq	.+44     	; 0x168a <TIMER_voidTimerInit+0x74e>
    165e:	29 89       	ldd	r18, Y+17	; 0x11
    1660:	3a 89       	ldd	r19, Y+18	; 0x12
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	31 05       	cpc	r19, r1
    1666:	d9 f0       	breq	.+54     	; 0x169e <TIMER_voidTimerInit+0x762>
    1668:	85 c1       	rjmp	.+778    	; 0x1974 <TIMER_voidTimerInit+0xa38>
    166a:	89 89       	ldd	r24, Y+17	; 0x11
    166c:	9a 89       	ldd	r25, Y+18	; 0x12
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	91 05       	cpc	r25, r1
    1672:	b1 f1       	breq	.+108    	; 0x16e0 <TIMER_voidTimerInit+0x7a4>
    1674:	29 89       	ldd	r18, Y+17	; 0x11
    1676:	3a 89       	ldd	r19, Y+18	; 0x12
    1678:	24 30       	cpi	r18, 0x04	; 4
    167a:	31 05       	cpc	r19, r1
    167c:	30 f1       	brcs	.+76     	; 0x16ca <TIMER_voidTimerInit+0x78e>
    167e:	89 89       	ldd	r24, Y+17	; 0x11
    1680:	9a 89       	ldd	r25, Y+18	; 0x12
    1682:	85 30       	cpi	r24, 0x05	; 5
    1684:	91 05       	cpc	r25, r1
    1686:	b9 f1       	breq	.+110    	; 0x16f6 <TIMER_voidTimerInit+0x7ba>
    1688:	75 c1       	rjmp	.+746    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER1_CLOCK_NO_CLOCK_SOURCE : TCCR1|=TIMER1_CLOCK_NO_CLOCK_SOURCE ;break;
    168a:	ee e4       	ldi	r30, 0x4E	; 78
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	ae e4       	ldi	r26, 0x4E	; 78
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	8d 91       	ld	r24, X+
    1694:	9c 91       	ld	r25, X
    1696:	11 97       	sbiw	r26, 0x01	; 1
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
    169c:	6b c1       	rjmp	.+726    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER1_CLOCK_NO_PRESCALLING  : TCCR1|=TIMER1_CLOCK_NO_PRESCALLING  ;break;
    169e:	ae e4       	ldi	r26, 0x4E	; 78
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ee e4       	ldi	r30, 0x4E	; 78
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	9c 93       	st	X, r25
    16b0:	8e 93       	st	-X, r24
    16b2:	60 c1       	rjmp	.+704    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER1_CLOCK_PRESCALLING_8   : TCCR1|=TIMER1_CLOCK_PRESCALLING_8   ;break;
    16b4:	ae e4       	ldi	r26, 0x4E	; 78
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	ee e4       	ldi	r30, 0x4E	; 78
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	82 60       	ori	r24, 0x02	; 2
    16c2:	11 96       	adiw	r26, 0x01	; 1
    16c4:	9c 93       	st	X, r25
    16c6:	8e 93       	st	-X, r24
    16c8:	55 c1       	rjmp	.+682    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER1_CLOCK_PRESCALLING_64  : TCCR1|=TIMER1_CLOCK_PRESCALLING_64  ;break;
    16ca:	ae e4       	ldi	r26, 0x4E	; 78
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ee e4       	ldi	r30, 0x4E	; 78
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	83 60       	ori	r24, 0x03	; 3
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	9c 93       	st	X, r25
    16dc:	8e 93       	st	-X, r24
    16de:	4a c1       	rjmp	.+660    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER1_CLOCK_PRESCALLING_256 : TCCR1|=TIMER1_CLOCK_PRESCALLING_256 ;break;
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	84 60       	ori	r24, 0x04	; 4
    16ee:	11 96       	adiw	r26, 0x01	; 1
    16f0:	9c 93       	st	X, r25
    16f2:	8e 93       	st	-X, r24
    16f4:	3f c1       	rjmp	.+638    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER1_CLOCK_PRESCALLING_1024: TCCR1|=TIMER1_CLOCK_PRESCALLING_1024;break;
    16f6:	ae e4       	ldi	r26, 0x4E	; 78
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	ee e4       	ldi	r30, 0x4E	; 78
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	85 60       	ori	r24, 0x05	; 5
    1704:	11 96       	adiw	r26, 0x01	; 1
    1706:	9c 93       	st	X, r25
    1708:	8e 93       	st	-X, r24
    170a:	34 c1       	rjmp	.+616    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		}
	break;
	case TIMER_NO_TIMER2:

		switch(Add_structTimerCfg->Timer_u8TimerForceOutputCompare){
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	21 81       	ldd	r18, Z+1	; 0x01
    1712:	32 81       	ldd	r19, Z+2	; 0x02
    1714:	38 8b       	std	Y+16, r19	; 0x10
    1716:	2f 87       	std	Y+15, r18	; 0x0f
    1718:	8f 85       	ldd	r24, Y+15	; 0x0f
    171a:	98 89       	ldd	r25, Y+16	; 0x10
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	69 f0       	breq	.+26     	; 0x173a <TIMER_voidTimerInit+0x7fe>
    1720:	2f 85       	ldd	r18, Y+15	; 0x0f
    1722:	38 89       	ldd	r19, Y+16	; 0x10
    1724:	20 38       	cpi	r18, 0x80	; 128
    1726:	31 05       	cpc	r19, r1
    1728:	71 f4       	brne	.+28     	; 0x1746 <TIMER_voidTimerInit+0x80a>
		case TIMER2_FOC_ON:TCCR2|=TIMER2_FOC_ON;break;
    172a:	a5 e4       	ldi	r26, 0x45	; 69
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e4       	ldi	r30, 0x45	; 69
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	80 68       	ori	r24, 0x80	; 128
    1736:	8c 93       	st	X, r24
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <TIMER_voidTimerInit+0x80a>
		case TIMER2_FOC_OFF:TCCR2|=TIMER2_FOC_OFF;break;
    173a:	e5 e4       	ldi	r30, 0x45	; 69
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	a5 e4       	ldi	r26, 0x45	; 69
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	8c 91       	ld	r24, X
    1744:	80 83       	st	Z, r24
		}

		switch(Add_structTimerCfg->Timer_u8WaveFormGenerationMode){
    1746:	e9 81       	ldd	r30, Y+1	; 0x01
    1748:	fa 81       	ldd	r31, Y+2	; 0x02
    174a:	83 81       	ldd	r24, Z+3	; 0x03
    174c:	94 81       	ldd	r25, Z+4	; 0x04
    174e:	9e 87       	std	Y+14, r25	; 0x0e
    1750:	8d 87       	std	Y+13, r24	; 0x0d
    1752:	2d 85       	ldd	r18, Y+13	; 0x0d
    1754:	3e 85       	ldd	r19, Y+14	; 0x0e
    1756:	28 34       	cpi	r18, 0x48	; 72
    1758:	31 05       	cpc	r19, r1
    175a:	a9 f1       	breq	.+106    	; 0x17c6 <TIMER_voidTimerInit+0x88a>
    175c:	8d 85       	ldd	r24, Y+13	; 0x0d
    175e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1760:	89 34       	cpi	r24, 0x49	; 73
    1762:	91 05       	cpc	r25, r1
    1764:	08 f0       	brcs	.+2      	; 0x1768 <TIMER_voidTimerInit+0x82c>
    1766:	4a c0       	rjmp	.+148    	; 0x17fc <TIMER_voidTimerInit+0x8c0>
    1768:	2d 85       	ldd	r18, Y+13	; 0x0d
    176a:	3e 85       	ldd	r19, Y+14	; 0x0e
    176c:	20 34       	cpi	r18, 0x40	; 64
    176e:	31 05       	cpc	r19, r1
    1770:	e1 f0       	breq	.+56     	; 0x17aa <TIMER_voidTimerInit+0x86e>
    1772:	8d 85       	ldd	r24, Y+13	; 0x0d
    1774:	9e 85       	ldd	r25, Y+14	; 0x0e
    1776:	81 34       	cpi	r24, 0x41	; 65
    1778:	91 05       	cpc	r25, r1
    177a:	08 f0       	brcs	.+2      	; 0x177e <TIMER_voidTimerInit+0x842>
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <TIMER_voidTimerInit+0x8c0>
    177e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1780:	3e 85       	ldd	r19, Y+14	; 0x0e
    1782:	21 15       	cp	r18, r1
    1784:	31 05       	cpc	r19, r1
    1786:	31 f0       	breq	.+12     	; 0x1794 <TIMER_voidTimerInit+0x858>
    1788:	8d 85       	ldd	r24, Y+13	; 0x0d
    178a:	9e 85       	ldd	r25, Y+14	; 0x0e
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	91 05       	cpc	r25, r1
    1790:	41 f1       	breq	.+80     	; 0x17e2 <TIMER_voidTimerInit+0x8a6>
    1792:	34 c0       	rjmp	.+104    	; 0x17fc <TIMER_voidTimerInit+0x8c0>
		case TIMER2_MODE_NORMAL:			TCCR2|=TIMER2_MODE_NORMAL;Global_u8WaveFormGenerationMode=TIMER2_MODE_NORMAL;break;
    1794:	e5 e4       	ldi	r30, 0x45	; 69
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	a5 e4       	ldi	r26, 0x45	; 69
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	8c 91       	ld	r24, X
    179e:	80 83       	st	Z, r24
    17a0:	10 92 2e 01 	sts	0x012E, r1
    17a4:	10 92 2d 01 	sts	0x012D, r1
    17a8:	29 c0       	rjmp	.+82     	; 0x17fc <TIMER_voidTimerInit+0x8c0>
		case TIMER2_MODE_CTC:				TCCR2|=TIMER2_MODE_CTC;Global_u8WaveFormGenerationMode=TIMER2_MODE_CTC;break;
    17aa:	a5 e4       	ldi	r26, 0x45	; 69
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e4       	ldi	r30, 0x45	; 69
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	80 64       	ori	r24, 0x40	; 64
    17b6:	8c 93       	st	X, r24
    17b8:	80 e4       	ldi	r24, 0x40	; 64
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	90 93 2e 01 	sts	0x012E, r25
    17c0:	80 93 2d 01 	sts	0x012D, r24
    17c4:	1b c0       	rjmp	.+54     	; 0x17fc <TIMER_voidTimerInit+0x8c0>
		case TIMER2_MODE_PWM_FAST:			TCCR2|=TIMER2_MODE_PWM_FAST;Global_u8WaveFormGenerationMode=TIMER2_MODE_PWM_FAST;break;
    17c6:	a5 e4       	ldi	r26, 0x45	; 69
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e4       	ldi	r30, 0x45	; 69
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 64       	ori	r24, 0x48	; 72
    17d2:	8c 93       	st	X, r24
    17d4:	88 e4       	ldi	r24, 0x48	; 72
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	90 93 2e 01 	sts	0x012E, r25
    17dc:	80 93 2d 01 	sts	0x012D, r24
    17e0:	0d c0       	rjmp	.+26     	; 0x17fc <TIMER_voidTimerInit+0x8c0>
		case TIMER2_MODE_PWM_PHASE_CORRECT: TCCR2|=TIMER2_MODE_PWM_PHASE_CORRECT;Global_u8WaveFormGenerationMode=TIMER2_MODE_PWM_PHASE_CORRECT;break;
    17e2:	a5 e4       	ldi	r26, 0x45	; 69
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e4       	ldi	r30, 0x45	; 69
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	88 60       	ori	r24, 0x08	; 8
    17ee:	8c 93       	st	X, r24
    17f0:	88 e0       	ldi	r24, 0x08	; 8
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	90 93 2e 01 	sts	0x012E, r25
    17f8:	80 93 2d 01 	sts	0x012D, r24
		}

		switch(Add_structTimerCfg->Timer_u8OcBehaviour){
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	27 81       	ldd	r18, Z+7	; 0x07
    1802:	30 85       	ldd	r19, Z+8	; 0x08
    1804:	3c 87       	std	Y+12, r19	; 0x0c
    1806:	2b 87       	std	Y+11, r18	; 0x0b
    1808:	8b 85       	ldd	r24, Y+11	; 0x0b
    180a:	9c 85       	ldd	r25, Y+12	; 0x0c
    180c:	80 31       	cpi	r24, 0x10	; 16
    180e:	91 05       	cpc	r25, r1
    1810:	e1 f0       	breq	.+56     	; 0x184a <TIMER_voidTimerInit+0x90e>
    1812:	2b 85       	ldd	r18, Y+11	; 0x0b
    1814:	3c 85       	ldd	r19, Y+12	; 0x0c
    1816:	21 31       	cpi	r18, 0x11	; 17
    1818:	31 05       	cpc	r19, r1
    181a:	28 f4       	brcc	.+10     	; 0x1826 <TIMER_voidTimerInit+0x8ea>
    181c:	8b 85       	ldd	r24, Y+11	; 0x0b
    181e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	61 f0       	breq	.+24     	; 0x183c <TIMER_voidTimerInit+0x900>
    1824:	29 c0       	rjmp	.+82     	; 0x1878 <TIMER_voidTimerInit+0x93c>
    1826:	2b 85       	ldd	r18, Y+11	; 0x0b
    1828:	3c 85       	ldd	r19, Y+12	; 0x0c
    182a:	20 32       	cpi	r18, 0x20	; 32
    182c:	31 05       	cpc	r19, r1
    182e:	a9 f0       	breq	.+42     	; 0x185a <TIMER_voidTimerInit+0x91e>
    1830:	8b 85       	ldd	r24, Y+11	; 0x0b
    1832:	9c 85       	ldd	r25, Y+12	; 0x0c
    1834:	80 33       	cpi	r24, 0x30	; 48
    1836:	91 05       	cpc	r25, r1
    1838:	c1 f0       	breq	.+48     	; 0x186a <TIMER_voidTimerInit+0x92e>
    183a:	1e c0       	rjmp	.+60     	; 0x1878 <TIMER_voidTimerInit+0x93c>
		case TIMER2_OC2_NO_PWM_NORMAL_OPERATION:TCCR2|=TIMER2_OC2_NO_PWM_NORMAL_OPERATION;break;
    183c:	e5 e4       	ldi	r30, 0x45	; 69
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	a5 e4       	ldi	r26, 0x45	; 69
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	8c 91       	ld	r24, X
    1846:	80 83       	st	Z, r24
    1848:	17 c0       	rjmp	.+46     	; 0x1878 <TIMER_voidTimerInit+0x93c>
		case TIMER2_OC2_NO_PWM_TOGGLE_OPERATION:TCCR2|=TIMER2_OC2_NO_PWM_TOGGLE_OPERATION;break;
    184a:	a5 e4       	ldi	r26, 0x45	; 69
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e5 e4       	ldi	r30, 0x45	; 69
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 61       	ori	r24, 0x10	; 16
    1856:	8c 93       	st	X, r24
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <TIMER_voidTimerInit+0x93c>
		case TIMER2_OC2_NO_PWM_CLEAR_OPERATION: TCCR2|=TIMER2_OC2_NO_PWM_CLEAR_OPERATION;break;
    185a:	a5 e4       	ldi	r26, 0x45	; 69
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e5 e4       	ldi	r30, 0x45	; 69
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 62       	ori	r24, 0x20	; 32
    1866:	8c 93       	st	X, r24
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <TIMER_voidTimerInit+0x93c>
		case TIMER2_OC2_NO_PWM_SET_OPERATION:   TCCR2|=TIMER2_OC2_NO_PWM_SET_OPERATION;break;
    186a:	a5 e4       	ldi	r26, 0x45	; 69
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e4       	ldi	r30, 0x45	; 69
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 63       	ori	r24, 0x30	; 48
    1876:	8c 93       	st	X, r24
		}

		switch(Add_structTimerCfg->Timer2_ExtClock){
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	85 85       	ldd	r24, Z+13	; 0x0d
    187e:	96 85       	ldd	r25, Z+14	; 0x0e
    1880:	88 30       	cpi	r24, 0x08	; 8
    1882:	91 05       	cpc	r25, r1
    1884:	39 f4       	brne	.+14     	; 0x1894 <TIMER_voidTimerInit+0x958>
		case TIMER2_CLOCK_EXTERNAL : ASSR |= TIMER2_CLOCK_EXTERNAL ; break;
    1886:	a2 e4       	ldi	r26, 0x42	; 66
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e2 e4       	ldi	r30, 0x42	; 66
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	88 60       	ori	r24, 0x08	; 8
    1892:	8c 93       	st	X, r24
		}
		switch(Add_structTimerCfg->Timer_u8ClockSelect){
    1894:	e9 81       	ldd	r30, Y+1	; 0x01
    1896:	fa 81       	ldd	r31, Y+2	; 0x02
    1898:	25 81       	ldd	r18, Z+5	; 0x05
    189a:	36 81       	ldd	r19, Z+6	; 0x06
    189c:	3a 87       	std	Y+10, r19	; 0x0a
    189e:	29 87       	std	Y+9, r18	; 0x09
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	82 30       	cpi	r24, 0x02	; 2
    18a6:	91 05       	cpc	r25, r1
    18a8:	71 f1       	breq	.+92     	; 0x1906 <TIMER_voidTimerInit+0x9ca>
    18aa:	29 85       	ldd	r18, Y+9	; 0x09
    18ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ae:	23 30       	cpi	r18, 0x03	; 3
    18b0:	31 05       	cpc	r19, r1
    18b2:	50 f4       	brcc	.+20     	; 0x18c8 <TIMER_voidTimerInit+0x98c>
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	b1 f0       	breq	.+44     	; 0x18e8 <TIMER_voidTimerInit+0x9ac>
    18bc:	29 85       	ldd	r18, Y+9	; 0x09
    18be:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c0:	21 30       	cpi	r18, 0x01	; 1
    18c2:	31 05       	cpc	r19, r1
    18c4:	c1 f0       	breq	.+48     	; 0x18f6 <TIMER_voidTimerInit+0x9ba>
    18c6:	56 c0       	rjmp	.+172    	; 0x1974 <TIMER_voidTimerInit+0xa38>
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	91 05       	cpc	r25, r1
    18d0:	b1 f1       	breq	.+108    	; 0x193e <TIMER_voidTimerInit+0xa02>
    18d2:	29 85       	ldd	r18, Y+9	; 0x09
    18d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18d6:	24 30       	cpi	r18, 0x04	; 4
    18d8:	31 05       	cpc	r19, r1
    18da:	18 f1       	brcs	.+70     	; 0x1922 <TIMER_voidTimerInit+0x9e6>
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	85 30       	cpi	r24, 0x05	; 5
    18e2:	91 05       	cpc	r25, r1
    18e4:	d1 f1       	breq	.+116    	; 0x195a <TIMER_voidTimerInit+0xa1e>
    18e6:	46 c0       	rjmp	.+140    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		// External ClocK

		// Internal Clock
		case TIMER2_CLOCK_NO_CLOCK_SOURCE : TCCR2|=TIMER2_CLOCK_NO_CLOCK_SOURCE ; break;
    18e8:	e5 e4       	ldi	r30, 0x45	; 69
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	a5 e4       	ldi	r26, 0x45	; 69
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	8c 91       	ld	r24, X
    18f2:	80 83       	st	Z, r24
    18f4:	3f c0       	rjmp	.+126    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER2_CLOCK_NO_PRESCALLING  : TCCR2|=TIMER2_CLOCK_NO_PRESCALLING  ; break;
    18f6:	a5 e4       	ldi	r26, 0x45	; 69
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e5 e4       	ldi	r30, 0x45	; 69
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	81 60       	ori	r24, 0x01	; 1
    1902:	8c 93       	st	X, r24
    1904:	37 c0       	rjmp	.+110    	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER2_CLOCK_PRESCALLING_8   : TCCR2|=TIMER2_CLOCK_PRESCALLING_8;Global_u16TimerClockPrescalerValue=8; break;
    1906:	a5 e4       	ldi	r26, 0x45	; 69
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e5 e4       	ldi	r30, 0x45	; 69
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	82 60       	ori	r24, 0x02	; 2
    1912:	8c 93       	st	X, r24
    1914:	88 e0       	ldi	r24, 0x08	; 8
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	90 93 21 01 	sts	0x0121, r25
    191c:	80 93 20 01 	sts	0x0120, r24
    1920:	29 c0       	rjmp	.+82     	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER2_CLOCK_PRESCALLING_64  : TCCR2|=TIMER2_CLOCK_PRESCALLING_64;Global_u16TimerClockPrescalerValue=64; break;
    1922:	a5 e4       	ldi	r26, 0x45	; 69
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e4       	ldi	r30, 0x45	; 69
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	83 60       	ori	r24, 0x03	; 3
    192e:	8c 93       	st	X, r24
    1930:	80 e4       	ldi	r24, 0x40	; 64
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	90 93 21 01 	sts	0x0121, r25
    1938:	80 93 20 01 	sts	0x0120, r24
    193c:	1b c0       	rjmp	.+54     	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER2_CLOCK_PRESCALLING_256 : TCCR2|=TIMER2_CLOCK_PRESCALLING_256;Global_u16TimerClockPrescalerValue=128;break;
    193e:	a5 e4       	ldi	r26, 0x45	; 69
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e4       	ldi	r30, 0x45	; 69
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	84 60       	ori	r24, 0x04	; 4
    194a:	8c 93       	st	X, r24
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	90 93 21 01 	sts	0x0121, r25
    1954:	80 93 20 01 	sts	0x0120, r24
    1958:	0d c0       	rjmp	.+26     	; 0x1974 <TIMER_voidTimerInit+0xa38>
		case TIMER2_CLOCK_PRESCALLING_1024: TCCR2|=TIMER2_CLOCK_PRESCALLING_1024;Global_u16TimerClockPrescalerValue=1024;break;
    195a:	a5 e4       	ldi	r26, 0x45	; 69
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e4       	ldi	r30, 0x45	; 69
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	85 60       	ori	r24, 0x05	; 5
    1966:	8c 93       	st	X, r24
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	94 e0       	ldi	r25, 0x04	; 4
    196c:	90 93 21 01 	sts	0x0121, r25
    1970:	80 93 20 01 	sts	0x0120, r24
		}
	}
		switch(Add_structTimerCfg->Timer_Interrupt){
    1974:	e9 81       	ldd	r30, Y+1	; 0x01
    1976:	fa 81       	ldd	r31, Y+2	; 0x02
    1978:	83 85       	ldd	r24, Z+11	; 0x0b
    197a:	94 85       	ldd	r25, Z+12	; 0x0c
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	09 f0       	breq	.+2      	; 0x1984 <TIMER_voidTimerInit+0xa48>
    1982:	52 c0       	rjmp	.+164    	; 0x1a28 <TIMER_voidTimerInit+0xaec>

		case TIMER_INTERRUPT_ON:
		switch(Add_structTimerCfg->Timer_u8TimerNo){
    1984:	e9 81       	ldd	r30, Y+1	; 0x01
    1986:	fa 81       	ldd	r31, Y+2	; 0x02
    1988:	80 81       	ld	r24, Z
    198a:	83 70       	andi	r24, 0x03	; 3
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	38 87       	std	Y+8, r19	; 0x08
    1992:	2f 83       	std	Y+7, r18	; 0x07
    1994:	8f 81       	ldd	r24, Y+7	; 0x07
    1996:	98 85       	ldd	r25, Y+8	; 0x08
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	31 f0       	breq	.+12     	; 0x19a8 <TIMER_voidTimerInit+0xa6c>
    199c:	2f 81       	ldd	r18, Y+7	; 0x07
    199e:	38 85       	ldd	r19, Y+8	; 0x08
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	11 f1       	breq	.+68     	; 0x19ea <TIMER_voidTimerInit+0xaae>
    19a6:	40 c0       	rjmp	.+128    	; 0x1a28 <TIMER_voidTimerInit+0xaec>
		case TIMER_NO_TIMER0:
		switch(Add_structTimerCfg->Timer_u8WaveFormGenerationMode){
    19a8:	e9 81       	ldd	r30, Y+1	; 0x01
    19aa:	fa 81       	ldd	r31, Y+2	; 0x02
    19ac:	83 81       	ldd	r24, Z+3	; 0x03
    19ae:	94 81       	ldd	r25, Z+4	; 0x04
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	2d 81       	ldd	r18, Y+5	; 0x05
    19b6:	3e 81       	ldd	r19, Y+6	; 0x06
    19b8:	21 15       	cp	r18, r1
    19ba:	31 05       	cpc	r19, r1
    19bc:	31 f0       	breq	.+12     	; 0x19ca <TIMER_voidTimerInit+0xa8e>
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	80 34       	cpi	r24, 0x40	; 64
    19c4:	91 05       	cpc	r25, r1
    19c6:	49 f0       	breq	.+18     	; 0x19da <TIMER_voidTimerInit+0xa9e>
    19c8:	2f c0       	rjmp	.+94     	; 0x1a28 <TIMER_voidTimerInit+0xaec>
			case TIMER0_MODE_NORMAL : TIMSK|=TIMER0_OVER_FLOW_PIE_INTERRUPT_ON; break;
    19ca:	a9 e5       	ldi	r26, 0x59	; 89
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e9 e5       	ldi	r30, 0x59	; 89
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	81 60       	ori	r24, 0x01	; 1
    19d6:	8c 93       	st	X, r24
    19d8:	27 c0       	rjmp	.+78     	; 0x1a28 <TIMER_voidTimerInit+0xaec>
			case TIMER0_MODE_CTC    : TIMSK|=TIMER0_COMAPARE_MATCH_PIE_INTERRUPT_ON; break;
    19da:	a9 e5       	ldi	r26, 0x59	; 89
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e9 e5       	ldi	r30, 0x59	; 89
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	82 60       	ori	r24, 0x02	; 2
    19e6:	8c 93       	st	X, r24
    19e8:	1f c0       	rjmp	.+62     	; 0x1a28 <TIMER_voidTimerInit+0xaec>
//			case TIMER1_MODE_NORMAL : TIMSK|=TIMER1_OVER_FLOW_PIE_INTERRUPT_ON; break;
//			case TIMER1_MODE_CTC    : TIMSK|=TIMER1_COMAPARE_MATCH_PIE_INTERRUPT_ON; break;
//		}
		break;
		case TIMER_NO_TIMER2:
		switch(Add_structTimerCfg->Timer_u8WaveFormGenerationMode){
    19ea:	e9 81       	ldd	r30, Y+1	; 0x01
    19ec:	fa 81       	ldd	r31, Y+2	; 0x02
    19ee:	23 81       	ldd	r18, Z+3	; 0x03
    19f0:	34 81       	ldd	r19, Z+4	; 0x04
    19f2:	3c 83       	std	Y+4, r19	; 0x04
    19f4:	2b 83       	std	Y+3, r18	; 0x03
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <TIMER_voidTimerInit+0xace>
    19fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1a00:	3c 81       	ldd	r19, Y+4	; 0x04
    1a02:	20 34       	cpi	r18, 0x40	; 64
    1a04:	31 05       	cpc	r19, r1
    1a06:	49 f0       	breq	.+18     	; 0x1a1a <TIMER_voidTimerInit+0xade>
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <TIMER_voidTimerInit+0xaec>
			case TIMER2_MODE_NORMAL : TIMSK|=TIMER2_OVER_FLOW_PIE_INTERRUPT_ON; break;
    1a0a:	a9 e5       	ldi	r26, 0x59	; 89
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e9 e5       	ldi	r30, 0x59	; 89
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	81 60       	ori	r24, 0x01	; 1
    1a16:	8c 93       	st	X, r24
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <TIMER_voidTimerInit+0xaec>
			case TIMER2_MODE_CTC    : TIMSK|=TIMER2_COMAPARE_MATCH_PIE_INTERRUPT_ON; break;
    1a1a:	a9 e5       	ldi	r26, 0x59	; 89
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e9 e5       	ldi	r30, 0x59	; 89
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	82 60       	ori	r24, 0x02	; 2
    1a26:	8c 93       	st	X, r24
		break;

		}
		break;
}
}
    1a28:	a6 96       	adiw	r28, 0x26	; 38
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <TIMER_voidPwmOn>:
//			}
//		}
//		 break;
//	}
//}
void TIMER_voidPwmOn(Timer_structTimerCfg*Add_structTimerCfg,u16 Copy_u8DuttyValue){
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	28 97       	sbiw	r28, 0x08	; 8
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	7c 83       	std	Y+4, r23	; 0x04
    1a54:	6b 83       	std	Y+3, r22	; 0x03
switch(Add_structTimerCfg->Timer_u8TimerNo){
    1a56:	e9 81       	ldd	r30, Y+1	; 0x01
    1a58:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5a:	80 81       	ld	r24, Z
    1a5c:	83 70       	andi	r24, 0x03	; 3
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	38 87       	std	Y+8, r19	; 0x08
    1a64:	2f 83       	std	Y+7, r18	; 0x07
    1a66:	8f 81       	ldd	r24, Y+7	; 0x07
    1a68:	98 85       	ldd	r25, Y+8	; 0x08
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	31 f0       	breq	.+12     	; 0x1a7a <TIMER_voidPwmOn+0x40>
    1a6e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a70:	38 85       	ldd	r19, Y+8	; 0x08
    1a72:	21 30       	cpi	r18, 0x01	; 1
    1a74:	31 05       	cpc	r19, r1
    1a76:	31 f0       	breq	.+12     	; 0x1a84 <TIMER_voidPwmOn+0x4a>
    1a78:	46 c0       	rjmp	.+140    	; 0x1b06 <TIMER_voidPwmOn+0xcc>
case TIMER_NO_TIMER0: OCR0 = Copy_u8DuttyValue;break;
    1a7a:	ec e5       	ldi	r30, 0x5C	; 92
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	80 83       	st	Z, r24
    1a82:	41 c0       	rjmp	.+130    	; 0x1b06 <TIMER_voidPwmOn+0xcc>
//	switch(Add_structTimerCfg->Timer_u8OcBehaviour){
//	case TIMER0_OC0_PWM_SET_OPERATION:OCR0 = (TIMER0_TOP_VALUE-Copy_u8DuttyValue)*TIMER0_TOP_VALUE/100.0;break;
//	case TIMER0_OC0_PWM_CLEAR_OPERATION:OCR0 = Copy_u8DuttyValue*TIMER0_TOP_VALUE/100.0;break;
//break;
case TIMER_NO_TIMER1:
	switch(Add_structTimerCfg->Timer_u8OcBehaviour){
    1a84:	e9 81       	ldd	r30, Y+1	; 0x01
    1a86:	fa 81       	ldd	r31, Y+2	; 0x02
    1a88:	87 81       	ldd	r24, Z+7	; 0x07
    1a8a:	90 85       	ldd	r25, Z+8	; 0x08
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	2d 81       	ldd	r18, Y+5	; 0x05
    1a92:	3e 81       	ldd	r19, Y+6	; 0x06
    1a94:	80 e3       	ldi	r24, 0x30	; 48
    1a96:	20 30       	cpi	r18, 0x00	; 0
    1a98:	38 07       	cpc	r19, r24
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <TIMER_voidPwmOn+0x96>
    1a9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa0:	80 e3       	ldi	r24, 0x30	; 48
    1aa2:	21 30       	cpi	r18, 0x01	; 1
    1aa4:	38 07       	cpc	r19, r24
    1aa6:	38 f4       	brcc	.+14     	; 0x1ab6 <TIMER_voidPwmOn+0x7c>
    1aa8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aaa:	3e 81       	ldd	r19, Y+6	; 0x06
    1aac:	80 e2       	ldi	r24, 0x20	; 32
    1aae:	20 30       	cpi	r18, 0x00	; 0
    1ab0:	38 07       	cpc	r19, r24
    1ab2:	a9 f0       	breq	.+42     	; 0x1ade <TIMER_voidPwmOn+0xa4>
    1ab4:	28 c0       	rjmp	.+80     	; 0x1b06 <TIMER_voidPwmOn+0xcc>
    1ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aba:	80 e8       	ldi	r24, 0x80	; 128
    1abc:	20 30       	cpi	r18, 0x00	; 0
    1abe:	38 07       	cpc	r19, r24
    1ac0:	e1 f0       	breq	.+56     	; 0x1afa <TIMER_voidPwmOn+0xc0>
    1ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac6:	80 ec       	ldi	r24, 0xC0	; 192
    1ac8:	20 30       	cpi	r18, 0x00	; 0
    1aca:	38 07       	cpc	r19, r24
    1acc:	79 f0       	breq	.+30     	; 0x1aec <TIMER_voidPwmOn+0xb2>
    1ace:	1b c0       	rjmp	.+54     	; 0x1b06 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_B_OC1_PWM_SET_OPERATION:OCR1B=Copy_u8DuttyValue;break;
    1ad0:	e8 e4       	ldi	r30, 0x48	; 72
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_B_OC1_PWM_CLEAR_OPERATION:OCR1B=Copy_u8DuttyValue;break;
    1ade:	e8 e4       	ldi	r30, 0x48	; 72
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
    1aea:	0d c0       	rjmp	.+26     	; 0x1b06 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_A_OC1_PWM_SET_OPERATION:OCR1A=Copy_u8DuttyValue;break;
    1aec:	ea e4       	ldi	r30, 0x4A	; 74
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_A_OC1_PWM_CLEAR_OPERATION:OCR1A=Copy_u8DuttyValue;break;
    1afa:	ea e4       	ldi	r30, 0x4A	; 74
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
//	case TIMER1_CHANNEL_A_OC1_PWM_SET_OPERATION:OCR1A=(TIMER1_TOP_VALUE-Copy_u8DuttyValue)*TIMER1_TOP_VALUE/100.0;break;
//	case TIMER1_CHANNEL_A_OC1_PWM_CLEAR_OPERATION:OCR1A=Copy_u8DuttyValue*TIMER1_TOP_VALUE/100.0;break;
	}
break;
}
}
    1b06:	28 96       	adiw	r28, 0x08	; 8
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <TIMER_voidTimer1SetTopValue>:
void TIMER_voidTimer1SetTopValue(Timer_structTimerCfg*Add_structTimerCfg,u16 Copy_u8Timer1TopValue){
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <TIMER_voidTimer1SetTopValue+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <TIMER_voidTimer1SetTopValue+0x8>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	7c 83       	std	Y+4, r23	; 0x04
    1b2a:	6b 83       	std	Y+3, r22	; 0x03
	if (Add_structTimerCfg->Timer_u8TimerNo == TIMER_NO_TIMER1)
    1b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b30:	80 81       	ld	r24, Z
    1b32:	83 70       	andi	r24, 0x03	; 3
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	31 f4       	brne	.+12     	; 0x1b44 <TIMER_voidTimer1SetTopValue+0x2c>
		ICR1=Copy_u8Timer1TopValue;
    1b38:	e6 e4       	ldi	r30, 0x46	; 70
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <TIMER_voidCTCcfg>:

void TIMER_voidCTCcfg (Timer_structTimerCfg*Add_structTimerCfg,u16 Copy_u16OcrVal){
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	28 97       	sbiw	r28, 0x08	; 8
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	7c 83       	std	Y+4, r23	; 0x04
    1b6c:	6b 83       	std	Y+3, r22	; 0x03
	switch(Add_structTimerCfg->Timer_u8TimerNo){
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	80 81       	ld	r24, Z
    1b74:	83 70       	andi	r24, 0x03	; 3
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	38 87       	std	Y+8, r19	; 0x08
    1b7c:	2f 83       	std	Y+7, r18	; 0x07
    1b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b80:	98 85       	ldd	r25, Y+8	; 0x08
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	71 f0       	breq	.+28     	; 0x1ba4 <TIMER_voidCTCcfg+0x52>
    1b88:	2f 81       	ldd	r18, Y+7	; 0x07
    1b8a:	38 85       	ldd	r19, Y+8	; 0x08
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	39 f1       	breq	.+78     	; 0x1be0 <TIMER_voidCTCcfg+0x8e>
    1b92:	8f 81       	ldd	r24, Y+7	; 0x07
    1b94:	98 85       	ldd	r25, Y+8	; 0x08
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	39 f5       	brne	.+78     	; 0x1be8 <TIMER_voidCTCcfg+0x96>
	case TIMER_NO_TIMER0 : OCR0 = Copy_u16OcrVal;break;
    1b9a:	ec e5       	ldi	r30, 0x5C	; 92
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	80 83       	st	Z, r24
    1ba2:	22 c0       	rjmp	.+68     	; 0x1be8 <TIMER_voidCTCcfg+0x96>
	case TIMER_NO_TIMER1 : switch (Add_structTimerCfg->Timer1_u8Channel){
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	21 85       	ldd	r18, Z+9	; 0x09
    1baa:	32 85       	ldd	r19, Z+10	; 0x0a
    1bac:	3e 83       	std	Y+6, r19	; 0x06
    1bae:	2d 83       	std	Y+5, r18	; 0x05
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <TIMER_voidCTCcfg+0x72>
    1bb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bba:	3e 81       	ldd	r19, Y+6	; 0x06
    1bbc:	21 30       	cpi	r18, 0x01	; 1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	41 f0       	breq	.+16     	; 0x1bd2 <TIMER_voidCTCcfg+0x80>
    1bc2:	12 c0       	rjmp	.+36     	; 0x1be8 <TIMER_voidCTCcfg+0x96>
							case TIMER1_CHANNEL_A:
							OCR1A = Copy_u16OcrVal;break;
    1bc4:	ea e4       	ldi	r30, 0x4A	; 74
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	0b c0       	rjmp	.+22     	; 0x1be8 <TIMER_voidCTCcfg+0x96>
							case TIMER1_CHANNEL_B:
							OCR1B = Copy_u16OcrVal;break;
    1bd2:	e8 e4       	ldi	r30, 0x48	; 72
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <TIMER_voidCTCcfg+0x96>
							}break;
	case TIMER_NO_TIMER2 : OCR2 = Copy_u16OcrVal;break;
    1be0:	e3 e4       	ldi	r30, 0x43	; 67
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	80 83       	st	Z, r24
	}
}
    1be8:	28 96       	adiw	r28, 0x08	; 8
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <TIMER_voidTimerOff>:

void TIMER_voidTimerOff(Timer_structTimerCfg*Add_structTimerCfg){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <TIMER_voidTimerOff+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <TIMER_voidTimerOff+0x8>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	switch(Add_structTimerCfg->Timer_u8TimerNo){
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	80 81       	ld	r24, Z
    1c10:	83 70       	andi	r24, 0x03	; 3
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	3c 83       	std	Y+4, r19	; 0x04
    1c18:	2b 83       	std	Y+3, r18	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	91 05       	cpc	r25, r1
    1c22:	89 f0       	breq	.+34     	; 0x1c46 <TIMER_voidTimerOff+0x4c>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	b9 f0       	breq	.+46     	; 0x1c5c <TIMER_voidTimerOff+0x62>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	d1 f4       	brne	.+52     	; 0x1c6a <TIMER_voidTimerOff+0x70>
	case TIMER_NO_TIMER0 : TCCR0&=0b11111000;break;
    1c36:	a3 e5       	ldi	r26, 0x53	; 83
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e3 e5       	ldi	r30, 0x53	; 83
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 7f       	andi	r24, 0xF8	; 248
    1c42:	8c 93       	st	X, r24
    1c44:	12 c0       	rjmp	.+36     	; 0x1c6a <TIMER_voidTimerOff+0x70>
	case TIMER_NO_TIMER1 : TCCR1&=0b1111111111111000;break;
    1c46:	ae e4       	ldi	r26, 0x4E	; 78
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	ee e4       	ldi	r30, 0x4E	; 78
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	88 7f       	andi	r24, 0xF8	; 248
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <TIMER_voidTimerOff+0x70>
	case TIMER_NO_TIMER2 : TCCR2&=0b11111000;break;
    1c5c:	a5 e4       	ldi	r26, 0x45	; 69
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e5 e4       	ldi	r30, 0x45	; 69
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	88 7f       	andi	r24, 0xF8	; 248
    1c68:	8c 93       	st	X, r24
	}
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <TIMER_voidTimerOn>:

void TIMER_voidTimerOn(Timer_structTimerCfg*Add_structTimerCfg){
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	2a 97       	sbiw	r28, 0x0a	; 10
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	switch(Add_structTimerCfg->Timer_u8TimerNo){
    1c90:	e9 81       	ldd	r30, Y+1	; 0x01
    1c92:	fa 81       	ldd	r31, Y+2	; 0x02
    1c94:	80 81       	ld	r24, Z
    1c96:	83 70       	andi	r24, 0x03	; 3
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	3a 87       	std	Y+10, r19	; 0x0a
    1c9e:	29 87       	std	Y+9, r18	; 0x09
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <TIMER_voidTimerOn+0x34>
    1caa:	7c c0       	rjmp	.+248    	; 0x1da4 <TIMER_voidTimerOn+0x12c>
    1cac:	29 85       	ldd	r18, Y+9	; 0x09
    1cae:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cb0:	22 30       	cpi	r18, 0x02	; 2
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <TIMER_voidTimerOn+0x40>
    1cb6:	e1 c0       	rjmp	.+450    	; 0x1e7a <TIMER_voidTimerOn+0x202>
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <TIMER_voidTimerOn+0x4a>
    1cc0:	4c c1       	rjmp	.+664    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>

	case TIMER_NO_TIMER0 :
	switch(Add_structTimerCfg->Timer_u8ClockSelect){
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	25 81       	ldd	r18, Z+5	; 0x05
    1cc8:	36 81       	ldd	r19, Z+6	; 0x06
    1cca:	38 87       	std	Y+8, r19	; 0x08
    1ccc:	2f 83       	std	Y+7, r18	; 0x07
    1cce:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd0:	98 85       	ldd	r25, Y+8	; 0x08
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	71 f1       	breq	.+92     	; 0x1d34 <TIMER_voidTimerOn+0xbc>
    1cd8:	2f 81       	ldd	r18, Y+7	; 0x07
    1cda:	38 85       	ldd	r19, Y+8	; 0x08
    1cdc:	23 30       	cpi	r18, 0x03	; 3
    1cde:	31 05       	cpc	r19, r1
    1ce0:	50 f4       	brcc	.+20     	; 0x1cf6 <TIMER_voidTimerOn+0x7e>
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	b1 f0       	breq	.+44     	; 0x1d16 <TIMER_voidTimerOn+0x9e>
    1cea:	2f 81       	ldd	r18, Y+7	; 0x07
    1cec:	38 85       	ldd	r19, Y+8	; 0x08
    1cee:	21 30       	cpi	r18, 0x01	; 1
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	c1 f0       	breq	.+48     	; 0x1d24 <TIMER_voidTimerOn+0xac>
    1cf4:	32 c1       	rjmp	.+612    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
    1cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf8:	98 85       	ldd	r25, Y+8	; 0x08
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	b1 f1       	breq	.+108    	; 0x1d6c <TIMER_voidTimerOn+0xf4>
    1d00:	2f 81       	ldd	r18, Y+7	; 0x07
    1d02:	38 85       	ldd	r19, Y+8	; 0x08
    1d04:	24 30       	cpi	r18, 0x04	; 4
    1d06:	31 05       	cpc	r19, r1
    1d08:	18 f1       	brcs	.+70     	; 0x1d50 <TIMER_voidTimerOn+0xd8>
    1d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0c:	98 85       	ldd	r25, Y+8	; 0x08
    1d0e:	85 30       	cpi	r24, 0x05	; 5
    1d10:	91 05       	cpc	r25, r1
    1d12:	d1 f1       	breq	.+116    	; 0x1d88 <TIMER_voidTimerOn+0x110>
    1d14:	22 c1       	rjmp	.+580    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER0_CLOCK_NO_CLOCK_SOURCE : TCCR0|=TIMER0_CLOCK_NO_CLOCK_SOURCE ; break;
    1d16:	e3 e5       	ldi	r30, 0x53	; 83
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	a3 e5       	ldi	r26, 0x53	; 83
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	8c 91       	ld	r24, X
    1d20:	80 83       	st	Z, r24
    1d22:	1b c1       	rjmp	.+566    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER0_CLOCK_NO_PRESCALLING  : TCCR0|=TIMER0_CLOCK_NO_PRESCALLING  ; break;
    1d24:	a3 e5       	ldi	r26, 0x53	; 83
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e3 e5       	ldi	r30, 0x53	; 83
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	81 60       	ori	r24, 0x01	; 1
    1d30:	8c 93       	st	X, r24
    1d32:	13 c1       	rjmp	.+550    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER0_CLOCK_PRESCALLING_8   : TCCR0|=TIMER0_CLOCK_PRESCALLING_8;Global_u16TimerClockPrescalerValue=8; break;
    1d34:	a3 e5       	ldi	r26, 0x53	; 83
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e3 e5       	ldi	r30, 0x53	; 83
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	82 60       	ori	r24, 0x02	; 2
    1d40:	8c 93       	st	X, r24
    1d42:	88 e0       	ldi	r24, 0x08	; 8
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	90 93 21 01 	sts	0x0121, r25
    1d4a:	80 93 20 01 	sts	0x0120, r24
    1d4e:	05 c1       	rjmp	.+522    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER0_CLOCK_PRESCALLING_64  : TCCR0|=TIMER0_CLOCK_PRESCALLING_64;Global_u16TimerClockPrescalerValue=64; break;
    1d50:	a3 e5       	ldi	r26, 0x53	; 83
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e3 e5       	ldi	r30, 0x53	; 83
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	83 60       	ori	r24, 0x03	; 3
    1d5c:	8c 93       	st	X, r24
    1d5e:	80 e4       	ldi	r24, 0x40	; 64
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	90 93 21 01 	sts	0x0121, r25
    1d66:	80 93 20 01 	sts	0x0120, r24
    1d6a:	f7 c0       	rjmp	.+494    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER0_CLOCK_PRESCALLING_256 : TCCR0|=TIMER0_CLOCK_PRESCALLING_256;Global_u16TimerClockPrescalerValue=128;break;
    1d6c:	a3 e5       	ldi	r26, 0x53	; 83
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e3 e5       	ldi	r30, 0x53	; 83
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	84 60       	ori	r24, 0x04	; 4
    1d78:	8c 93       	st	X, r24
    1d7a:	80 e8       	ldi	r24, 0x80	; 128
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	90 93 21 01 	sts	0x0121, r25
    1d82:	80 93 20 01 	sts	0x0120, r24
    1d86:	e9 c0       	rjmp	.+466    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER0_CLOCK_PRESCALLING_1024: TCCR0|=TIMER0_CLOCK_PRESCALLING_1024;Global_u16TimerClockPrescalerValue=1024;break;
    1d88:	a3 e5       	ldi	r26, 0x53	; 83
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e3 e5       	ldi	r30, 0x53	; 83
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	85 60       	ori	r24, 0x05	; 5
    1d94:	8c 93       	st	X, r24
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	94 e0       	ldi	r25, 0x04	; 4
    1d9a:	90 93 21 01 	sts	0x0121, r25
    1d9e:	80 93 20 01 	sts	0x0120, r24
    1da2:	db c0       	rjmp	.+438    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	};break;

	case TIMER_NO_TIMER1 :
	switch(Add_structTimerCfg->Timer_u8ClockSelect){
    1da4:	e9 81       	ldd	r30, Y+1	; 0x01
    1da6:	fa 81       	ldd	r31, Y+2	; 0x02
    1da8:	25 81       	ldd	r18, Z+5	; 0x05
    1daa:	36 81       	ldd	r19, Z+6	; 0x06
    1dac:	3e 83       	std	Y+6, r19	; 0x06
    1dae:	2d 83       	std	Y+5, r18	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	82 30       	cpi	r24, 0x02	; 2
    1db6:	91 05       	cpc	r25, r1
    1db8:	a1 f1       	breq	.+104    	; 0x1e22 <TIMER_voidTimerOn+0x1aa>
    1dba:	2d 81       	ldd	r18, Y+5	; 0x05
    1dbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dbe:	23 30       	cpi	r18, 0x03	; 3
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	50 f4       	brcc	.+20     	; 0x1dd8 <TIMER_voidTimerOn+0x160>
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	b1 f0       	breq	.+44     	; 0x1df8 <TIMER_voidTimerOn+0x180>
    1dcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dce:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd0:	21 30       	cpi	r18, 0x01	; 1
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	d9 f0       	breq	.+54     	; 0x1e0c <TIMER_voidTimerOn+0x194>
    1dd6:	c1 c0       	rjmp	.+386    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	84 30       	cpi	r24, 0x04	; 4
    1dde:	91 05       	cpc	r25, r1
    1de0:	b1 f1       	breq	.+108    	; 0x1e4e <TIMER_voidTimerOn+0x1d6>
    1de2:	2d 81       	ldd	r18, Y+5	; 0x05
    1de4:	3e 81       	ldd	r19, Y+6	; 0x06
    1de6:	24 30       	cpi	r18, 0x04	; 4
    1de8:	31 05       	cpc	r19, r1
    1dea:	30 f1       	brcs	.+76     	; 0x1e38 <TIMER_voidTimerOn+0x1c0>
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	85 30       	cpi	r24, 0x05	; 5
    1df2:	91 05       	cpc	r25, r1
    1df4:	b9 f1       	breq	.+110    	; 0x1e64 <TIMER_voidTimerOn+0x1ec>
    1df6:	b1 c0       	rjmp	.+354    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER1_CLOCK_NO_CLOCK_SOURCE : TCCR1|=TIMER1_CLOCK_NO_CLOCK_SOURCE ;break;
    1df8:	ee e4       	ldi	r30, 0x4E	; 78
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	ae e4       	ldi	r26, 0x4E	; 78
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	8d 91       	ld	r24, X+
    1e02:	9c 91       	ld	r25, X
    1e04:	11 97       	sbiw	r26, 0x01	; 1
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	a7 c0       	rjmp	.+334    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER1_CLOCK_NO_PRESCALLING  : TCCR1|=TIMER1_CLOCK_NO_PRESCALLING  ;break;
    1e0c:	ae e4       	ldi	r26, 0x4E	; 78
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ee e4       	ldi	r30, 0x4E	; 78
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	81 60       	ori	r24, 0x01	; 1
    1e1a:	11 96       	adiw	r26, 0x01	; 1
    1e1c:	9c 93       	st	X, r25
    1e1e:	8e 93       	st	-X, r24
    1e20:	9c c0       	rjmp	.+312    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER1_CLOCK_PRESCALLING_8   : TCCR1|=TIMER1_CLOCK_PRESCALLING_8   ;break;
    1e22:	ae e4       	ldi	r26, 0x4E	; 78
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	ee e4       	ldi	r30, 0x4E	; 78
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	82 60       	ori	r24, 0x02	; 2
    1e30:	11 96       	adiw	r26, 0x01	; 1
    1e32:	9c 93       	st	X, r25
    1e34:	8e 93       	st	-X, r24
    1e36:	91 c0       	rjmp	.+290    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER1_CLOCK_PRESCALLING_64  : TCCR1|=TIMER1_CLOCK_PRESCALLING_64  ;break;
    1e38:	ae e4       	ldi	r26, 0x4E	; 78
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ee e4       	ldi	r30, 0x4E	; 78
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	83 60       	ori	r24, 0x03	; 3
    1e46:	11 96       	adiw	r26, 0x01	; 1
    1e48:	9c 93       	st	X, r25
    1e4a:	8e 93       	st	-X, r24
    1e4c:	86 c0       	rjmp	.+268    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER1_CLOCK_PRESCALLING_256 : TCCR1|=TIMER1_CLOCK_PRESCALLING_256 ;break;
    1e4e:	ae e4       	ldi	r26, 0x4E	; 78
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ee e4       	ldi	r30, 0x4E	; 78
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	84 60       	ori	r24, 0x04	; 4
    1e5c:	11 96       	adiw	r26, 0x01	; 1
    1e5e:	9c 93       	st	X, r25
    1e60:	8e 93       	st	-X, r24
    1e62:	7b c0       	rjmp	.+246    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER1_CLOCK_PRESCALLING_1024: TCCR1|=TIMER1_CLOCK_PRESCALLING_1024;break;
    1e64:	ae e4       	ldi	r26, 0x4E	; 78
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	ee e4       	ldi	r30, 0x4E	; 78
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	85 60       	ori	r24, 0x05	; 5
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	9c 93       	st	X, r25
    1e76:	8e 93       	st	-X, r24
    1e78:	70 c0       	rjmp	.+224    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	};break;

	case TIMER_NO_TIMER2 :
	switch(Add_structTimerCfg->Timer_u8ClockSelect){
    1e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7e:	25 81       	ldd	r18, Z+5	; 0x05
    1e80:	36 81       	ldd	r19, Z+6	; 0x06
    1e82:	3c 83       	std	Y+4, r19	; 0x04
    1e84:	2b 83       	std	Y+3, r18	; 0x03
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	71 f1       	breq	.+92     	; 0x1eec <TIMER_voidTimerOn+0x274>
    1e90:	2b 81       	ldd	r18, Y+3	; 0x03
    1e92:	3c 81       	ldd	r19, Y+4	; 0x04
    1e94:	23 30       	cpi	r18, 0x03	; 3
    1e96:	31 05       	cpc	r19, r1
    1e98:	50 f4       	brcc	.+20     	; 0x1eae <TIMER_voidTimerOn+0x236>
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	b1 f0       	breq	.+44     	; 0x1ece <TIMER_voidTimerOn+0x256>
    1ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea6:	21 30       	cpi	r18, 0x01	; 1
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	c1 f0       	breq	.+48     	; 0x1edc <TIMER_voidTimerOn+0x264>
    1eac:	56 c0       	rjmp	.+172    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	b1 f1       	breq	.+108    	; 0x1f24 <TIMER_voidTimerOn+0x2ac>
    1eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eba:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebc:	24 30       	cpi	r18, 0x04	; 4
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	18 f1       	brcs	.+70     	; 0x1f08 <TIMER_voidTimerOn+0x290>
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	85 30       	cpi	r24, 0x05	; 5
    1ec8:	91 05       	cpc	r25, r1
    1eca:	d1 f1       	breq	.+116    	; 0x1f40 <TIMER_voidTimerOn+0x2c8>
    1ecc:	46 c0       	rjmp	.+140    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER2_CLOCK_NO_CLOCK_SOURCE : TCCR2|=TIMER2_CLOCK_NO_CLOCK_SOURCE ; break;
    1ece:	e5 e4       	ldi	r30, 0x45	; 69
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	a5 e4       	ldi	r26, 0x45	; 69
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	8c 91       	ld	r24, X
    1ed8:	80 83       	st	Z, r24
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER2_CLOCK_NO_PRESCALLING  : TCCR2|=TIMER2_CLOCK_NO_PRESCALLING  ; break;
    1edc:	a5 e4       	ldi	r26, 0x45	; 69
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e4       	ldi	r30, 0x45	; 69
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	81 60       	ori	r24, 0x01	; 1
    1ee8:	8c 93       	st	X, r24
    1eea:	37 c0       	rjmp	.+110    	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER2_CLOCK_PRESCALLING_8   : TCCR2|=TIMER2_CLOCK_PRESCALLING_8;Global_u16TimerClockPrescalerValue=8; break;
    1eec:	a5 e4       	ldi	r26, 0x45	; 69
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e5 e4       	ldi	r30, 0x45	; 69
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	82 60       	ori	r24, 0x02	; 2
    1ef8:	8c 93       	st	X, r24
    1efa:	88 e0       	ldi	r24, 0x08	; 8
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	90 93 21 01 	sts	0x0121, r25
    1f02:	80 93 20 01 	sts	0x0120, r24
    1f06:	29 c0       	rjmp	.+82     	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER2_CLOCK_PRESCALLING_64  : TCCR2|=TIMER2_CLOCK_PRESCALLING_64;Global_u16TimerClockPrescalerValue=64; break;
    1f08:	a5 e4       	ldi	r26, 0x45	; 69
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e5 e4       	ldi	r30, 0x45	; 69
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	83 60       	ori	r24, 0x03	; 3
    1f14:	8c 93       	st	X, r24
    1f16:	80 e4       	ldi	r24, 0x40	; 64
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	90 93 21 01 	sts	0x0121, r25
    1f1e:	80 93 20 01 	sts	0x0120, r24
    1f22:	1b c0       	rjmp	.+54     	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER2_CLOCK_PRESCALLING_256 : TCCR2|=TIMER2_CLOCK_PRESCALLING_256;Global_u16TimerClockPrescalerValue=128;break;
    1f24:	a5 e4       	ldi	r26, 0x45	; 69
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e5 e4       	ldi	r30, 0x45	; 69
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	84 60       	ori	r24, 0x04	; 4
    1f30:	8c 93       	st	X, r24
    1f32:	80 e8       	ldi	r24, 0x80	; 128
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	90 93 21 01 	sts	0x0121, r25
    1f3a:	80 93 20 01 	sts	0x0120, r24
    1f3e:	0d c0       	rjmp	.+26     	; 0x1f5a <TIMER_voidTimerOn+0x2e2>
	case TIMER2_CLOCK_PRESCALLING_1024: TCCR2|=TIMER2_CLOCK_PRESCALLING_1024;Global_u16TimerClockPrescalerValue=1024;break;
    1f40:	a5 e4       	ldi	r26, 0x45	; 69
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e5 e4       	ldi	r30, 0x45	; 69
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	85 60       	ori	r24, 0x05	; 5
    1f4c:	8c 93       	st	X, r24
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	94 e0       	ldi	r25, 0x04	; 4
    1f52:	90 93 21 01 	sts	0x0121, r25
    1f56:	80 93 20 01 	sts	0x0120, r24
	};break;

	}
}
    1f5a:	2a 96       	adiw	r28, 0x0a	; 10
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <SPI_voidInit>:
/* PARAMETERS: Pointer that carries address of   */
/* configuration struct that user need           */                                       //
/* RETURN: No Return                             */
/*************************************************/

void SPI_voidInit(SPI_sructCfg*Add_sructSPIcfg){
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	2c 97       	sbiw	r28, 0x0c	; 12
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
	switch(Add_sructSPIcfg->SPI_u8SelectMasterSlave){
    1f84:	e9 81       	ldd	r30, Y+1	; 0x01
    1f86:	fa 81       	ldd	r31, Y+2	; 0x02
    1f88:	80 81       	ld	r24, Z
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	3c 87       	std	Y+12, r19	; 0x0c
    1f90:	2b 87       	std	Y+11, r18	; 0x0b
    1f92:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f94:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <SPI_voidInit+0x30>
    1f9a:	4d c0       	rjmp	.+154    	; 0x2036 <SPI_voidInit+0xca>
    1f9c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f9e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fa0:	20 31       	cpi	r18, 0x10	; 16
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <SPI_voidInit+0x3c>
    1fa6:	4d c0       	rjmp	.+154    	; 0x2042 <SPI_voidInit+0xd6>
	case SPI_SELECT_MASTER:
		SPCR|= SPI_SELECT_MASTER;
    1fa8:	ad e2       	ldi	r26, 0x2D	; 45
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ed e2       	ldi	r30, 0x2D	; 45
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 61       	ori	r24, 0x10	; 16
    1fb4:	8c 93       	st	X, r24
		switch(Add_sructSPIcfg->SPI_u8ClockRate){
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	83 81       	ldd	r24, Z+3	; 0x03
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3a 87       	std	Y+10, r19	; 0x0a
    1fc2:	29 87       	std	Y+9, r18	; 0x09
    1fc4:	89 85       	ldd	r24, Y+9	; 0x09
    1fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	91 05       	cpc	r25, r1
    1fcc:	e1 f0       	breq	.+56     	; 0x2006 <SPI_voidInit+0x9a>
    1fce:	29 85       	ldd	r18, Y+9	; 0x09
    1fd0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <SPI_voidInit+0x76>
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <SPI_voidInit+0x8c>
    1fe0:	30 c0       	rjmp	.+96     	; 0x2042 <SPI_voidInit+0xd6>
    1fe2:	29 85       	ldd	r18, Y+9	; 0x09
    1fe4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe6:	22 30       	cpi	r18, 0x02	; 2
    1fe8:	31 05       	cpc	r19, r1
    1fea:	a9 f0       	breq	.+42     	; 0x2016 <SPI_voidInit+0xaa>
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	83 30       	cpi	r24, 0x03	; 3
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	c1 f0       	breq	.+48     	; 0x2026 <SPI_voidInit+0xba>
    1ff6:	25 c0       	rjmp	.+74     	; 0x2042 <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_8   :  SPCR|= SPI_CLOCK_RATE_8   ;break;
    1ff8:	ed e2       	ldi	r30, 0x2D	; 45
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	ad e2       	ldi	r26, 0x2D	; 45
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	8c 91       	ld	r24, X
    2002:	80 83       	st	Z, r24
    2004:	1e c0       	rjmp	.+60     	; 0x2042 <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_16  :  SPCR|= SPI_CLOCK_RATE_16  ;break;
    2006:	ad e2       	ldi	r26, 0x2D	; 45
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	ed e2       	ldi	r30, 0x2D	; 45
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	81 60       	ori	r24, 0x01	; 1
    2012:	8c 93       	st	X, r24
    2014:	16 c0       	rjmp	.+44     	; 0x2042 <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_64  :  SPCR|= SPI_CLOCK_RATE_64  ;break;
    2016:	ad e2       	ldi	r26, 0x2D	; 45
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	ed e2       	ldi	r30, 0x2D	; 45
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	82 60       	ori	r24, 0x02	; 2
    2022:	8c 93       	st	X, r24
    2024:	0e c0       	rjmp	.+28     	; 0x2042 <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_128 :  SPCR|= SPI_CLOCK_RATE_128 ;break;
    2026:	ad e2       	ldi	r26, 0x2D	; 45
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ed e2       	ldi	r30, 0x2D	; 45
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	83 60       	ori	r24, 0x03	; 3
    2032:	8c 93       	st	X, r24
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <SPI_voidInit+0xd6>
		}
	break;
	case SPI_SELECT_SLAVE:SPCR|= SPI_SELECT_SLAVE;
    2036:	ed e2       	ldi	r30, 0x2D	; 45
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	ad e2       	ldi	r26, 0x2D	; 45
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	8c 91       	ld	r24, X
    2040:	80 83       	st	Z, r24
	}

	switch (Add_sructSPIcfg->SPI_u8ClockPhase){
    2042:	e9 81       	ldd	r30, Y+1	; 0x01
    2044:	fa 81       	ldd	r31, Y+2	; 0x02
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	38 87       	std	Y+8, r19	; 0x08
    204e:	2f 83       	std	Y+7, r18	; 0x07
    2050:	8f 81       	ldd	r24, Y+7	; 0x07
    2052:	98 85       	ldd	r25, Y+8	; 0x08
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	31 f0       	breq	.+12     	; 0x2064 <SPI_voidInit+0xf8>
    2058:	2f 81       	ldd	r18, Y+7	; 0x07
    205a:	38 85       	ldd	r19, Y+8	; 0x08
    205c:	24 30       	cpi	r18, 0x04	; 4
    205e:	31 05       	cpc	r19, r1
    2060:	41 f0       	breq	.+16     	; 0x2072 <SPI_voidInit+0x106>
    2062:	0e c0       	rjmp	.+28     	; 0x2080 <SPI_voidInit+0x114>
	case SPI_CLOCK_PHASE_WRITE_FIRST : SPCR|=SPI_CLOCK_PHASE_WRITE_FIRST;break;
    2064:	ed e2       	ldi	r30, 0x2D	; 45
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	ad e2       	ldi	r26, 0x2D	; 45
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	8c 91       	ld	r24, X
    206e:	80 83       	st	Z, r24
    2070:	07 c0       	rjmp	.+14     	; 0x2080 <SPI_voidInit+0x114>
	case SPI_CLOCK_PHASE_READ_FIRST  : SPCR|=SPI_CLOCK_PHASE_READ_FIRST ;break;
    2072:	ad e2       	ldi	r26, 0x2D	; 45
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ed e2       	ldi	r30, 0x2D	; 45
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	84 60       	ori	r24, 0x04	; 4
    207e:	8c 93       	st	X, r24
	}

	switch(Add_sructSPIcfg->SPI_u8ClockPolarity){
    2080:	e9 81       	ldd	r30, Y+1	; 0x01
    2082:	fa 81       	ldd	r31, Y+2	; 0x02
    2084:	81 81       	ldd	r24, Z+1	; 0x01
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	3e 83       	std	Y+6, r19	; 0x06
    208c:	2d 83       	std	Y+5, r18	; 0x05
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	31 f0       	breq	.+12     	; 0x20a2 <SPI_voidInit+0x136>
    2096:	2d 81       	ldd	r18, Y+5	; 0x05
    2098:	3e 81       	ldd	r19, Y+6	; 0x06
    209a:	28 30       	cpi	r18, 0x08	; 8
    209c:	31 05       	cpc	r19, r1
    209e:	41 f0       	breq	.+16     	; 0x20b0 <SPI_voidInit+0x144>
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <SPI_voidInit+0x152>
	case SPI_CLOCK_POLARITY_RISING : SPCR|=SPI_CLOCK_POLARITY_RISING ;break;
    20a2:	ed e2       	ldi	r30, 0x2D	; 45
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	ad e2       	ldi	r26, 0x2D	; 45
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	8c 91       	ld	r24, X
    20ac:	80 83       	st	Z, r24
    20ae:	07 c0       	rjmp	.+14     	; 0x20be <SPI_voidInit+0x152>
	case SPI_CLOCK_POLARITY_FALLING: SPCR|=SPI_CLOCK_POLARITY_FALLING;break;
    20b0:	ad e2       	ldi	r26, 0x2D	; 45
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ed e2       	ldi	r30, 0x2D	; 45
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	88 60       	ori	r24, 0x08	; 8
    20bc:	8c 93       	st	X, r24
	}
	switch(Add_sructSPIcfg->SPI_u8DataOrder){
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	85 81       	ldd	r24, Z+5	; 0x05
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	3c 83       	std	Y+4, r19	; 0x04
    20ca:	2b 83       	std	Y+3, r18	; 0x03
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	69 f0       	breq	.+26     	; 0x20ee <SPI_voidInit+0x182>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	20 32       	cpi	r18, 0x20	; 32
    20da:	31 05       	cpc	r19, r1
    20dc:	71 f4       	brne	.+28     	; 0x20fa <SPI_voidInit+0x18e>
	case SPI_DATA_ORDER_LSB_FIRST : SPCR|=SPI_DATA_ORDER_LSB_FIRST;break;
    20de:	ad e2       	ldi	r26, 0x2D	; 45
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	ed e2       	ldi	r30, 0x2D	; 45
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	80 62       	ori	r24, 0x20	; 32
    20ea:	8c 93       	st	X, r24
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <SPI_voidInit+0x18e>
	case SPI_DATA_ORDER_MSB_FIRST : SPCR|=SPI_DATA_ORDER_MSB_FIRST;break;
    20ee:	ed e2       	ldi	r30, 0x2D	; 45
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	ad e2       	ldi	r26, 0x2D	; 45
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	8c 91       	ld	r24, X
    20f8:	80 83       	st	Z, r24
	}

	SPCR|=SPI_ENABLE;
    20fa:	ad e2       	ldi	r26, 0x2D	; 45
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	ed e2       	ldi	r30, 0x2D	; 45
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 64       	ori	r24, 0x40	; 64
    2106:	8c 93       	st	X, r24

}
    2108:	2c 96       	adiw	r28, 0x0c	; 12
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <SPI_u8Tranceive>:
/* USE : Send and Recieve Data                        */
/* PARAMETERS: Copy of data to be Transmit or Recieve */
/* RETURN: Return the read data in case of reading    */
/* and un-needed data in case of writing              */
/******************************************************/
u8 SPI_u8Tranceive(u8 Copy_u8Data){
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <SPI_u8Tranceive+0x6>
    2120:	0f 92       	push	r0
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	8a 83       	std	Y+2, r24	; 0x02
 SPDR = Copy_u8Data;
    2128:	ef e2       	ldi	r30, 0x2F	; 47
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	80 83       	st	Z, r24
 u8 Loc_u8SPItimeOut=200;
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	03 c0       	rjmp	.+6      	; 0x213c <SPI_u8Tranceive+0x22>
 while(GET_BIT(SPSR,SPI_TRANSFER_FLAG)==SPI_TRANSFER_NOT_COMPLETED && Loc_u8SPItimeOut>0){
	 Loc_u8SPItimeOut--;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	81 50       	subi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
/* and un-needed data in case of writing              */
/******************************************************/
u8 SPI_u8Tranceive(u8 Copy_u8Data){
 SPDR = Copy_u8Data;
 u8 Loc_u8SPItimeOut=200;
 while(GET_BIT(SPSR,SPI_TRANSFER_FLAG)==SPI_TRANSFER_NOT_COMPLETED && Loc_u8SPItimeOut>0){
    213c:	ee e2       	ldi	r30, 0x2E	; 46
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	88 23       	and	r24, r24
    2144:	1c f0       	brlt	.+6      	; 0x214c <SPI_u8Tranceive+0x32>
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	88 23       	and	r24, r24
    214a:	a9 f7       	brne	.-22     	; 0x2136 <SPI_u8Tranceive+0x1c>
	 Loc_u8SPItimeOut--;
}
 if(Loc_u8SPItimeOut == SPI_TIMEOUT){
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	88 23       	and	r24, r24
    2150:	31 f0       	breq	.+12     	; 0x215e <SPI_u8Tranceive+0x44>
	 #warning SPI TIMEOUT
}
 else{
	 return SPDR;
    2152:	ef e2       	ldi	r30, 0x2F	; 47
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8b 83       	std	Y+3, r24	; 0x03
}
}
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	00 c0       	rjmp	.+0      	; 0x215e <SPI_u8Tranceive+0x44>
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <GIE_voidGlobalInterruptEnable>:
 */
#include "../../../INCLUDE/MCAL/GIE/GIE_priv.h"
#include "../../../INCLUDE/MCAL/GIE/GIE.h"
#include"../../../SERVICES/bit_utilies.h"
#include"../../../SERVICES/std_types.h"
void GIE_voidGlobalInterruptEnable(){
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    2172:	af e5       	ldi	r26, 0x5F	; 95
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ef e5       	ldi	r30, 0x5F	; 95
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	80 68       	ori	r24, 0x80	; 128
    217e:	8c 93       	st	X, r24
}
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <GIE_voidGlobalInterruptDisable>:
void GIE_voidGlobalInterruptDisable(){
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    218e:	af e5       	ldi	r26, 0x5F	; 95
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ef e5       	ldi	r30, 0x5F	; 95
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 77       	andi	r24, 0x7F	; 127
    219a:	8c 93       	st	X, r24
}
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <EXTINT_voidEnable>:
#include "../../../INCLUDE/MCAL/EXTINT/EXTINT.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
#include"../../../SERVICES/bit_utilies.h"
#include"../../../SERVICES/std_types.h"
#include "../../../INCLUDE/MCAL/GIE/GIE.h"
void EXTINT_voidEnable(EXTINT_structCfg*Add_ExtInt){
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	2e 97       	sbiw	r28, 0x0e	; 14
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01

	GIE_voidGlobalInterruptEnable();
    21ba:	0e 94 b5 10 	call	0x216a	; 0x216a <GIE_voidGlobalInterruptEnable>

	///////////////////////// INPUT (EXTERNAL) \\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    21be:	e9 81       	ldd	r30, Y+1	; 0x01
    21c0:	fa 81       	ldd	r31, Y+2	; 0x02
    21c2:	80 81       	ld	r24, Z
    21c4:	83 70       	andi	r24, 0x03	; 3
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	3e 87       	std	Y+14, r19	; 0x0e
    21cc:	2d 87       	std	Y+13, r18	; 0x0d
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	91 05       	cpc	r25, r1
    21d6:	79 f0       	breq	.+30     	; 0x21f6 <EXTINT_voidEnable+0x54>
    21d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    21da:	3e 85       	ldd	r19, Y+14	; 0x0e
    21dc:	22 30       	cpi	r18, 0x02	; 2
    21de:	31 05       	cpc	r19, r1
    21e0:	81 f0       	breq	.+32     	; 0x2202 <EXTINT_voidEnable+0x60>
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	89 f4       	brne	.+34     	; 0x220c <EXTINT_voidEnable+0x6a>
	case EXTINT_INT0: DIO_enuSetPinDirection(DIO_u8_PORTD ,DIO_u8_PIN2,DIO_u8_INPUT);break;
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	62 e0       	ldi	r22, 0x02	; 2
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
    21f4:	0b c0       	rjmp	.+22     	; 0x220c <EXTINT_voidEnable+0x6a>
	case EXTINT_INT1: DIO_enuSetPinDirection(DIO_u8_PORTD ,DIO_u8_PIN3,DIO_u8_INPUT);break;
    21f6:	83 e0       	ldi	r24, 0x03	; 3
    21f8:	63 e0       	ldi	r22, 0x03	; 3
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
    2200:	05 c0       	rjmp	.+10     	; 0x220c <EXTINT_voidEnable+0x6a>
	case EXTINT_INT2: DIO_enuSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN2,DIO_u8_INPUT);break;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
	}

	///////////////////////////// SETMODE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    220c:	e9 81       	ldd	r30, Y+1	; 0x01
    220e:	fa 81       	ldd	r31, Y+2	; 0x02
    2210:	80 81       	ld	r24, Z
    2212:	83 70       	andi	r24, 0x03	; 3
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	3c 87       	std	Y+12, r19	; 0x0c
    221a:	2b 87       	std	Y+11, r18	; 0x0b
    221c:	8b 85       	ldd	r24, Y+11	; 0x0b
    221e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	91 05       	cpc	r25, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <EXTINT_voidEnable+0x86>
    2226:	6b c0       	rjmp	.+214    	; 0x22fe <EXTINT_voidEnable+0x15c>
    2228:	2b 85       	ldd	r18, Y+11	; 0x0b
    222a:	3c 85       	ldd	r19, Y+12	; 0x0c
    222c:	22 30       	cpi	r18, 0x02	; 2
    222e:	31 05       	cpc	r19, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <EXTINT_voidEnable+0x92>
    2232:	c5 c0       	rjmp	.+394    	; 0x23be <EXTINT_voidEnable+0x21c>
    2234:	8b 85       	ldd	r24, Y+11	; 0x0b
    2236:	9c 85       	ldd	r25, Y+12	; 0x0c
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	09 f0       	breq	.+2      	; 0x223e <EXTINT_voidEnable+0x9c>
    223c:	e3 c0       	rjmp	.+454    	; 0x2404 <EXTINT_voidEnable+0x262>

	case EXTINT_INT0:
		switch(Add_ExtInt->IntMode){
    223e:	e9 81       	ldd	r30, Y+1	; 0x01
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	80 81       	ld	r24, Z
    2244:	86 95       	lsr	r24
    2246:	86 95       	lsr	r24
    2248:	83 70       	andi	r24, 0x03	; 3
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	3a 87       	std	Y+10, r19	; 0x0a
    2250:	29 87       	std	Y+9, r18	; 0x09
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	91 05       	cpc	r25, r1
    225a:	21 f1       	breq	.+72     	; 0x22a4 <EXTINT_voidEnable+0x102>
    225c:	29 85       	ldd	r18, Y+9	; 0x09
    225e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2260:	22 30       	cpi	r18, 0x02	; 2
    2262:	31 05       	cpc	r19, r1
    2264:	2c f4       	brge	.+10     	; 0x2270 <EXTINT_voidEnable+0xce>
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	61 f0       	breq	.+24     	; 0x2286 <EXTINT_voidEnable+0xe4>
    226e:	ca c0       	rjmp	.+404    	; 0x2404 <EXTINT_voidEnable+0x262>
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	22 30       	cpi	r18, 0x02	; 2
    2276:	31 05       	cpc	r19, r1
    2278:	21 f1       	breq	.+72     	; 0x22c2 <EXTINT_voidEnable+0x120>
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	83 30       	cpi	r24, 0x03	; 3
    2280:	91 05       	cpc	r25, r1
    2282:	71 f1       	breq	.+92     	; 0x22e0 <EXTINT_voidEnable+0x13e>
    2284:	bf c0       	rjmp	.+382    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_RISING_EDGE     :SET_BIT(MCUCR,1);SET_BIT(MCUCR,0);break;
    2286:	a5 e5       	ldi	r26, 0x55	; 85
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e5 e5       	ldi	r30, 0x55	; 85
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	82 60       	ori	r24, 0x02	; 2
    2292:	8c 93       	st	X, r24
    2294:	a5 e5       	ldi	r26, 0x55	; 85
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e5 e5       	ldi	r30, 0x55	; 85
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	81 60       	ori	r24, 0x01	; 1
    22a0:	8c 93       	st	X, r24
    22a2:	b0 c0       	rjmp	.+352    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_FALLING_EDGE    :SET_BIT(MCUCR,1);CLR_BIT(MCUCR,0);break;
    22a4:	a5 e5       	ldi	r26, 0x55	; 85
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e5 e5       	ldi	r30, 0x55	; 85
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	82 60       	ori	r24, 0x02	; 2
    22b0:	8c 93       	st	X, r24
    22b2:	a5 e5       	ldi	r26, 0x55	; 85
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e5 e5       	ldi	r30, 0x55	; 85
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8e 7f       	andi	r24, 0xFE	; 254
    22be:	8c 93       	st	X, r24
    22c0:	a1 c0       	rjmp	.+322    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_LOGICAL_CHANGE  :CLR_BIT(MCUCR,1);SET_BIT(MCUCR,0);break;
    22c2:	a5 e5       	ldi	r26, 0x55	; 85
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e5 e5       	ldi	r30, 0x55	; 85
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8d 7f       	andi	r24, 0xFD	; 253
    22ce:	8c 93       	st	X, r24
    22d0:	a5 e5       	ldi	r26, 0x55	; 85
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e5 e5       	ldi	r30, 0x55	; 85
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	81 60       	ori	r24, 0x01	; 1
    22dc:	8c 93       	st	X, r24
    22de:	92 c0       	rjmp	.+292    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_LOW_LEVEL       :SET_BIT(MCUCR,1);SET_BIT(MCUCR,0);break;
    22e0:	a5 e5       	ldi	r26, 0x55	; 85
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e5 e5       	ldi	r30, 0x55	; 85
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	82 60       	ori	r24, 0x02	; 2
    22ec:	8c 93       	st	X, r24
    22ee:	a5 e5       	ldi	r26, 0x55	; 85
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e5 e5       	ldi	r30, 0x55	; 85
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	81 60       	ori	r24, 0x01	; 1
    22fa:	8c 93       	st	X, r24
    22fc:	83 c0       	rjmp	.+262    	; 0x2404 <EXTINT_voidEnable+0x262>
		}
	break;

	case EXTINT_INT1:
		switch(Add_ExtInt->IntMode){
    22fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2300:	fa 81       	ldd	r31, Y+2	; 0x02
    2302:	80 81       	ld	r24, Z
    2304:	86 95       	lsr	r24
    2306:	86 95       	lsr	r24
    2308:	83 70       	andi	r24, 0x03	; 3
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	38 87       	std	Y+8, r19	; 0x08
    2310:	2f 83       	std	Y+7, r18	; 0x07
    2312:	8f 81       	ldd	r24, Y+7	; 0x07
    2314:	98 85       	ldd	r25, Y+8	; 0x08
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	21 f1       	breq	.+72     	; 0x2364 <EXTINT_voidEnable+0x1c2>
    231c:	2f 81       	ldd	r18, Y+7	; 0x07
    231e:	38 85       	ldd	r19, Y+8	; 0x08
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	2c f4       	brge	.+10     	; 0x2330 <EXTINT_voidEnable+0x18e>
    2326:	8f 81       	ldd	r24, Y+7	; 0x07
    2328:	98 85       	ldd	r25, Y+8	; 0x08
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	61 f0       	breq	.+24     	; 0x2346 <EXTINT_voidEnable+0x1a4>
    232e:	6a c0       	rjmp	.+212    	; 0x2404 <EXTINT_voidEnable+0x262>
    2330:	2f 81       	ldd	r18, Y+7	; 0x07
    2332:	38 85       	ldd	r19, Y+8	; 0x08
    2334:	22 30       	cpi	r18, 0x02	; 2
    2336:	31 05       	cpc	r19, r1
    2338:	21 f1       	breq	.+72     	; 0x2382 <EXTINT_voidEnable+0x1e0>
    233a:	8f 81       	ldd	r24, Y+7	; 0x07
    233c:	98 85       	ldd	r25, Y+8	; 0x08
    233e:	83 30       	cpi	r24, 0x03	; 3
    2340:	91 05       	cpc	r25, r1
    2342:	71 f1       	breq	.+92     	; 0x23a0 <EXTINT_voidEnable+0x1fe>
    2344:	5f c0       	rjmp	.+190    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_RISING_EDGE     :SET_BIT(MCUCR,3);SET_BIT(MCUCR,2);break;
    2346:	a5 e5       	ldi	r26, 0x55	; 85
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e5 e5       	ldi	r30, 0x55	; 85
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	88 60       	ori	r24, 0x08	; 8
    2352:	8c 93       	st	X, r24
    2354:	a5 e5       	ldi	r26, 0x55	; 85
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e5 e5       	ldi	r30, 0x55	; 85
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	84 60       	ori	r24, 0x04	; 4
    2360:	8c 93       	st	X, r24
    2362:	50 c0       	rjmp	.+160    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_FALLING_EDGE    :SET_BIT(MCUCR,3);CLR_BIT(MCUCR,2);break;
    2364:	a5 e5       	ldi	r26, 0x55	; 85
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e5 e5       	ldi	r30, 0x55	; 85
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	88 60       	ori	r24, 0x08	; 8
    2370:	8c 93       	st	X, r24
    2372:	a5 e5       	ldi	r26, 0x55	; 85
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e5 e5       	ldi	r30, 0x55	; 85
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	8b 7f       	andi	r24, 0xFB	; 251
    237e:	8c 93       	st	X, r24
    2380:	41 c0       	rjmp	.+130    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_LOGICAL_CHANGE  :CLR_BIT(MCUCR,3);SET_BIT(MCUCR,2);break;
    2382:	a5 e5       	ldi	r26, 0x55	; 85
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e5 e5       	ldi	r30, 0x55	; 85
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	87 7f       	andi	r24, 0xF7	; 247
    238e:	8c 93       	st	X, r24
    2390:	a5 e5       	ldi	r26, 0x55	; 85
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e5 e5       	ldi	r30, 0x55	; 85
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	84 60       	ori	r24, 0x04	; 4
    239c:	8c 93       	st	X, r24
    239e:	32 c0       	rjmp	.+100    	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_LOW_LEVEL       :SET_BIT(MCUCR,3);SET_BIT(MCUCR,2);break;
    23a0:	a5 e5       	ldi	r26, 0x55	; 85
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e5 e5       	ldi	r30, 0x55	; 85
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	88 60       	ori	r24, 0x08	; 8
    23ac:	8c 93       	st	X, r24
    23ae:	a5 e5       	ldi	r26, 0x55	; 85
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e5 e5       	ldi	r30, 0x55	; 85
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	84 60       	ori	r24, 0x04	; 4
    23ba:	8c 93       	st	X, r24
    23bc:	23 c0       	rjmp	.+70     	; 0x2404 <EXTINT_voidEnable+0x262>
		}
	break;

	case EXTINT_INT2:
		switch(Add_ExtInt->IntMode){
    23be:	e9 81       	ldd	r30, Y+1	; 0x01
    23c0:	fa 81       	ldd	r31, Y+2	; 0x02
    23c2:	80 81       	ld	r24, Z
    23c4:	86 95       	lsr	r24
    23c6:	86 95       	lsr	r24
    23c8:	83 70       	andi	r24, 0x03	; 3
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	3e 83       	std	Y+6, r19	; 0x06
    23d0:	2d 83       	std	Y+5, r18	; 0x05
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	31 f0       	breq	.+12     	; 0x23e6 <EXTINT_voidEnable+0x244>
    23da:	2d 81       	ldd	r18, Y+5	; 0x05
    23dc:	3e 81       	ldd	r19, Y+6	; 0x06
    23de:	21 30       	cpi	r18, 0x01	; 1
    23e0:	31 05       	cpc	r19, r1
    23e2:	49 f0       	breq	.+18     	; 0x23f6 <EXTINT_voidEnable+0x254>
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_RISING_EDGE     :SET_BIT(MCUCSR,6);break;
    23e6:	a4 e5       	ldi	r26, 0x54	; 84
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e4 e5       	ldi	r30, 0x54	; 84
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	80 64       	ori	r24, 0x40	; 64
    23f2:	8c 93       	st	X, r24
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <EXTINT_voidEnable+0x262>
	case EXTINT_FALLING_EDGE    :CLR_BIT(MCUCSR,6);break;
    23f6:	a4 e5       	ldi	r26, 0x54	; 84
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e4 e5       	ldi	r30, 0x54	; 84
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8f 7b       	andi	r24, 0xBF	; 191
    2402:	8c 93       	st	X, r24
	break;
	}

	//////////////////// PIE ON \\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    2404:	e9 81       	ldd	r30, Y+1	; 0x01
    2406:	fa 81       	ldd	r31, Y+2	; 0x02
    2408:	80 81       	ld	r24, Z
    240a:	83 70       	andi	r24, 0x03	; 3
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	3c 83       	std	Y+4, r19	; 0x04
    2412:	2b 83       	std	Y+3, r18	; 0x03
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	89 f0       	breq	.+34     	; 0x2440 <EXTINT_voidEnable+0x29e>
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	22 30       	cpi	r18, 0x02	; 2
    2424:	31 05       	cpc	r19, r1
    2426:	a1 f0       	breq	.+40     	; 0x2450 <EXTINT_voidEnable+0x2ae>
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	b9 f4       	brne	.+46     	; 0x245e <EXTINT_voidEnable+0x2bc>
		case EXTINT_INT0: SET_BIT(GICR,6);break;
    2430:	ab e5       	ldi	r26, 0x5B	; 91
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	eb e5       	ldi	r30, 0x5B	; 91
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 64       	ori	r24, 0x40	; 64
    243c:	8c 93       	st	X, r24
    243e:	0f c0       	rjmp	.+30     	; 0x245e <EXTINT_voidEnable+0x2bc>
		case EXTINT_INT1: SET_BIT(GICR,7);break;
    2440:	ab e5       	ldi	r26, 0x5B	; 91
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	eb e5       	ldi	r30, 0x5B	; 91
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	80 68       	ori	r24, 0x80	; 128
    244c:	8c 93       	st	X, r24
    244e:	07 c0       	rjmp	.+14     	; 0x245e <EXTINT_voidEnable+0x2bc>
		case EXTINT_INT2: SET_BIT(GICR,5);break;
    2450:	ab e5       	ldi	r26, 0x5B	; 91
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	eb e5       	ldi	r30, 0x5B	; 91
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	80 62       	ori	r24, 0x20	; 32
    245c:	8c 93       	st	X, r24
		}

	//

}
    245e:	2e 96       	adiw	r28, 0x0e	; 14
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <EXTINT_voidDisable>:
void EXTINT_voidDisable(EXTINT_structCfg*Add_ExtInt){
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <EXTINT_voidDisable+0x6>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <EXTINT_voidDisable+0x8>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01

	//////////////////// PIE OFF \\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    2480:	e9 81       	ldd	r30, Y+1	; 0x01
    2482:	fa 81       	ldd	r31, Y+2	; 0x02
    2484:	80 81       	ld	r24, Z
    2486:	83 70       	andi	r24, 0x03	; 3
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	3c 83       	std	Y+4, r19	; 0x04
    248e:	2b 83       	std	Y+3, r18	; 0x03
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	91 05       	cpc	r25, r1
    2498:	89 f0       	breq	.+34     	; 0x24bc <EXTINT_voidDisable+0x4c>
    249a:	2b 81       	ldd	r18, Y+3	; 0x03
    249c:	3c 81       	ldd	r19, Y+4	; 0x04
    249e:	22 30       	cpi	r18, 0x02	; 2
    24a0:	31 05       	cpc	r19, r1
    24a2:	a1 f0       	breq	.+40     	; 0x24cc <EXTINT_voidDisable+0x5c>
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	b9 f4       	brne	.+46     	; 0x24da <EXTINT_voidDisable+0x6a>
		case EXTINT_INT0: CLR_BIT(GICR,6);break;
    24ac:	ab e5       	ldi	r26, 0x5B	; 91
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	eb e5       	ldi	r30, 0x5B	; 91
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8f 7b       	andi	r24, 0xBF	; 191
    24b8:	8c 93       	st	X, r24
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <EXTINT_voidDisable+0x6a>
		case EXTINT_INT1: CLR_BIT(GICR,7);break;
    24bc:	ab e5       	ldi	r26, 0x5B	; 91
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	eb e5       	ldi	r30, 0x5B	; 91
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 77       	andi	r24, 0x7F	; 127
    24c8:	8c 93       	st	X, r24
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <EXTINT_voidDisable+0x6a>
		case EXTINT_INT2: CLR_BIT(GICR,5);break;
    24cc:	ab e5       	ldi	r26, 0x5B	; 91
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	eb e5       	ldi	r30, 0x5B	; 91
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	8f 7d       	andi	r24, 0xDF	; 223
    24d8:	8c 93       	st	X, r24
		}

}
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <DIO_enuSetPinValue>:
#include "../../../INCLUDE/MCAL/DIO/DIO_priv.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
#include "../../../SERVICES/bit_utilies.h"

// PORT REGISTER (OUTPUT)
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinVal){
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	28 97       	sbiw	r28, 0x08	; 8
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	8a 83       	std	Y+2, r24	; 0x02
    24fe:	6b 83       	std	Y+3, r22	; 0x03
    2500:	4c 83       	std	Y+4, r20	; 0x04
	//Error flag
	DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    2502:	19 82       	std	Y+1, r1	; 0x01

	// Check if inputs are valid
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7))
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	84 30       	cpi	r24, 0x04	; 4
    2508:	08 f0       	brcs	.+2      	; 0x250c <DIO_enuSetPinValue+0x24>
    250a:	ef c0       	rjmp	.+478    	; 0x26ea <DIO_enuSetPinValue+0x202>
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	08 f0       	brcs	.+2      	; 0x2514 <DIO_enuSetPinValue+0x2c>
    2512:	eb c0       	rjmp	.+470    	; 0x26ea <DIO_enuSetPinValue+0x202>
	{
		if(Copy_u8PinVal==DIO_u8_HIGH){
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	09 f0       	breq	.+2      	; 0x251c <DIO_enuSetPinValue+0x34>
    251a:	6f c0       	rjmp	.+222    	; 0x25fa <DIO_enuSetPinValue+0x112>
			switch(Copy_u8PortId){
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	38 87       	std	Y+8, r19	; 0x08
    2524:	2f 83       	std	Y+7, r18	; 0x07
    2526:	8f 81       	ldd	r24, Y+7	; 0x07
    2528:	98 85       	ldd	r25, Y+8	; 0x08
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	91 05       	cpc	r25, r1
    252e:	49 f1       	breq	.+82     	; 0x2582 <DIO_enuSetPinValue+0x9a>
    2530:	2f 81       	ldd	r18, Y+7	; 0x07
    2532:	38 85       	ldd	r19, Y+8	; 0x08
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	2c f4       	brge	.+10     	; 0x2544 <DIO_enuSetPinValue+0x5c>
    253a:	8f 81       	ldd	r24, Y+7	; 0x07
    253c:	98 85       	ldd	r25, Y+8	; 0x08
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	61 f0       	breq	.+24     	; 0x255a <DIO_enuSetPinValue+0x72>
    2542:	d5 c0       	rjmp	.+426    	; 0x26ee <DIO_enuSetPinValue+0x206>
    2544:	2f 81       	ldd	r18, Y+7	; 0x07
    2546:	38 85       	ldd	r19, Y+8	; 0x08
    2548:	22 30       	cpi	r18, 0x02	; 2
    254a:	31 05       	cpc	r19, r1
    254c:	71 f1       	breq	.+92     	; 0x25aa <DIO_enuSetPinValue+0xc2>
    254e:	8f 81       	ldd	r24, Y+7	; 0x07
    2550:	98 85       	ldd	r25, Y+8	; 0x08
    2552:	83 30       	cpi	r24, 0x03	; 3
    2554:	91 05       	cpc	r25, r1
    2556:	e9 f1       	breq	.+122    	; 0x25d2 <DIO_enuSetPinValue+0xea>
    2558:	ca c0       	rjmp	.+404    	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTA: SET_BIT(PORTA_Register,Copy_u8PinId);break;
    255a:	ab e3       	ldi	r26, 0x3B	; 59
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	eb e3       	ldi	r30, 0x3B	; 59
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	48 2f       	mov	r20, r24
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 2e       	mov	r0, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <DIO_enuSetPinValue+0x90>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	0a 94       	dec	r0
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <DIO_enuSetPinValue+0x8c>
    257c:	84 2b       	or	r24, r20
    257e:	8c 93       	st	X, r24
    2580:	b6 c0       	rjmp	.+364    	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTB: SET_BIT(PORTB_Register,Copy_u8PinId);break;
    2582:	a8 e3       	ldi	r26, 0x38	; 56
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e8 e3       	ldi	r30, 0x38	; 56
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <DIO_enuSetPinValue+0xb8>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <DIO_enuSetPinValue+0xb4>
    25a4:	84 2b       	or	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	a2 c0       	rjmp	.+324    	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTC: SET_BIT(PORTC_Register,Copy_u8PinId);break;
    25aa:	a5 e3       	ldi	r26, 0x35	; 53
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e5 e3       	ldi	r30, 0x35	; 53
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <DIO_enuSetPinValue+0xe0>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <DIO_enuSetPinValue+0xdc>
    25cc:	84 2b       	or	r24, r20
    25ce:	8c 93       	st	X, r24
    25d0:	8e c0       	rjmp	.+284    	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTD: SET_BIT(PORTD_Register,Copy_u8PinId);break;
    25d2:	a2 e3       	ldi	r26, 0x32	; 50
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e2 e3       	ldi	r30, 0x32	; 50
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	48 2f       	mov	r20, r24
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_enuSetPinValue+0x108>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_enuSetPinValue+0x104>
    25f4:	84 2b       	or	r24, r20
    25f6:	8c 93       	st	X, r24
    25f8:	7a c0       	rjmp	.+244    	; 0x26ee <DIO_enuSetPinValue+0x206>
			default:/* Wrong ID */ break;
			}
		}

		else if(Copy_u8PinVal==DIO_u8_LOW){
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	88 23       	and	r24, r24
    25fe:	09 f0       	breq	.+2      	; 0x2602 <DIO_enuSetPinValue+0x11a>
    2600:	76 c0       	rjmp	.+236    	; 0x26ee <DIO_enuSetPinValue+0x206>
			switch(Copy_u8PortId){
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	3e 83       	std	Y+6, r19	; 0x06
    260a:	2d 83       	std	Y+5, r18	; 0x05
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	91 05       	cpc	r25, r1
    2614:	59 f1       	breq	.+86     	; 0x266c <DIO_enuSetPinValue+0x184>
    2616:	2d 81       	ldd	r18, Y+5	; 0x05
    2618:	3e 81       	ldd	r19, Y+6	; 0x06
    261a:	22 30       	cpi	r18, 0x02	; 2
    261c:	31 05       	cpc	r19, r1
    261e:	2c f4       	brge	.+10     	; 0x262a <DIO_enuSetPinValue+0x142>
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f0       	breq	.+26     	; 0x2642 <DIO_enuSetPinValue+0x15a>
    2628:	62 c0       	rjmp	.+196    	; 0x26ee <DIO_enuSetPinValue+0x206>
    262a:	2d 81       	ldd	r18, Y+5	; 0x05
    262c:	3e 81       	ldd	r19, Y+6	; 0x06
    262e:	22 30       	cpi	r18, 0x02	; 2
    2630:	31 05       	cpc	r19, r1
    2632:	89 f1       	breq	.+98     	; 0x2696 <DIO_enuSetPinValue+0x1ae>
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	83 30       	cpi	r24, 0x03	; 3
    263a:	91 05       	cpc	r25, r1
    263c:	09 f4       	brne	.+2      	; 0x2640 <DIO_enuSetPinValue+0x158>
    263e:	40 c0       	rjmp	.+128    	; 0x26c0 <DIO_enuSetPinValue+0x1d8>
    2640:	56 c0       	rjmp	.+172    	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTA: CLR_BIT(PORTA_Register,Copy_u8PinId);break;
    2642:	ab e3       	ldi	r26, 0x3B	; 59
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	eb e3       	ldi	r30, 0x3B	; 59
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	48 2f       	mov	r20, r24
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 2e       	mov	r0, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_enuSetPinValue+0x178>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_enuSetPinValue+0x174>
    2664:	80 95       	com	r24
    2666:	84 23       	and	r24, r20
    2668:	8c 93       	st	X, r24
    266a:	41 c0       	rjmp	.+130    	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTB: CLR_BIT(PORTB_Register,Copy_u8PinId);break;
    266c:	a8 e3       	ldi	r26, 0x38	; 56
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e8 e3       	ldi	r30, 0x38	; 56
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	48 2f       	mov	r20, r24
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	02 2e       	mov	r0, r18
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_enuSetPinValue+0x1a2>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	0a 94       	dec	r0
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_enuSetPinValue+0x19e>
    268e:	80 95       	com	r24
    2690:	84 23       	and	r24, r20
    2692:	8c 93       	st	X, r24
    2694:	2c c0       	rjmp	.+88     	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTC: CLR_BIT(PORTC_Register,Copy_u8PinId);break;
    2696:	a5 e3       	ldi	r26, 0x35	; 53
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e5 e3       	ldi	r30, 0x35	; 53
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	48 2f       	mov	r20, r24
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 2e       	mov	r0, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <DIO_enuSetPinValue+0x1cc>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <DIO_enuSetPinValue+0x1c8>
    26b8:	80 95       	com	r24
    26ba:	84 23       	and	r24, r20
    26bc:	8c 93       	st	X, r24
    26be:	17 c0       	rjmp	.+46     	; 0x26ee <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTD: CLR_BIT(PORTD_Register,Copy_u8PinId);break;
    26c0:	a2 e3       	ldi	r26, 0x32	; 50
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e2 e3       	ldi	r30, 0x32	; 50
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	48 2f       	mov	r20, r24
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	02 2e       	mov	r0, r18
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <DIO_enuSetPinValue+0x1f6>
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	0a 94       	dec	r0
    26e0:	e2 f7       	brpl	.-8      	; 0x26da <DIO_enuSetPinValue+0x1f2>
    26e2:	80 95       	com	r24
    26e4:	84 23       	and	r24, r20
    26e6:	8c 93       	st	X, r24
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <DIO_enuSetPinValue+0x206>
			}
		}
	}
	//if there
	else {
		LOC_enuErrorStatus = Dio_enuInvalidInput;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	89 83       	std	Y+1, r24	; 0x01
	}
return LOC_enuErrorStatus;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f0:	28 96       	adiw	r28, 0x08	; 8
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <DIO_enuSetPinDirection>:
//**************************************************************************************************
// DDR function (Direction)
DIO_tenuErrorStatus DIO_enuSetPinDirection(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDir){
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	28 97       	sbiw	r28, 0x08	; 8
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	8a 83       	std	Y+2, r24	; 0x02
    2718:	6b 83       	std	Y+3, r22	; 0x03
    271a:	4c 83       	std	Y+4, r20	; 0x04
	//Error flag
	DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    271c:	19 82       	std	Y+1, r1	; 0x01

	// Check if inputs are in valid range
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7))
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	84 30       	cpi	r24, 0x04	; 4
    2722:	08 f0       	brcs	.+2      	; 0x2726 <DIO_enuSetPinDirection+0x24>
    2724:	ef c0       	rjmp	.+478    	; 0x2904 <DIO_enuSetPinDirection+0x202>
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	88 30       	cpi	r24, 0x08	; 8
    272a:	08 f0       	brcs	.+2      	; 0x272e <DIO_enuSetPinDirection+0x2c>
    272c:	eb c0       	rjmp	.+470    	; 0x2904 <DIO_enuSetPinDirection+0x202>
	{
		if(Copy_u8PinDir==DIO_u8_OUTPUT){
    272e:	8c 81       	ldd	r24, Y+4	; 0x04
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	09 f0       	breq	.+2      	; 0x2736 <DIO_enuSetPinDirection+0x34>
    2734:	6f c0       	rjmp	.+222    	; 0x2814 <DIO_enuSetPinDirection+0x112>
			switch(Copy_u8PortId){
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	38 87       	std	Y+8, r19	; 0x08
    273e:	2f 83       	std	Y+7, r18	; 0x07
    2740:	8f 81       	ldd	r24, Y+7	; 0x07
    2742:	98 85       	ldd	r25, Y+8	; 0x08
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	91 05       	cpc	r25, r1
    2748:	49 f1       	breq	.+82     	; 0x279c <DIO_enuSetPinDirection+0x9a>
    274a:	2f 81       	ldd	r18, Y+7	; 0x07
    274c:	38 85       	ldd	r19, Y+8	; 0x08
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	2c f4       	brge	.+10     	; 0x275e <DIO_enuSetPinDirection+0x5c>
    2754:	8f 81       	ldd	r24, Y+7	; 0x07
    2756:	98 85       	ldd	r25, Y+8	; 0x08
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	61 f0       	breq	.+24     	; 0x2774 <DIO_enuSetPinDirection+0x72>
    275c:	d5 c0       	rjmp	.+426    	; 0x2908 <DIO_enuSetPinDirection+0x206>
    275e:	2f 81       	ldd	r18, Y+7	; 0x07
    2760:	38 85       	ldd	r19, Y+8	; 0x08
    2762:	22 30       	cpi	r18, 0x02	; 2
    2764:	31 05       	cpc	r19, r1
    2766:	71 f1       	breq	.+92     	; 0x27c4 <DIO_enuSetPinDirection+0xc2>
    2768:	8f 81       	ldd	r24, Y+7	; 0x07
    276a:	98 85       	ldd	r25, Y+8	; 0x08
    276c:	83 30       	cpi	r24, 0x03	; 3
    276e:	91 05       	cpc	r25, r1
    2770:	e9 f1       	breq	.+122    	; 0x27ec <DIO_enuSetPinDirection+0xea>
    2772:	ca c0       	rjmp	.+404    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTA: SET_BIT(DDRA_Register,Copy_u8PinId);break;
    2774:	aa e3       	ldi	r26, 0x3A	; 58
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	ea e3       	ldi	r30, 0x3A	; 58
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	48 2f       	mov	r20, r24
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	02 2e       	mov	r0, r18
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <DIO_enuSetPinDirection+0x90>
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	0a 94       	dec	r0
    2794:	e2 f7       	brpl	.-8      	; 0x278e <DIO_enuSetPinDirection+0x8c>
    2796:	84 2b       	or	r24, r20
    2798:	8c 93       	st	X, r24
    279a:	b6 c0       	rjmp	.+364    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTB: SET_BIT(DDRB_Register,Copy_u8PinId);break;
    279c:	a7 e3       	ldi	r26, 0x37	; 55
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e7 e3       	ldi	r30, 0x37	; 55
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	48 2f       	mov	r20, r24
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	02 2e       	mov	r0, r18
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <DIO_enuSetPinDirection+0xb8>
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	0a 94       	dec	r0
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <DIO_enuSetPinDirection+0xb4>
    27be:	84 2b       	or	r24, r20
    27c0:	8c 93       	st	X, r24
    27c2:	a2 c0       	rjmp	.+324    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTC: SET_BIT(DDRC_Register,Copy_u8PinId);break;
    27c4:	a4 e3       	ldi	r26, 0x34	; 52
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e4 e3       	ldi	r30, 0x34	; 52
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	48 2f       	mov	r20, r24
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	02 2e       	mov	r0, r18
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <DIO_enuSetPinDirection+0xe0>
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	0a 94       	dec	r0
    27e4:	e2 f7       	brpl	.-8      	; 0x27de <DIO_enuSetPinDirection+0xdc>
    27e6:	84 2b       	or	r24, r20
    27e8:	8c 93       	st	X, r24
    27ea:	8e c0       	rjmp	.+284    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTD: SET_BIT(DDRD_Register,Copy_u8PinId);break;
    27ec:	a1 e3       	ldi	r26, 0x31	; 49
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e1 e3       	ldi	r30, 0x31	; 49
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	48 2f       	mov	r20, r24
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	02 2e       	mov	r0, r18
    2804:	02 c0       	rjmp	.+4      	; 0x280a <DIO_enuSetPinDirection+0x108>
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	0a 94       	dec	r0
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <DIO_enuSetPinDirection+0x104>
    280e:	84 2b       	or	r24, r20
    2810:	8c 93       	st	X, r24
    2812:	7a c0       	rjmp	.+244    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			default:/* Wrong ID */ break;
			}
		}

		else if(Copy_u8PinDir==DIO_u8_INPUT){
    2814:	8c 81       	ldd	r24, Y+4	; 0x04
    2816:	88 23       	and	r24, r24
    2818:	09 f0       	breq	.+2      	; 0x281c <DIO_enuSetPinDirection+0x11a>
    281a:	76 c0       	rjmp	.+236    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			switch(Copy_u8PortId){
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	3e 83       	std	Y+6, r19	; 0x06
    2824:	2d 83       	std	Y+5, r18	; 0x05
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	81 30       	cpi	r24, 0x01	; 1
    282c:	91 05       	cpc	r25, r1
    282e:	59 f1       	breq	.+86     	; 0x2886 <DIO_enuSetPinDirection+0x184>
    2830:	2d 81       	ldd	r18, Y+5	; 0x05
    2832:	3e 81       	ldd	r19, Y+6	; 0x06
    2834:	22 30       	cpi	r18, 0x02	; 2
    2836:	31 05       	cpc	r19, r1
    2838:	2c f4       	brge	.+10     	; 0x2844 <DIO_enuSetPinDirection+0x142>
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f0       	breq	.+26     	; 0x285c <DIO_enuSetPinDirection+0x15a>
    2842:	62 c0       	rjmp	.+196    	; 0x2908 <DIO_enuSetPinDirection+0x206>
    2844:	2d 81       	ldd	r18, Y+5	; 0x05
    2846:	3e 81       	ldd	r19, Y+6	; 0x06
    2848:	22 30       	cpi	r18, 0x02	; 2
    284a:	31 05       	cpc	r19, r1
    284c:	89 f1       	breq	.+98     	; 0x28b0 <DIO_enuSetPinDirection+0x1ae>
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	91 05       	cpc	r25, r1
    2856:	09 f4       	brne	.+2      	; 0x285a <DIO_enuSetPinDirection+0x158>
    2858:	40 c0       	rjmp	.+128    	; 0x28da <DIO_enuSetPinDirection+0x1d8>
    285a:	56 c0       	rjmp	.+172    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTA: CLR_BIT(DDRA_Register,Copy_u8PinId);break;
    285c:	aa e3       	ldi	r26, 0x3A	; 58
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	ea e3       	ldi	r30, 0x3A	; 58
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	48 2f       	mov	r20, r24
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 2e       	mov	r0, r18
    2874:	02 c0       	rjmp	.+4      	; 0x287a <DIO_enuSetPinDirection+0x178>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	0a 94       	dec	r0
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <DIO_enuSetPinDirection+0x174>
    287e:	80 95       	com	r24
    2880:	84 23       	and	r24, r20
    2882:	8c 93       	st	X, r24
    2884:	41 c0       	rjmp	.+130    	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTB: CLR_BIT(DDRB_Register,Copy_u8PinId);break;
    2886:	a7 e3       	ldi	r26, 0x37	; 55
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e7 e3       	ldi	r30, 0x37	; 55
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	48 2f       	mov	r20, r24
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	02 2e       	mov	r0, r18
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <DIO_enuSetPinDirection+0x1a2>
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	0a 94       	dec	r0
    28a6:	e2 f7       	brpl	.-8      	; 0x28a0 <DIO_enuSetPinDirection+0x19e>
    28a8:	80 95       	com	r24
    28aa:	84 23       	and	r24, r20
    28ac:	8c 93       	st	X, r24
    28ae:	2c c0       	rjmp	.+88     	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTC: CLR_BIT(DDRC_Register,Copy_u8PinId);break;
    28b0:	a4 e3       	ldi	r26, 0x34	; 52
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e4 e3       	ldi	r30, 0x34	; 52
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	48 2f       	mov	r20, r24
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	02 2e       	mov	r0, r18
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <DIO_enuSetPinDirection+0x1cc>
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	0a 94       	dec	r0
    28d0:	e2 f7       	brpl	.-8      	; 0x28ca <DIO_enuSetPinDirection+0x1c8>
    28d2:	80 95       	com	r24
    28d4:	84 23       	and	r24, r20
    28d6:	8c 93       	st	X, r24
    28d8:	17 c0       	rjmp	.+46     	; 0x2908 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTD: CLR_BIT(DDRD_Register,Copy_u8PinId);break;
    28da:	a1 e3       	ldi	r26, 0x31	; 49
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e1 e3       	ldi	r30, 0x31	; 49
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	48 2f       	mov	r20, r24
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 2e       	mov	r0, r18
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <DIO_enuSetPinDirection+0x1f6>
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	0a 94       	dec	r0
    28fa:	e2 f7       	brpl	.-8      	; 0x28f4 <DIO_enuSetPinDirection+0x1f2>
    28fc:	80 95       	com	r24
    28fe:	84 23       	and	r24, r20
    2900:	8c 93       	st	X, r24
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <DIO_enuSetPinDirection+0x206>
			}
		}
	}
	//if there
	else {
		LOC_enuErrorStatus = Dio_enuInvalidInput;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	89 83       	std	Y+1, r24	; 0x01
	}
return LOC_enuErrorStatus;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
}
    290a:	28 96       	adiw	r28, 0x08	; 8
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <DIO_u8GetPinValue>:

//**************************************************************************
// Func for PIN REGISTER (INPUT)
DIO_tenuErrorStatus DIO_u8GetPinValue (u8 Copy_u8PortId,u8 Copy_u8PinId, u8*Add_u8Result){
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	27 97       	sbiw	r28, 0x07	; 7
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	8a 83       	std	Y+2, r24	; 0x02
    2932:	6b 83       	std	Y+3, r22	; 0x03
    2934:	5d 83       	std	Y+5, r21	; 0x05
    2936:	4c 83       	std	Y+4, r20	; 0x04
	// Define a LOC variable which store the value
	DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    2938:	19 82       	std	Y+1, r1	; 0x01
	// Valid Range
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7))
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	84 30       	cpi	r24, 0x04	; 4
    293e:	08 f0       	brcs	.+2      	; 0x2942 <DIO_u8GetPinValue+0x26>
    2940:	75 c0       	rjmp	.+234    	; 0x2a2c <DIO_u8GetPinValue+0x110>
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	88 30       	cpi	r24, 0x08	; 8
    2946:	08 f0       	brcs	.+2      	; 0x294a <DIO_u8GetPinValue+0x2e>
    2948:	71 c0       	rjmp	.+226    	; 0x2a2c <DIO_u8GetPinValue+0x110>
	{
		switch(Copy_u8PortId){
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	3f 83       	std	Y+7, r19	; 0x07
    2952:	2e 83       	std	Y+6, r18	; 0x06
    2954:	4e 81       	ldd	r20, Y+6	; 0x06
    2956:	5f 81       	ldd	r21, Y+7	; 0x07
    2958:	41 30       	cpi	r20, 0x01	; 1
    295a:	51 05       	cpc	r21, r1
    295c:	59 f1       	breq	.+86     	; 0x29b4 <DIO_u8GetPinValue+0x98>
    295e:	8e 81       	ldd	r24, Y+6	; 0x06
    2960:	9f 81       	ldd	r25, Y+7	; 0x07
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	91 05       	cpc	r25, r1
    2966:	34 f4       	brge	.+12     	; 0x2974 <DIO_u8GetPinValue+0x58>
    2968:	2e 81       	ldd	r18, Y+6	; 0x06
    296a:	3f 81       	ldd	r19, Y+7	; 0x07
    296c:	21 15       	cp	r18, r1
    296e:	31 05       	cpc	r19, r1
    2970:	69 f0       	breq	.+26     	; 0x298c <DIO_u8GetPinValue+0x70>
    2972:	5e c0       	rjmp	.+188    	; 0x2a30 <DIO_u8GetPinValue+0x114>
    2974:	4e 81       	ldd	r20, Y+6	; 0x06
    2976:	5f 81       	ldd	r21, Y+7	; 0x07
    2978:	42 30       	cpi	r20, 0x02	; 2
    297a:	51 05       	cpc	r21, r1
    297c:	79 f1       	breq	.+94     	; 0x29dc <DIO_u8GetPinValue+0xc0>
    297e:	8e 81       	ldd	r24, Y+6	; 0x06
    2980:	9f 81       	ldd	r25, Y+7	; 0x07
    2982:	83 30       	cpi	r24, 0x03	; 3
    2984:	91 05       	cpc	r25, r1
    2986:	09 f4       	brne	.+2      	; 0x298a <DIO_u8GetPinValue+0x6e>
    2988:	3d c0       	rjmp	.+122    	; 0x2a04 <DIO_u8GetPinValue+0xe8>
    298a:	52 c0       	rjmp	.+164    	; 0x2a30 <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTA: *Add_u8Result=GET_BIT(PINA_Register,Copy_u8PinId);break;
    298c:	e9 e3       	ldi	r30, 0x39	; 57
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a9 01       	movw	r20, r18
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <DIO_u8GetPinValue+0x88>
    29a0:	55 95       	asr	r21
    29a2:	47 95       	ror	r20
    29a4:	8a 95       	dec	r24
    29a6:	e2 f7       	brpl	.-8      	; 0x29a0 <DIO_u8GetPinValue+0x84>
    29a8:	ca 01       	movw	r24, r20
    29aa:	81 70       	andi	r24, 0x01	; 1
    29ac:	ec 81       	ldd	r30, Y+4	; 0x04
    29ae:	fd 81       	ldd	r31, Y+5	; 0x05
    29b0:	80 83       	st	Z, r24
    29b2:	3e c0       	rjmp	.+124    	; 0x2a30 <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTB: *Add_u8Result=GET_BIT(PINB_Register,Copy_u8PinId);break;
    29b4:	e6 e3       	ldi	r30, 0x36	; 54
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	88 2f       	mov	r24, r24
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a9 01       	movw	r20, r18
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <DIO_u8GetPinValue+0xb0>
    29c8:	55 95       	asr	r21
    29ca:	47 95       	ror	r20
    29cc:	8a 95       	dec	r24
    29ce:	e2 f7       	brpl	.-8      	; 0x29c8 <DIO_u8GetPinValue+0xac>
    29d0:	ca 01       	movw	r24, r20
    29d2:	81 70       	andi	r24, 0x01	; 1
    29d4:	ec 81       	ldd	r30, Y+4	; 0x04
    29d6:	fd 81       	ldd	r31, Y+5	; 0x05
    29d8:	80 83       	st	Z, r24
    29da:	2a c0       	rjmp	.+84     	; 0x2a30 <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTC: *Add_u8Result=GET_BIT(PINC_Register,Copy_u8PinId);break;
    29dc:	e3 e3       	ldi	r30, 0x33	; 51
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	a9 01       	movw	r20, r18
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <DIO_u8GetPinValue+0xd8>
    29f0:	55 95       	asr	r21
    29f2:	47 95       	ror	r20
    29f4:	8a 95       	dec	r24
    29f6:	e2 f7       	brpl	.-8      	; 0x29f0 <DIO_u8GetPinValue+0xd4>
    29f8:	ca 01       	movw	r24, r20
    29fa:	81 70       	andi	r24, 0x01	; 1
    29fc:	ec 81       	ldd	r30, Y+4	; 0x04
    29fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2a00:	80 83       	st	Z, r24
    2a02:	16 c0       	rjmp	.+44     	; 0x2a30 <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTD: *Add_u8Result=GET_BIT(PIND_Register,Copy_u8PinId);break;
    2a04:	e0 e3       	ldi	r30, 0x30	; 48
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a9 01       	movw	r20, r18
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <DIO_u8GetPinValue+0x100>
    2a18:	55 95       	asr	r21
    2a1a:	47 95       	ror	r20
    2a1c:	8a 95       	dec	r24
    2a1e:	e2 f7       	brpl	.-8      	; 0x2a18 <DIO_u8GetPinValue+0xfc>
    2a20:	ca 01       	movw	r24, r20
    2a22:	81 70       	andi	r24, 0x01	; 1
    2a24:	ec 81       	ldd	r30, Y+4	; 0x04
    2a26:	fd 81       	ldd	r31, Y+5	; 0x05
    2a28:	80 83       	st	Z, r24
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <DIO_u8GetPinValue+0x114>
		default:/* Wrong ID */ break;
		}
	}
	else
		LOC_enuErrorStatus = Dio_enuInvalidInput;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	89 83       	std	Y+1, r24	; 0x01
return LOC_enuErrorStatus;
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a32:	27 96       	adiw	r28, 0x07	; 7
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <DIO_enuSetPortDirection>:

//*************************************************************************************
// Determine the whole direction of a port
DIO_tenuErrorStatus DIO_enuSetPortDirection(u8 Copy_u8PortId , u8 Copy_u8PortDir){
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <DIO_enuSetPortDirection+0x6>
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <DIO_enuSetPortDirection+0x8>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	8a 83       	std	Y+2, r24	; 0x02
    2a54:	6b 83       	std	Y+3, r22	; 0x03

	    //Error flag
		DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    2a56:	19 82       	std	Y+1, r1	; 0x01

		// Check if inputs are in valid range
		if(Copy_u8PortId <= DIO_u8_PORTD)
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	84 30       	cpi	r24, 0x04	; 4
    2a5c:	98 f5       	brcc	.+102    	; 0x2ac4 <DIO_enuSetPortDirection+0x80>
		{
				switch(Copy_u8PortId)
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	3d 83       	std	Y+5, r19	; 0x05
    2a66:	2c 83       	std	Y+4, r18	; 0x04
    2a68:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	91 05       	cpc	r25, r1
    2a70:	d1 f0       	breq	.+52     	; 0x2aa6 <DIO_enuSetPortDirection+0x62>
    2a72:	2c 81       	ldd	r18, Y+4	; 0x04
    2a74:	3d 81       	ldd	r19, Y+5	; 0x05
    2a76:	22 30       	cpi	r18, 0x02	; 2
    2a78:	31 05       	cpc	r19, r1
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <DIO_enuSetPortDirection+0x42>
    2a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	61 f0       	breq	.+24     	; 0x2a9c <DIO_enuSetPortDirection+0x58>
    2a84:	21 c0       	rjmp	.+66     	; 0x2ac8 <DIO_enuSetPortDirection+0x84>
    2a86:	2c 81       	ldd	r18, Y+4	; 0x04
    2a88:	3d 81       	ldd	r19, Y+5	; 0x05
    2a8a:	22 30       	cpi	r18, 0x02	; 2
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	81 f0       	breq	.+32     	; 0x2ab0 <DIO_enuSetPortDirection+0x6c>
    2a90:	8c 81       	ldd	r24, Y+4	; 0x04
    2a92:	9d 81       	ldd	r25, Y+5	; 0x05
    2a94:	83 30       	cpi	r24, 0x03	; 3
    2a96:	91 05       	cpc	r25, r1
    2a98:	81 f0       	breq	.+32     	; 0x2aba <DIO_enuSetPortDirection+0x76>
    2a9a:	16 c0       	rjmp	.+44     	; 0x2ac8 <DIO_enuSetPortDirection+0x84>
				{
				case DIO_u8_PORTA: DDRA_Register=Copy_u8PortDir;break;
    2a9c:	ea e3       	ldi	r30, 0x3A	; 58
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	80 83       	st	Z, r24
    2aa4:	11 c0       	rjmp	.+34     	; 0x2ac8 <DIO_enuSetPortDirection+0x84>
				case DIO_u8_PORTB: DDRB_Register=Copy_u8PortDir;break;
    2aa6:	e7 e3       	ldi	r30, 0x37	; 55
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	80 83       	st	Z, r24
    2aae:	0c c0       	rjmp	.+24     	; 0x2ac8 <DIO_enuSetPortDirection+0x84>
				case DIO_u8_PORTC: DDRC_Register=Copy_u8PortDir;break;
    2ab0:	e4 e3       	ldi	r30, 0x34	; 52
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	80 83       	st	Z, r24
    2ab8:	07 c0       	rjmp	.+14     	; 0x2ac8 <DIO_enuSetPortDirection+0x84>
				case DIO_u8_PORTD: DDRD_Register=Copy_u8PortDir;break;
    2aba:	e1 e3       	ldi	r30, 0x31	; 49
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	80 83       	st	Z, r24
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <DIO_enuSetPortDirection+0x84>
				default:/* Wrong ID */ break;
				}
		}
		//if there IS an error
		else
			LOC_enuErrorStatus = Dio_enuInvalidInput;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	89 83       	std	Y+1, r24	; 0x01

return LOC_enuErrorStatus;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <DIO_enuSetPortValue>:
//*************************************************************************************
// Determine the values of the PORT REG (OUTPUT ONLY)
DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8PortId , u8 Copy_u8PortVal){
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <DIO_enuSetPortValue+0x6>
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <DIO_enuSetPortValue+0x8>
    2ae2:	0f 92       	push	r0
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
    2aea:	6b 83       	std	Y+3, r22	; 0x03

	    //Error flag
		DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    2aec:	19 82       	std	Y+1, r1	; 0x01

		// Check if inputs are in valid range
		if(Copy_u8PortId <= DIO_u8_PORTD)
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	84 30       	cpi	r24, 0x04	; 4
    2af2:	98 f5       	brcc	.+102    	; 0x2b5a <DIO_enuSetPortValue+0x80>
		{
				switch(Copy_u8PortId)
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	3d 83       	std	Y+5, r19	; 0x05
    2afc:	2c 83       	std	Y+4, r18	; 0x04
    2afe:	8c 81       	ldd	r24, Y+4	; 0x04
    2b00:	9d 81       	ldd	r25, Y+5	; 0x05
    2b02:	81 30       	cpi	r24, 0x01	; 1
    2b04:	91 05       	cpc	r25, r1
    2b06:	d1 f0       	breq	.+52     	; 0x2b3c <DIO_enuSetPortValue+0x62>
    2b08:	2c 81       	ldd	r18, Y+4	; 0x04
    2b0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b0c:	22 30       	cpi	r18, 0x02	; 2
    2b0e:	31 05       	cpc	r19, r1
    2b10:	2c f4       	brge	.+10     	; 0x2b1c <DIO_enuSetPortValue+0x42>
    2b12:	8c 81       	ldd	r24, Y+4	; 0x04
    2b14:	9d 81       	ldd	r25, Y+5	; 0x05
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <DIO_enuSetPortValue+0x58>
    2b1a:	21 c0       	rjmp	.+66     	; 0x2b5e <DIO_enuSetPortValue+0x84>
    2b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b20:	22 30       	cpi	r18, 0x02	; 2
    2b22:	31 05       	cpc	r19, r1
    2b24:	81 f0       	breq	.+32     	; 0x2b46 <DIO_enuSetPortValue+0x6c>
    2b26:	8c 81       	ldd	r24, Y+4	; 0x04
    2b28:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2a:	83 30       	cpi	r24, 0x03	; 3
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	81 f0       	breq	.+32     	; 0x2b50 <DIO_enuSetPortValue+0x76>
    2b30:	16 c0       	rjmp	.+44     	; 0x2b5e <DIO_enuSetPortValue+0x84>
				{
				case DIO_u8_PORTA: PORTA_Register=Copy_u8PortVal;break;
    2b32:	eb e3       	ldi	r30, 0x3B	; 59
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	80 83       	st	Z, r24
    2b3a:	11 c0       	rjmp	.+34     	; 0x2b5e <DIO_enuSetPortValue+0x84>
				case DIO_u8_PORTB: PORTB_Register=Copy_u8PortVal;break;
    2b3c:	e8 e3       	ldi	r30, 0x38	; 56
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	80 83       	st	Z, r24
    2b44:	0c c0       	rjmp	.+24     	; 0x2b5e <DIO_enuSetPortValue+0x84>
				case DIO_u8_PORTC: PORTC_Register=Copy_u8PortVal;break;
    2b46:	e5 e3       	ldi	r30, 0x35	; 53
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	80 83       	st	Z, r24
    2b4e:	07 c0       	rjmp	.+14     	; 0x2b5e <DIO_enuSetPortValue+0x84>
				case DIO_u8_PORTD: PORTD_Register=Copy_u8PortVal;break;
    2b50:	e2 e3       	ldi	r30, 0x32	; 50
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	80 83       	st	Z, r24
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <DIO_enuSetPortValue+0x84>
				default:/* Wrong ID */ break;
				}
		}
		//if there IS an error
		else
			LOC_enuErrorStatus = Dio_enuInvalidInput;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	89 83       	std	Y+1, r24	; 0x01

return LOC_enuErrorStatus;
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <ADC_voidInit>:
#include "../../../INCLUDE/MCAL/ADC/ADC_cfg.h"
#include "../../../INCLUDE/MCAL/ADC/ADC_priv.h"
#include "../../../SERVICES/bit_utilies.h"
#include "../../../SERVICES/std_types.h"

void ADC_voidInit(){
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	// VREF
#if ADC_VREF==ADC_VREF_AVCC_5V
	SET_BIT(ADCMUX_Register,ADC_VREF_ADMUX_REFS0);
    2b78:	a7 e2       	ldi	r26, 0x27	; 39
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e7 e2       	ldi	r30, 0x27	; 39
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	80 64       	ori	r24, 0x40	; 64
    2b84:	8c 93       	st	X, r24
	CLR_BIT(ADCMUX_Register,ADC_VREF_ADMUX_REFS1);
    2b86:	a7 e2       	ldi	r26, 0x27	; 39
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e7 e2       	ldi	r30, 0x27	; 39
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	8f 77       	andi	r24, 0x7F	; 127
    2b92:	8c 93       	st	X, r24
#else
	#warning INVALID VREF
#endif
	// AADJUSTMENT
#if ADC_ADJUSTMENT==ADC_ADJUSTMENT_RIGHT
	CLR_BIT(ADCMUX_Register,ADC_ADJUSTMENT_ADMUX_ADLAR);
    2b94:	a7 e2       	ldi	r26, 0x27	; 39
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e7 e2       	ldi	r30, 0x27	; 39
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8f 7d       	andi	r24, 0xDF	; 223
    2ba0:	8c 93       	st	X, r24
#else
	#warning INVALID ADJUSTMENT
#endif
	//PRESCALER
#if   ADC_PRESCALER==ADC_PRESCALER_128
	   SET_BIT(ADCSRA_Register,ADC_PRESCALER_ADCSRA_ADPS0);
    2ba2:	a6 e2       	ldi	r26, 0x26	; 38
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e6 e2       	ldi	r30, 0x26	; 38
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	81 60       	ori	r24, 0x01	; 1
    2bae:	8c 93       	st	X, r24
	   SET_BIT(ADCSRA_Register,ADC_PRESCALER_ADCSRA_ADPS1);
    2bb0:	a6 e2       	ldi	r26, 0x26	; 38
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e6 e2       	ldi	r30, 0x26	; 38
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	82 60       	ori	r24, 0x02	; 2
    2bbc:	8c 93       	st	X, r24
	   SET_BIT(ADCSRA_Register,ADC_PRESCALER_ADCSRA_ADPS2);
    2bbe:	a6 e2       	ldi	r26, 0x26	; 38
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e6 e2       	ldi	r30, 0x26	; 38
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	84 60       	ori	r24, 0x04	; 4
    2bca:	8c 93       	st	X, r24
#else
#warning INVALID PRESCALER
#endif
	   // ADC Analog Channel
#if ADC_ANALOG_CHANNEL==ADC_ANALOG_CHANNEL_PIN0
	   ADCSRA_Register&=0xE0;
    2bcc:	a6 e2       	ldi	r26, 0x26	; 38
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e6 e2       	ldi	r30, 0x26	; 38
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 7e       	andi	r24, 0xE0	; 224
    2bd8:	8c 93       	st	X, r24
#elif ADC_ANALOG_CHANNEL==ADC_ANALOG_CHANNEL_PIN7
	   ADCSRA_Register&=0xE7;
#else
		#warning INVALID ANALOG CHANNEL
#endif
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <ADC_voidGetRead>:
void ADC_voidGetRead(u16*Add_u16AdcRead){
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <ADC_voidGetRead+0x6>
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	9b 83       	std	Y+3, r25	; 0x03
    2bee:	8a 83       	std	Y+2, r24	; 0x02
	//ENABLE
	SET_BIT(ADCSRA_Register,ADC_ENABLE_ADCSRA_ADEN);
    2bf0:	a6 e2       	ldi	r26, 0x26	; 38
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e6 e2       	ldi	r30, 0x26	; 38
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 68       	ori	r24, 0x80	; 128
    2bfc:	8c 93       	st	X, r24
	// Star Conversion
	SET_BIT(ADCSRA_Register,ADC_START_CONVERSION);
    2bfe:	a6 e2       	ldi	r26, 0x26	; 38
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e6 e2       	ldi	r30, 0x26	; 38
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	80 64       	ori	r24, 0x40	; 64
    2c0a:	8c 93       	st	X, r24
	u8 Loc_u8AdcTimeOutCounter=200;
    2c0c:	88 ec       	ldi	r24, 0xC8	; 200
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <ADC_voidGetRead+0x38>
	while(GET_BIT(ADCSRA_Register,ADC_START_CONVERSION)==ADC_CONVERSION_IN_PROGRESS && Loc_u8AdcTimeOutCounter>0){
		Loc_u8AdcTimeOutCounter--;
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	81 50       	subi	r24, 0x01	; 1
    2c16:	89 83       	std	Y+1, r24	; 0x01
	//ENABLE
	SET_BIT(ADCSRA_Register,ADC_ENABLE_ADCSRA_ADEN);
	// Star Conversion
	SET_BIT(ADCSRA_Register,ADC_START_CONVERSION);
	u8 Loc_u8AdcTimeOutCounter=200;
	while(GET_BIT(ADCSRA_Register,ADC_START_CONVERSION)==ADC_CONVERSION_IN_PROGRESS && Loc_u8AdcTimeOutCounter>0){
    2c18:	e6 e2       	ldi	r30, 0x26	; 38
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	82 95       	swap	r24
    2c20:	86 95       	lsr	r24
    2c22:	86 95       	lsr	r24
    2c24:	83 70       	andi	r24, 0x03	; 3
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	81 70       	andi	r24, 0x01	; 1
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	98 2f       	mov	r25, r24
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	89 27       	eor	r24, r25
    2c34:	88 23       	and	r24, r24
    2c36:	19 f4       	brne	.+6      	; 0x2c3e <ADC_voidGetRead+0x5e>
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	88 23       	and	r24, r24
    2c3c:	51 f7       	brne	.-44     	; 0x2c12 <ADC_voidGetRead+0x32>
		Loc_u8AdcTimeOutCounter--;
	}
	if(Loc_u8AdcTimeOutCounter==ADC_TimeOut){
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	88 23       	and	r24, r24
    2c42:	41 f0       	breq	.+16     	; 0x2c54 <ADC_voidGetRead+0x74>
		#warning ADC TIME OUT
	}
	else
		*Add_u16AdcRead=ADC_Register;
    2c44:	e4 e2       	ldi	r30, 0x24	; 36
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
}
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <ADC_voidDisable>:
void ADC_voidDisable(){
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Register,ADC_ENABLE_ADCSRA_ADEN);
    2c68:	a6 e2       	ldi	r26, 0x26	; 38
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e6 e2       	ldi	r30, 0x26	; 38
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	8f 77       	andi	r24, 0x7F	; 127
    2c74:	8c 93       	st	X, r24
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <Seg_vidInit>:
/*********************Seg_vidSegInit*********************/
/* USE: Initialize the 7 segments according to user cfg */
/* PARAMETERS: The struct carries cfg                   */
/* RETURN: No Return                                    */
/********************************************************/
void Seg_vidInit(Seg_tCfg*Add_structSeg){
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <Seg_vidInit+0x6>
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPortDirection(Add_structSeg->Port,DIO_u8_PORT_OUTPUT);
    2c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8e:	80 81       	ld	r24, Z
    2c90:	83 70       	andi	r24, 0x03	; 3
    2c92:	6f ef       	ldi	r22, 0xFF	; 255
    2c94:	0e 94 22 15 	call	0x2a44	; 0x2a44 <DIO_enuSetPortDirection>
}
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <Seg_vidOn>:
/* USE: Write on 7 Segment                              */
/* PARAMETERS: - The struct carries cfg                 */
/*             - The number to be written               */
/* RETURN: No Return                                    */
/********************************************************/
void Seg_vidOn(Seg_tCfg*Add_structSeg,u8 Add_u8SegVal){
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <Seg_vidOn+0x6>
    2ca8:	0f 92       	push	r0
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	6b 83       	std	Y+3, r22	; 0x03
	if((Add_structSeg->Common_Type) == Seg_CommCathode){
    2cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb8:	80 81       	ld	r24, Z
    2cba:	84 70       	andi	r24, 0x04	; 4
    2cbc:	88 23       	and	r24, r24
    2cbe:	89 f0       	breq	.+34     	; 0x2ce2 <Seg_vidOn+0x40>
		DIO_enuSetPortValue(Add_structSeg->Port,segment_7[Add_u8SegVal]);
    2cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc4:	80 81       	ld	r24, Z
    2cc6:	83 70       	andi	r24, 0x03	; 3
    2cc8:	28 2f       	mov	r18, r24
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e8 59       	subi	r30, 0x98	; 152
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	90 81       	ld	r25, Z
    2cd8:	82 2f       	mov	r24, r18
    2cda:	69 2f       	mov	r22, r25
    2cdc:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
    2ce0:	18 c0       	rjmp	.+48     	; 0x2d12 <Seg_vidOn+0x70>
	}
	else if((Add_structSeg->Common_Type) == Seg_CommAnode){
    2ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce6:	80 81       	ld	r24, Z
    2ce8:	84 70       	andi	r24, 0x04	; 4
    2cea:	88 23       	and	r24, r24
    2cec:	91 f4       	brne	.+36     	; 0x2d12 <Seg_vidOn+0x70>
			DIO_enuSetPortValue(Add_structSeg->Port,~(segment_7[Add_u8SegVal]));
    2cee:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf2:	80 81       	ld	r24, Z
    2cf4:	83 70       	andi	r24, 0x03	; 3
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e8 59       	subi	r30, 0x98	; 152
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	80 81       	ld	r24, Z
    2d06:	98 2f       	mov	r25, r24
    2d08:	90 95       	com	r25
    2d0a:	82 2f       	mov	r24, r18
    2d0c:	69 2f       	mov	r22, r25
    2d0e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
	}
}
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <Stepper_voidInit>:
/*******************Stepper_voidInit********************/
/* USE : Initialize the Stepper according to user cfg  */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Stepper_voidInit(Stepper_tstructCfg*Add_structStepper){
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <Stepper_voidInit+0x6>
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPortDirection(Add_structStepper->Port,0b00001111);
    2d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d30:	80 81       	ld	r24, Z
    2d32:	83 70       	andi	r24, 0x03	; 3
    2d34:	6f e0       	ldi	r22, 0x0F	; 15
    2d36:	0e 94 22 15 	call	0x2a44	; 0x2a44 <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(Add_structStepper->Port,0);
    2d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3e:	80 81       	ld	r24, Z
    2d40:	83 70       	andi	r24, 0x03	; 3
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
}
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <Stepper_voidOn>:
/*             - Stepper Direction                     */
/*             - Stepper Rotation Degree               */
/*             - Stepper mode                          */
/* RETURN: No Return                                   */
/*******************************************************/
void Stepper_voidOn(Stepper_tstructCfg*Add_structStepper,u8 Copy_u8StepperDirection,u8 Copy_u8StepperStepMode,u8 Copy_u8StepperDegree){
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	a8 97       	sbiw	r28, 0x28	; 40
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	9f 8f       	std	Y+31, r25	; 0x1f
    2d68:	8e 8f       	std	Y+30, r24	; 0x1e
    2d6a:	68 a3       	std	Y+32, r22	; 0x20
    2d6c:	49 a3       	std	Y+33, r20	; 0x21
    2d6e:	2a a3       	std	Y+34, r18	; 0x22
	u8 StepperCounter=0;
    2d70:	1d 8e       	std	Y+29, r1	; 0x1d


	switch(Copy_u8StepperStepMode){
    2d72:	89 a1       	ldd	r24, Y+33	; 0x21
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	38 a7       	std	Y+40, r19	; 0x28
    2d7a:	2f a3       	std	Y+39, r18	; 0x27
    2d7c:	8f a1       	ldd	r24, Y+39	; 0x27
    2d7e:	98 a5       	ldd	r25, Y+40	; 0x28
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <Stepper_voidOn+0x34>
    2d84:	a1 c0       	rjmp	.+322    	; 0x2ec8 <Stepper_voidOn+0x176>
    2d86:	2f a1       	ldd	r18, Y+39	; 0x27
    2d88:	38 a5       	ldd	r19, Y+40	; 0x28
    2d8a:	21 30       	cpi	r18, 0x01	; 1
    2d8c:	31 05       	cpc	r19, r1
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <Stepper_voidOn+0x40>
    2d90:	35 c1       	rjmp	.+618    	; 0x2ffc <Stepper_voidOn+0x2aa>


	case Stepper_FULL_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    2d92:	1d 8e       	std	Y+29, r1	; 0x1d
    2d94:	93 c0       	rjmp	.+294    	; 0x2ebc <Stepper_voidOn+0x16a>
			switch(Copy_u8StepperDirection){
    2d96:	88 a1       	ldd	r24, Y+32	; 0x20
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	3e a3       	std	Y+38, r19	; 0x26
    2d9e:	2d a3       	std	Y+37, r18	; 0x25
    2da0:	8d a1       	ldd	r24, Y+37	; 0x25
    2da2:	9e a1       	ldd	r25, Y+38	; 0x26
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	51 f0       	breq	.+20     	; 0x2dbc <Stepper_voidOn+0x6a>
    2da8:	2d a1       	ldd	r18, Y+37	; 0x25
    2daa:	3e a1       	ldd	r19, Y+38	; 0x26
    2dac:	21 30       	cpi	r18, 0x01	; 1
    2dae:	31 05       	cpc	r19, r1
    2db0:	49 f4       	brne	.+18     	; 0x2dc4 <Stepper_voidOn+0x72>
				case Stepper_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00000001);break;
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	61 e0       	ldi	r22, 0x01	; 1
    2db6:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <Stepper_voidOn+0x72>
				case Stepper_COUNTER_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00001000);break;
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	68 e0       	ldi	r22, 0x08	; 8
    2dc0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a0 ea       	ldi	r26, 0xA0	; 160
    2dca:	b0 e4       	ldi	r27, 0x40	; 64
    2dcc:	89 8f       	std	Y+25, r24	; 0x19
    2dce:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd0:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	4a ef       	ldi	r20, 0xFA	; 250
    2de2:	54 e4       	ldi	r21, 0x44	; 68
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8d 8b       	std	Y+21, r24	; 0x15
    2dee:	9e 8b       	std	Y+22, r25	; 0x16
    2df0:	af 8b       	std	Y+23, r26	; 0x17
    2df2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2df4:	6d 89       	ldd	r22, Y+21	; 0x15
    2df6:	7e 89       	ldd	r23, Y+22	; 0x16
    2df8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <Stepper_voidOn+0xc4>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	8b 8b       	std	Y+19, r24	; 0x13
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <Stepper_voidOn+0x142>
	else if (__tmp > 65535)
    2e16:	6d 89       	ldd	r22, Y+21	; 0x15
    2e18:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	3f ef       	ldi	r19, 0xFF	; 255
    2e22:	4f e7       	ldi	r20, 0x7F	; 127
    2e24:	57 e4       	ldi	r21, 0x47	; 71
    2e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2a:	18 16       	cp	r1, r24
    2e2c:	4c f5       	brge	.+82     	; 0x2e80 <Stepper_voidOn+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9c 8b       	std	Y+20, r25	; 0x14
    2e54:	8b 8b       	std	Y+19, r24	; 0x13
    2e56:	0f c0       	rjmp	.+30     	; 0x2e76 <Stepper_voidOn+0x124>
    2e58:	88 ec       	ldi	r24, 0xC8	; 200
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9a 8b       	std	Y+18, r25	; 0x12
    2e5e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e60:	89 89       	ldd	r24, Y+17	; 0x11
    2e62:	9a 89       	ldd	r25, Y+18	; 0x12
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <Stepper_voidOn+0x112>
    2e68:	9a 8b       	std	Y+18, r25	; 0x12
    2e6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9c 8b       	std	Y+20, r25	; 0x14
    2e74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	8b 89       	ldd	r24, Y+19	; 0x13
    2e78:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	69 f7       	brne	.-38     	; 0x2e58 <Stepper_voidOn+0x106>
    2e7e:	14 c0       	rjmp	.+40     	; 0x2ea8 <Stepper_voidOn+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9c 8b       	std	Y+20, r25	; 0x14
    2e92:	8b 8b       	std	Y+19, r24	; 0x13
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	98 8b       	std	Y+16, r25	; 0x10
    2e9a:	8f 87       	std	Y+15, r24	; 0x0f
    2e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <Stepper_voidOn+0x14e>
    2ea4:	98 8b       	std	Y+16, r25	; 0x10
    2ea6:	8f 87       	std	Y+15, r24	; 0x0f
			}
			_delay_ms(5);
			DIO_enuSetPortValue(Add_structStepper->Port,0);
    2ea8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2eaa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2eac:	80 81       	ld	r24, Z
    2eae:	83 70       	andi	r24, 0x03	; 3
    2eb0:	60 e0       	ldi	r22, 0x00	; 0
    2eb2:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>

	switch(Copy_u8StepperStepMode){


	case Stepper_FULL_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    2eb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb8:	8f 5f       	subi	r24, 0xFF	; 255
    2eba:	8d 8f       	std	Y+29, r24	; 0x1d
    2ebc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ebe:	8a a1       	ldd	r24, Y+34	; 0x22
    2ec0:	98 17       	cp	r25, r24
    2ec2:	08 f4       	brcc	.+2      	; 0x2ec6 <Stepper_voidOn+0x174>
    2ec4:	68 cf       	rjmp	.-304    	; 0x2d96 <Stepper_voidOn+0x44>
    2ec6:	9a c0       	rjmp	.+308    	; 0x2ffc <Stepper_voidOn+0x2aa>
		}
	break;


	case Stepper_HALF_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    2ec8:	1d 8e       	std	Y+29, r1	; 0x1d
    2eca:	93 c0       	rjmp	.+294    	; 0x2ff2 <Stepper_voidOn+0x2a0>
			switch(Copy_u8StepperDirection){
    2ecc:	88 a1       	ldd	r24, Y+32	; 0x20
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	3c a3       	std	Y+36, r19	; 0x24
    2ed4:	2b a3       	std	Y+35, r18	; 0x23
    2ed6:	8b a1       	ldd	r24, Y+35	; 0x23
    2ed8:	9c a1       	ldd	r25, Y+36	; 0x24
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	51 f0       	breq	.+20     	; 0x2ef2 <Stepper_voidOn+0x1a0>
    2ede:	2b a1       	ldd	r18, Y+35	; 0x23
    2ee0:	3c a1       	ldd	r19, Y+36	; 0x24
    2ee2:	21 30       	cpi	r18, 0x01	; 1
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	49 f4       	brne	.+18     	; 0x2efa <Stepper_voidOn+0x1a8>
				case Stepper_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00000011);break;
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	63 e0       	ldi	r22, 0x03	; 3
    2eec:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
    2ef0:	04 c0       	rjmp	.+8      	; 0x2efa <Stepper_voidOn+0x1a8>
				case Stepper_COUNTER_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00001100);break;
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	6c e0       	ldi	r22, 0x0C	; 12
    2ef6:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 ea       	ldi	r26, 0xA0	; 160
    2f00:	b0 e4       	ldi	r27, 0x40	; 64
    2f02:	8b 87       	std	Y+11, r24	; 0x0b
    2f04:	9c 87       	std	Y+12, r25	; 0x0c
    2f06:	ad 87       	std	Y+13, r26	; 0x0d
    2f08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a ef       	ldi	r20, 0xFA	; 250
    2f18:	54 e4       	ldi	r21, 0x44	; 68
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	8f 83       	std	Y+7, r24	; 0x07
    2f24:	98 87       	std	Y+8, r25	; 0x08
    2f26:	a9 87       	std	Y+9, r26	; 0x09
    2f28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	2c f4       	brge	.+10     	; 0x2f4c <Stepper_voidOn+0x1fa>
		__ticks = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <Stepper_voidOn+0x278>
	else if (__tmp > 65535)
    2f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4e:	78 85       	ldd	r23, Y+8	; 0x08
    2f50:	89 85       	ldd	r24, Y+9	; 0x09
    2f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	4c f5       	brge	.+82     	; 0x2fb6 <Stepper_voidOn+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <Stepper_voidOn+0x25a>
    2f8e:	88 ec       	ldi	r24, 0xC8	; 200
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9c 83       	std	Y+4, r25	; 0x04
    2f94:	8b 83       	std	Y+3, r24	; 0x03
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <Stepper_voidOn+0x248>
    2f9e:	9c 83       	std	Y+4, r25	; 0x04
    2fa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <Stepper_voidOn+0x23c>
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <Stepper_voidOn+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb8:	78 85       	ldd	r23, Y+8	; 0x08
    2fba:	89 85       	ldd	r24, Y+9	; 0x09
    2fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	9a 83       	std	Y+2, r25	; 0x02
    2fd0:	89 83       	std	Y+1, r24	; 0x01
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <Stepper_voidOn+0x284>
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(5);
			DIO_enuSetPortValue(Add_structStepper->Port,0);
    2fde:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2fe0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2fe2:	80 81       	ld	r24, Z
    2fe4:	83 70       	andi	r24, 0x03	; 3
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
		}
	break;


	case Stepper_HALF_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    2fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fee:	8f 5f       	subi	r24, 0xFF	; 255
    2ff0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ff2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ff4:	8a a1       	ldd	r24, Y+34	; 0x22
    2ff6:	98 17       	cp	r25, r24
    2ff8:	08 f4       	brcc	.+2      	; 0x2ffc <Stepper_voidOn+0x2aa>
    2ffa:	68 cf       	rjmp	.-304    	; 0x2ecc <Stepper_voidOn+0x17a>
			_delay_ms(5);
			DIO_enuSetPortValue(Add_structStepper->Port,0);
		}
	break;
	}
}
    2ffc:	a8 96       	adiw	r28, 0x28	; 40
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <Led_vidLedInit>:
/*********************Led_vidLedInit********************/
/* USE : Initialize the Led according to user cfg      */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Led_vidLedInit(Led_tCfg*Add_structLed){
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	00 d0       	rcall	.+0      	; 0x3014 <Led_vidLedInit+0x6>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(Add_structLed->Led_NestStruct.Port,Add_structLed->Pin,DIO_u8_OUTPUT);
    301c:	e9 81       	ldd	r30, Y+1	; 0x01
    301e:	fa 81       	ldd	r31, Y+2	; 0x02
    3020:	81 81       	ldd	r24, Z+1	; 0x01
    3022:	83 70       	andi	r24, 0x03	; 3
    3024:	e9 81       	ldd	r30, Y+1	; 0x01
    3026:	fa 81       	ldd	r31, Y+2	; 0x02
    3028:	90 81       	ld	r25, Z
    302a:	69 2f       	mov	r22, r25
    302c:	41 e0       	ldi	r20, 0x01	; 1
    302e:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <Led_vidOn>:
/***********************Led_vidOn***********************/
/* USE : Turn on Led                                   */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Led_vidOn(Led_tCfg*Add_structLed){
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <Led_vidOn+0x6>
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	9a 83       	std	Y+2, r25	; 0x02
    3048:	89 83       	std	Y+1, r24	; 0x01
	if((Add_structLed->Led_NestStruct.Active_Status) == Led_Active_High){
    304a:	e9 81       	ldd	r30, Y+1	; 0x01
    304c:	fa 81       	ldd	r31, Y+2	; 0x02
    304e:	81 81       	ldd	r24, Z+1	; 0x01
    3050:	84 70       	andi	r24, 0x04	; 4
    3052:	88 23       	and	r24, r24
    3054:	89 f0       	breq	.+34     	; 0x3078 <Led_vidOn+0x3c>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_High;
    3056:	e9 81       	ldd	r30, Y+1	; 0x01
    3058:	fa 81       	ldd	r31, Y+2	; 0x02
    305a:	81 81       	ldd	r24, Z+1	; 0x01
    305c:	88 60       	ori	r24, 0x08	; 8
    305e:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port,Add_structLed->Pin,Led_Active_High_High);
    3060:	e9 81       	ldd	r30, Y+1	; 0x01
    3062:	fa 81       	ldd	r31, Y+2	; 0x02
    3064:	81 81       	ldd	r24, Z+1	; 0x01
    3066:	83 70       	andi	r24, 0x03	; 3
    3068:	e9 81       	ldd	r30, Y+1	; 0x01
    306a:	fa 81       	ldd	r31, Y+2	; 0x02
    306c:	90 81       	ld	r25, Z
    306e:	69 2f       	mov	r22, r25
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    3076:	16 c0       	rjmp	.+44     	; 0x30a4 <Led_vidOn+0x68>
	}
	else if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_Low){
    3078:	e9 81       	ldd	r30, Y+1	; 0x01
    307a:	fa 81       	ldd	r31, Y+2	; 0x02
    307c:	81 81       	ldd	r24, Z+1	; 0x01
    307e:	84 70       	andi	r24, 0x04	; 4
    3080:	88 23       	and	r24, r24
    3082:	81 f4       	brne	.+32     	; 0x30a4 <Led_vidOn+0x68>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_High;
    3084:	e9 81       	ldd	r30, Y+1	; 0x01
    3086:	fa 81       	ldd	r31, Y+2	; 0x02
    3088:	81 81       	ldd	r24, Z+1	; 0x01
    308a:	87 7f       	andi	r24, 0xF7	; 247
    308c:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port,Add_structLed->Pin,Led_Active_Low_High);
    308e:	e9 81       	ldd	r30, Y+1	; 0x01
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	81 81       	ldd	r24, Z+1	; 0x01
    3094:	83 70       	andi	r24, 0x03	; 3
    3096:	e9 81       	ldd	r30, Y+1	; 0x01
    3098:	fa 81       	ldd	r31, Y+2	; 0x02
    309a:	90 81       	ld	r25, Z
    309c:	69 2f       	mov	r22, r25
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
	}
}
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <Led_vidOff>:
/***********************Led_vidOff**********************/
/* USE : Turn off Led                                  */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Led_vidOff(Led_tCfg*Add_structLed){
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <Led_vidOff+0x6>
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	9a 83       	std	Y+2, r25	; 0x02
    30ba:	89 83       	std	Y+1, r24	; 0x01
	if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_High){
    30bc:	e9 81       	ldd	r30, Y+1	; 0x01
    30be:	fa 81       	ldd	r31, Y+2	; 0x02
    30c0:	81 81       	ldd	r24, Z+1	; 0x01
    30c2:	84 70       	andi	r24, 0x04	; 4
    30c4:	88 23       	and	r24, r24
    30c6:	89 f0       	breq	.+34     	; 0x30ea <Led_vidOff+0x3c>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_Low;
    30c8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ca:	fa 81       	ldd	r31, Y+2	; 0x02
    30cc:	81 81       	ldd	r24, Z+1	; 0x01
    30ce:	87 7f       	andi	r24, 0xF7	; 247
    30d0:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_High_Low);
    30d2:	e9 81       	ldd	r30, Y+1	; 0x01
    30d4:	fa 81       	ldd	r31, Y+2	; 0x02
    30d6:	81 81       	ldd	r24, Z+1	; 0x01
    30d8:	83 70       	andi	r24, 0x03	; 3
    30da:	e9 81       	ldd	r30, Y+1	; 0x01
    30dc:	fa 81       	ldd	r31, Y+2	; 0x02
    30de:	90 81       	ld	r25, Z
    30e0:	69 2f       	mov	r22, r25
    30e2:	40 e0       	ldi	r20, 0x00	; 0
    30e4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    30e8:	16 c0       	rjmp	.+44     	; 0x3116 <Led_vidOff+0x68>
	}
	else if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_Low){
    30ea:	e9 81       	ldd	r30, Y+1	; 0x01
    30ec:	fa 81       	ldd	r31, Y+2	; 0x02
    30ee:	81 81       	ldd	r24, Z+1	; 0x01
    30f0:	84 70       	andi	r24, 0x04	; 4
    30f2:	88 23       	and	r24, r24
    30f4:	81 f4       	brne	.+32     	; 0x3116 <Led_vidOff+0x68>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_Low;
    30f6:	e9 81       	ldd	r30, Y+1	; 0x01
    30f8:	fa 81       	ldd	r31, Y+2	; 0x02
    30fa:	81 81       	ldd	r24, Z+1	; 0x01
    30fc:	88 60       	ori	r24, 0x08	; 8
    30fe:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_Low_Low);
    3100:	e9 81       	ldd	r30, Y+1	; 0x01
    3102:	fa 81       	ldd	r31, Y+2	; 0x02
    3104:	81 81       	ldd	r24, Z+1	; 0x01
    3106:	83 70       	andi	r24, 0x03	; 3
    3108:	e9 81       	ldd	r30, Y+1	; 0x01
    310a:	fa 81       	ldd	r31, Y+2	; 0x02
    310c:	90 81       	ld	r25, Z
    310e:	69 2f       	mov	r22, r25
    3110:	41 e0       	ldi	r20, 0x01	; 1
    3112:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
	}
}
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <Led_vidToggle>:
/***********************Led_vidToggle*******************/
/* USE : Toggle Led                                    */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Led_vidToggle(Led_tCfg*Add_structLed){
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	00 d0       	rcall	.+0      	; 0x3126 <Led_vidToggle+0x6>
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	9a 83       	std	Y+2, r25	; 0x02
    312c:	89 83       	std	Y+1, r24	; 0x01

	if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_High){
    312e:	e9 81       	ldd	r30, Y+1	; 0x01
    3130:	fa 81       	ldd	r31, Y+2	; 0x02
    3132:	81 81       	ldd	r24, Z+1	; 0x01
    3134:	84 70       	andi	r24, 0x04	; 4
    3136:	88 23       	and	r24, r24
    3138:	79 f1       	breq	.+94     	; 0x3198 <Led_vidToggle+0x78>
			if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_High_Low){ //OFF-->ON
    313a:	e9 81       	ldd	r30, Y+1	; 0x01
    313c:	fa 81       	ldd	r31, Y+2	; 0x02
    313e:	81 81       	ldd	r24, Z+1	; 0x01
    3140:	88 70       	andi	r24, 0x08	; 8
    3142:	88 23       	and	r24, r24
    3144:	89 f4       	brne	.+34     	; 0x3168 <Led_vidToggle+0x48>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_High_High);
    3146:	e9 81       	ldd	r30, Y+1	; 0x01
    3148:	fa 81       	ldd	r31, Y+2	; 0x02
    314a:	81 81       	ldd	r24, Z+1	; 0x01
    314c:	83 70       	andi	r24, 0x03	; 3
    314e:	e9 81       	ldd	r30, Y+1	; 0x01
    3150:	fa 81       	ldd	r31, Y+2	; 0x02
    3152:	90 81       	ld	r25, Z
    3154:	69 2f       	mov	r22, r25
    3156:	41 e0       	ldi	r20, 0x01	; 1
    3158:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_High;
    315c:	e9 81       	ldd	r30, Y+1	; 0x01
    315e:	fa 81       	ldd	r31, Y+2	; 0x02
    3160:	81 81       	ldd	r24, Z+1	; 0x01
    3162:	88 60       	ori	r24, 0x08	; 8
    3164:	81 83       	std	Z+1, r24	; 0x01
    3166:	4b c0       	rjmp	.+150    	; 0x31fe <Led_vidToggle+0xde>
			}


			else if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_High_High){ //ON-->OFF
    3168:	e9 81       	ldd	r30, Y+1	; 0x01
    316a:	fa 81       	ldd	r31, Y+2	; 0x02
    316c:	81 81       	ldd	r24, Z+1	; 0x01
    316e:	88 70       	andi	r24, 0x08	; 8
    3170:	88 23       	and	r24, r24
    3172:	09 f4       	brne	.+2      	; 0x3176 <Led_vidToggle+0x56>
    3174:	44 c0       	rjmp	.+136    	; 0x31fe <Led_vidToggle+0xde>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_High_Low);
    3176:	e9 81       	ldd	r30, Y+1	; 0x01
    3178:	fa 81       	ldd	r31, Y+2	; 0x02
    317a:	81 81       	ldd	r24, Z+1	; 0x01
    317c:	83 70       	andi	r24, 0x03	; 3
    317e:	e9 81       	ldd	r30, Y+1	; 0x01
    3180:	fa 81       	ldd	r31, Y+2	; 0x02
    3182:	90 81       	ld	r25, Z
    3184:	69 2f       	mov	r22, r25
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_Low;
    318c:	e9 81       	ldd	r30, Y+1	; 0x01
    318e:	fa 81       	ldd	r31, Y+2	; 0x02
    3190:	81 81       	ldd	r24, Z+1	; 0x01
    3192:	87 7f       	andi	r24, 0xF7	; 247
    3194:	81 83       	std	Z+1, r24	; 0x01
    3196:	33 c0       	rjmp	.+102    	; 0x31fe <Led_vidToggle+0xde>
			}
		}


	else if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_Low){
    3198:	e9 81       	ldd	r30, Y+1	; 0x01
    319a:	fa 81       	ldd	r31, Y+2	; 0x02
    319c:	81 81       	ldd	r24, Z+1	; 0x01
    319e:	84 70       	andi	r24, 0x04	; 4
    31a0:	88 23       	and	r24, r24
    31a2:	69 f5       	brne	.+90     	; 0x31fe <Led_vidToggle+0xde>
			if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_Low_Low){
    31a4:	e9 81       	ldd	r30, Y+1	; 0x01
    31a6:	fa 81       	ldd	r31, Y+2	; 0x02
    31a8:	81 81       	ldd	r24, Z+1	; 0x01
    31aa:	88 70       	andi	r24, 0x08	; 8
    31ac:	88 23       	and	r24, r24
    31ae:	89 f0       	breq	.+34     	; 0x31d2 <Led_vidToggle+0xb2>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_Low_High);
    31b0:	e9 81       	ldd	r30, Y+1	; 0x01
    31b2:	fa 81       	ldd	r31, Y+2	; 0x02
    31b4:	81 81       	ldd	r24, Z+1	; 0x01
    31b6:	83 70       	andi	r24, 0x03	; 3
    31b8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ba:	fa 81       	ldd	r31, Y+2	; 0x02
    31bc:	90 81       	ld	r25, Z
    31be:	69 2f       	mov	r22, r25
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_High;
    31c6:	e9 81       	ldd	r30, Y+1	; 0x01
    31c8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ca:	81 81       	ldd	r24, Z+1	; 0x01
    31cc:	87 7f       	andi	r24, 0xF7	; 247
    31ce:	81 83       	std	Z+1, r24	; 0x01
    31d0:	16 c0       	rjmp	.+44     	; 0x31fe <Led_vidToggle+0xde>
			}


			else if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_Low_High){
    31d2:	e9 81       	ldd	r30, Y+1	; 0x01
    31d4:	fa 81       	ldd	r31, Y+2	; 0x02
    31d6:	81 81       	ldd	r24, Z+1	; 0x01
    31d8:	88 70       	andi	r24, 0x08	; 8
    31da:	88 23       	and	r24, r24
    31dc:	81 f4       	brne	.+32     	; 0x31fe <Led_vidToggle+0xde>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_Low_Low);
    31de:	e9 81       	ldd	r30, Y+1	; 0x01
    31e0:	fa 81       	ldd	r31, Y+2	; 0x02
    31e2:	81 81       	ldd	r24, Z+1	; 0x01
    31e4:	83 70       	andi	r24, 0x03	; 3
    31e6:	e9 81       	ldd	r30, Y+1	; 0x01
    31e8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ea:	90 81       	ld	r25, Z
    31ec:	69 2f       	mov	r22, r25
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_Low;
    31f4:	e9 81       	ldd	r30, Y+1	; 0x01
    31f6:	fa 81       	ldd	r31, Y+2	; 0x02
    31f8:	81 81       	ldd	r24, Z+1	; 0x01
    31fa:	88 60       	ori	r24, 0x08	; 8
    31fc:	81 83       	std	Z+1, r24	; 0x01
			}
		}

}
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	cf 91       	pop	r28
    3204:	df 91       	pop	r29
    3206:	08 95       	ret

00003208 <Lcd_vidEnablePulse>:
/********************Lcd_vidEnablePulse*****************/
/* USE : Send Pulse to LCD to enable it                */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_vidEnablePulse(Lcd_tstrucCfg*Add_strucLcd){
    3208:	df 93       	push	r29
    320a:	cf 93       	push	r28
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	60 97       	sbiw	r28, 0x10	; 16
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	98 8b       	std	Y+16, r25	; 0x10
    321e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_HIGH);
    3220:	ef 85       	ldd	r30, Y+15	; 0x0f
    3222:	f8 89       	ldd	r31, Y+16	; 0x10
    3224:	81 81       	ldd	r24, Z+1	; 0x01
    3226:	ef 85       	ldd	r30, Y+15	; 0x0f
    3228:	f8 89       	ldd	r31, Y+16	; 0x10
    322a:	94 81       	ldd	r25, Z+4	; 0x04
    322c:	69 2f       	mov	r22, r25
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	a0 e0       	ldi	r26, 0x00	; 0
    323a:	b0 e4       	ldi	r27, 0x40	; 64
    323c:	8b 87       	std	Y+11, r24	; 0x0b
    323e:	9c 87       	std	Y+12, r25	; 0x0c
    3240:	ad 87       	std	Y+13, r26	; 0x0d
    3242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3244:	6b 85       	ldd	r22, Y+11	; 0x0b
    3246:	7c 85       	ldd	r23, Y+12	; 0x0c
    3248:	8d 85       	ldd	r24, Y+13	; 0x0d
    324a:	9e 85       	ldd	r25, Y+14	; 0x0e
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	4a ef       	ldi	r20, 0xFA	; 250
    3252:	54 e4       	ldi	r21, 0x44	; 68
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	8f 83       	std	Y+7, r24	; 0x07
    325e:	98 87       	std	Y+8, r25	; 0x08
    3260:	a9 87       	std	Y+9, r26	; 0x09
    3262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3264:	6f 81       	ldd	r22, Y+7	; 0x07
    3266:	78 85       	ldd	r23, Y+8	; 0x08
    3268:	89 85       	ldd	r24, Y+9	; 0x09
    326a:	9a 85       	ldd	r25, Y+10	; 0x0a
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	40 e8       	ldi	r20, 0x80	; 128
    3272:	5f e3       	ldi	r21, 0x3F	; 63
    3274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3278:	88 23       	and	r24, r24
    327a:	2c f4       	brge	.+10     	; 0x3286 <Lcd_vidEnablePulse+0x7e>
		__ticks = 1;
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	9e 83       	std	Y+6, r25	; 0x06
    3282:	8d 83       	std	Y+5, r24	; 0x05
    3284:	3f c0       	rjmp	.+126    	; 0x3304 <Lcd_vidEnablePulse+0xfc>
	else if (__tmp > 65535)
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	3f ef       	ldi	r19, 0xFF	; 255
    3292:	4f e7       	ldi	r20, 0x7F	; 127
    3294:	57 e4       	ldi	r21, 0x47	; 71
    3296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    329a:	18 16       	cp	r1, r24
    329c:	4c f5       	brge	.+82     	; 0x32f0 <Lcd_vidEnablePulse+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329e:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e2       	ldi	r20, 0x20	; 32
    32ac:	51 e4       	ldi	r21, 0x41	; 65
    32ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	bc 01       	movw	r22, r24
    32b8:	cd 01       	movw	r24, r26
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	9e 83       	std	Y+6, r25	; 0x06
    32c4:	8d 83       	std	Y+5, r24	; 0x05
    32c6:	0f c0       	rjmp	.+30     	; 0x32e6 <Lcd_vidEnablePulse+0xde>
    32c8:	88 ec       	ldi	r24, 0xC8	; 200
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	9c 83       	std	Y+4, r25	; 0x04
    32ce:	8b 83       	std	Y+3, r24	; 0x03
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	9c 81       	ldd	r25, Y+4	; 0x04
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	f1 f7       	brne	.-4      	; 0x32d4 <Lcd_vidEnablePulse+0xcc>
    32d8:	9c 83       	std	Y+4, r25	; 0x04
    32da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	9e 83       	std	Y+6, r25	; 0x06
    32e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	69 f7       	brne	.-38     	; 0x32c8 <Lcd_vidEnablePulse+0xc0>
    32ee:	14 c0       	rjmp	.+40     	; 0x3318 <Lcd_vidEnablePulse+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f0:	6f 81       	ldd	r22, Y+7	; 0x07
    32f2:	78 85       	ldd	r23, Y+8	; 0x08
    32f4:	89 85       	ldd	r24, Y+9	; 0x09
    32f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	9e 83       	std	Y+6, r25	; 0x06
    3302:	8d 83       	std	Y+5, r24	; 0x05
    3304:	8d 81       	ldd	r24, Y+5	; 0x05
    3306:	9e 81       	ldd	r25, Y+6	; 0x06
    3308:	9a 83       	std	Y+2, r25	; 0x02
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	9a 81       	ldd	r25, Y+2	; 0x02
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	f1 f7       	brne	.-4      	; 0x3310 <Lcd_vidEnablePulse+0x108>
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_LOW);
    3318:	ef 85       	ldd	r30, Y+15	; 0x0f
    331a:	f8 89       	ldd	r31, Y+16	; 0x10
    331c:	81 81       	ldd	r24, Z+1	; 0x01
    331e:	ef 85       	ldd	r30, Y+15	; 0x0f
    3320:	f8 89       	ldd	r31, Y+16	; 0x10
    3322:	94 81       	ldd	r25, Z+4	; 0x04
    3324:	69 2f       	mov	r22, r25
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
}
    332c:	60 96       	adiw	r28, 0x10	; 16
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <Lcd_vidSendCommand>:
/* USE : Send Command to LCD Processor                 */
/* PARAMETERS: - The struct carries cfg                */
/*             - The Command represented in Binary     */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_vidSendCommand(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_CommandVal){
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	00 d0       	rcall	.+0      	; 0x3344 <Lcd_vidSendCommand+0x6>
    3344:	0f 92       	push	r0
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	6b 83       	std	Y+3, r22	; 0x03
	//RS
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_LOW);
    3350:	e9 81       	ldd	r30, Y+1	; 0x01
    3352:	fa 81       	ldd	r31, Y+2	; 0x02
    3354:	81 81       	ldd	r24, Z+1	; 0x01
    3356:	e9 81       	ldd	r30, Y+1	; 0x01
    3358:	fa 81       	ldd	r31, Y+2	; 0x02
    335a:	92 81       	ldd	r25, Z+2	; 0x02
    335c:	69 2f       	mov	r22, r25
    335e:	40 e0       	ldi	r20, 0x00	; 0
    3360:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
	// Send Command
	DIO_enuSetPortValue(Add_strucLcd->DataPortId,Copy_CommandVal);
    3364:	e9 81       	ldd	r30, Y+1	; 0x01
    3366:	fa 81       	ldd	r31, Y+2	; 0x02
    3368:	80 81       	ld	r24, Z
    336a:	6b 81       	ldd	r22, Y+3	; 0x03
    336c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
	Lcd_vidEnablePulse(Add_strucLcd);
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	0e 94 04 19 	call	0x3208	; 0x3208 <Lcd_vidEnablePulse>
}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	08 95       	ret

00003384 <Lcd_vidSendData>:
/* USE : Send Data to LCD                              */
/* PARAMETERS: - The struct carries cfg                */
/*             - The Data Value                        */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_vidSendData(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_DataVal){
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	00 d0       	rcall	.+0      	; 0x338a <Lcd_vidSendData+0x6>
    338a:	0f 92       	push	r0
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	6b 83       	std	Y+3, r22	; 0x03
	//RS
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_HIGH);
    3396:	e9 81       	ldd	r30, Y+1	; 0x01
    3398:	fa 81       	ldd	r31, Y+2	; 0x02
    339a:	81 81       	ldd	r24, Z+1	; 0x01
    339c:	e9 81       	ldd	r30, Y+1	; 0x01
    339e:	fa 81       	ldd	r31, Y+2	; 0x02
    33a0:	92 81       	ldd	r25, Z+2	; 0x02
    33a2:	69 2f       	mov	r22, r25
    33a4:	41 e0       	ldi	r20, 0x01	; 1
    33a6:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
	// Send Command
	DIO_enuSetPortValue(Add_strucLcd->DataPortId,Copy_DataVal);
    33aa:	e9 81       	ldd	r30, Y+1	; 0x01
    33ac:	fa 81       	ldd	r31, Y+2	; 0x02
    33ae:	80 81       	ld	r24, Z
    33b0:	6b 81       	ldd	r22, Y+3	; 0x03
    33b2:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
	Lcd_vidEnablePulse(Add_strucLcd);
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	0e 94 04 19 	call	0x3208	; 0x3208 <Lcd_vidEnablePulse>
}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <Lcd_vidInit>:
/************************Lcd_vidInit********************/
/* USE : Initialize the LCD according to user cfg      */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_vidInit(Lcd_tstrucCfg*Add_strucLcd){
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	ac 97       	sbiw	r28, 0x2c	; 44
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	9c a7       	std	Y+44, r25	; 0x2c
    33e0:	8b a7       	std	Y+43, r24	; 0x2b

	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_OUTPUT);//EN
    33e2:	eb a5       	ldd	r30, Y+43	; 0x2b
    33e4:	fc a5       	ldd	r31, Y+44	; 0x2c
    33e6:	81 81       	ldd	r24, Z+1	; 0x01
    33e8:	eb a5       	ldd	r30, Y+43	; 0x2b
    33ea:	fc a5       	ldd	r31, Y+44	; 0x2c
    33ec:	94 81       	ldd	r25, Z+4	; 0x04
    33ee:	69 2f       	mov	r22, r25
    33f0:	41 e0       	ldi	r20, 0x01	; 1
    33f2:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_OUTPUT);//RS
    33f6:	eb a5       	ldd	r30, Y+43	; 0x2b
    33f8:	fc a5       	ldd	r31, Y+44	; 0x2c
    33fa:	81 81       	ldd	r24, Z+1	; 0x01
    33fc:	eb a5       	ldd	r30, Y+43	; 0x2b
    33fe:	fc a5       	ldd	r31, Y+44	; 0x2c
    3400:	92 81       	ldd	r25, Z+2	; 0x02
    3402:	69 2f       	mov	r22, r25
    3404:	41 e0       	ldi	r20, 0x01	; 1
    3406:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->RW_Pin,DIO_u8_OUTPUT);//RW
    340a:	eb a5       	ldd	r30, Y+43	; 0x2b
    340c:	fc a5       	ldd	r31, Y+44	; 0x2c
    340e:	81 81       	ldd	r24, Z+1	; 0x01
    3410:	eb a5       	ldd	r30, Y+43	; 0x2b
    3412:	fc a5       	ldd	r31, Y+44	; 0x2c
    3414:	93 81       	ldd	r25, Z+3	; 0x03
    3416:	69 2f       	mov	r22, r25
    3418:	41 e0       	ldi	r20, 0x01	; 1
    341a:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RW_Pin,DIO_u8_LOW); // always write
    341e:	eb a5       	ldd	r30, Y+43	; 0x2b
    3420:	fc a5       	ldd	r31, Y+44	; 0x2c
    3422:	81 81       	ldd	r24, Z+1	; 0x01
    3424:	eb a5       	ldd	r30, Y+43	; 0x2b
    3426:	fc a5       	ldd	r31, Y+44	; 0x2c
    3428:	93 81       	ldd	r25, Z+3	; 0x03
    342a:	69 2f       	mov	r22, r25
    342c:	40 e0       	ldi	r20, 0x00	; 0
    342e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
	DIO_enuSetPortDirection(Add_strucLcd->DataPortId,DIO_u8_PORT_OUTPUT);//DataPort Direction
    3432:	eb a5       	ldd	r30, Y+43	; 0x2b
    3434:	fc a5       	ldd	r31, Y+44	; 0x2c
    3436:	80 81       	ld	r24, Z
    3438:	6f ef       	ldi	r22, 0xFF	; 255
    343a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <DIO_enuSetPortDirection>
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	a0 ef       	ldi	r26, 0xF0	; 240
    3444:	b1 e4       	ldi	r27, 0x41	; 65
    3446:	8f a3       	std	Y+39, r24	; 0x27
    3448:	98 a7       	std	Y+40, r25	; 0x28
    344a:	a9 a7       	std	Y+41, r26	; 0x29
    344c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344e:	6f a1       	ldd	r22, Y+39	; 0x27
    3450:	78 a5       	ldd	r23, Y+40	; 0x28
    3452:	89 a5       	ldd	r24, Y+41	; 0x29
    3454:	9a a5       	ldd	r25, Y+42	; 0x2a
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	4a ef       	ldi	r20, 0xFA	; 250
    345c:	54 e4       	ldi	r21, 0x44	; 68
    345e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	8b a3       	std	Y+35, r24	; 0x23
    3468:	9c a3       	std	Y+36, r25	; 0x24
    346a:	ad a3       	std	Y+37, r26	; 0x25
    346c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    346e:	6b a1       	ldd	r22, Y+35	; 0x23
    3470:	7c a1       	ldd	r23, Y+36	; 0x24
    3472:	8d a1       	ldd	r24, Y+37	; 0x25
    3474:	9e a1       	ldd	r25, Y+38	; 0x26
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e8       	ldi	r20, 0x80	; 128
    347c:	5f e3       	ldi	r21, 0x3F	; 63
    347e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3482:	88 23       	and	r24, r24
    3484:	2c f4       	brge	.+10     	; 0x3490 <Lcd_vidInit+0xc6>
		__ticks = 1;
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	9a a3       	std	Y+34, r25	; 0x22
    348c:	89 a3       	std	Y+33, r24	; 0x21
    348e:	3f c0       	rjmp	.+126    	; 0x350e <Lcd_vidInit+0x144>
	else if (__tmp > 65535)
    3490:	6b a1       	ldd	r22, Y+35	; 0x23
    3492:	7c a1       	ldd	r23, Y+36	; 0x24
    3494:	8d a1       	ldd	r24, Y+37	; 0x25
    3496:	9e a1       	ldd	r25, Y+38	; 0x26
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	3f ef       	ldi	r19, 0xFF	; 255
    349c:	4f e7       	ldi	r20, 0x7F	; 127
    349e:	57 e4       	ldi	r21, 0x47	; 71
    34a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34a4:	18 16       	cp	r1, r24
    34a6:	4c f5       	brge	.+82     	; 0x34fa <Lcd_vidInit+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a8:	6f a1       	ldd	r22, Y+39	; 0x27
    34aa:	78 a5       	ldd	r23, Y+40	; 0x28
    34ac:	89 a5       	ldd	r24, Y+41	; 0x29
    34ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e2       	ldi	r20, 0x20	; 32
    34b6:	51 e4       	ldi	r21, 0x41	; 65
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	bc 01       	movw	r22, r24
    34c2:	cd 01       	movw	r24, r26
    34c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	9a a3       	std	Y+34, r25	; 0x22
    34ce:	89 a3       	std	Y+33, r24	; 0x21
    34d0:	0f c0       	rjmp	.+30     	; 0x34f0 <Lcd_vidInit+0x126>
    34d2:	88 ec       	ldi	r24, 0xC8	; 200
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	98 a3       	std	Y+32, r25	; 0x20
    34d8:	8f 8f       	std	Y+31, r24	; 0x1f
    34da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34dc:	98 a1       	ldd	r25, Y+32	; 0x20
    34de:	01 97       	sbiw	r24, 0x01	; 1
    34e0:	f1 f7       	brne	.-4      	; 0x34de <Lcd_vidInit+0x114>
    34e2:	98 a3       	std	Y+32, r25	; 0x20
    34e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e6:	89 a1       	ldd	r24, Y+33	; 0x21
    34e8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	9a a3       	std	Y+34, r25	; 0x22
    34ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f0:	89 a1       	ldd	r24, Y+33	; 0x21
    34f2:	9a a1       	ldd	r25, Y+34	; 0x22
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	69 f7       	brne	.-38     	; 0x34d2 <Lcd_vidInit+0x108>
    34f8:	14 c0       	rjmp	.+40     	; 0x3522 <Lcd_vidInit+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fa:	6b a1       	ldd	r22, Y+35	; 0x23
    34fc:	7c a1       	ldd	r23, Y+36	; 0x24
    34fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3500:	9e a1       	ldd	r25, Y+38	; 0x26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9a a3       	std	Y+34, r25	; 0x22
    350c:	89 a3       	std	Y+33, r24	; 0x21
    350e:	89 a1       	ldd	r24, Y+33	; 0x21
    3510:	9a a1       	ldd	r25, Y+34	; 0x22
    3512:	9e 8f       	std	Y+30, r25	; 0x1e
    3514:	8d 8f       	std	Y+29, r24	; 0x1d
    3516:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3518:	9e 8d       	ldd	r25, Y+30	; 0x1e
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	f1 f7       	brne	.-4      	; 0x351a <Lcd_vidInit+0x150>
    351e:	9e 8f       	std	Y+30, r25	; 0x1e
    3520:	8d 8f       	std	Y+29, r24	; 0x1d
	///////////////////////////////////////////////////////////////////////////////////////////
	_delay_ms(30);
	//set
	Lcd_vidSendCommand(Add_strucLcd,0b00111000);
    3522:	8b a5       	ldd	r24, Y+43	; 0x2b
    3524:	9c a5       	ldd	r25, Y+44	; 0x2c
    3526:	68 e3       	ldi	r22, 0x38	; 56
    3528:	0e 94 9f 19 	call	0x333e	; 0x333e <Lcd_vidSendCommand>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	a0 e8       	ldi	r26, 0x80	; 128
    3532:	bf e3       	ldi	r27, 0x3F	; 63
    3534:	89 8f       	std	Y+25, r24	; 0x19
    3536:	9a 8f       	std	Y+26, r25	; 0x1a
    3538:	ab 8f       	std	Y+27, r26	; 0x1b
    353a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353c:	69 8d       	ldd	r22, Y+25	; 0x19
    353e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	4a ef       	ldi	r20, 0xFA	; 250
    354a:	54 e4       	ldi	r21, 0x44	; 68
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	8d 8b       	std	Y+21, r24	; 0x15
    3556:	9e 8b       	std	Y+22, r25	; 0x16
    3558:	af 8b       	std	Y+23, r26	; 0x17
    355a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    355c:	6d 89       	ldd	r22, Y+21	; 0x15
    355e:	7e 89       	ldd	r23, Y+22	; 0x16
    3560:	8f 89       	ldd	r24, Y+23	; 0x17
    3562:	98 8d       	ldd	r25, Y+24	; 0x18
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e8       	ldi	r20, 0x80	; 128
    356a:	5f e3       	ldi	r21, 0x3F	; 63
    356c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3570:	88 23       	and	r24, r24
    3572:	2c f4       	brge	.+10     	; 0x357e <Lcd_vidInit+0x1b4>
		__ticks = 1;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9c 8b       	std	Y+20, r25	; 0x14
    357a:	8b 8b       	std	Y+19, r24	; 0x13
    357c:	3f c0       	rjmp	.+126    	; 0x35fc <Lcd_vidInit+0x232>
	else if (__tmp > 65535)
    357e:	6d 89       	ldd	r22, Y+21	; 0x15
    3580:	7e 89       	ldd	r23, Y+22	; 0x16
    3582:	8f 89       	ldd	r24, Y+23	; 0x17
    3584:	98 8d       	ldd	r25, Y+24	; 0x18
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	3f ef       	ldi	r19, 0xFF	; 255
    358a:	4f e7       	ldi	r20, 0x7F	; 127
    358c:	57 e4       	ldi	r21, 0x47	; 71
    358e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3592:	18 16       	cp	r1, r24
    3594:	4c f5       	brge	.+82     	; 0x35e8 <Lcd_vidInit+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3596:	69 8d       	ldd	r22, Y+25	; 0x19
    3598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    359a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e2       	ldi	r20, 0x20	; 32
    35a4:	51 e4       	ldi	r21, 0x41	; 65
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	9c 8b       	std	Y+20, r25	; 0x14
    35bc:	8b 8b       	std	Y+19, r24	; 0x13
    35be:	0f c0       	rjmp	.+30     	; 0x35de <Lcd_vidInit+0x214>
    35c0:	88 ec       	ldi	r24, 0xC8	; 200
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	9a 8b       	std	Y+18, r25	; 0x12
    35c6:	89 8b       	std	Y+17, r24	; 0x11
    35c8:	89 89       	ldd	r24, Y+17	; 0x11
    35ca:	9a 89       	ldd	r25, Y+18	; 0x12
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <Lcd_vidInit+0x202>
    35d0:	9a 8b       	std	Y+18, r25	; 0x12
    35d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d4:	8b 89       	ldd	r24, Y+19	; 0x13
    35d6:	9c 89       	ldd	r25, Y+20	; 0x14
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	9c 8b       	std	Y+20, r25	; 0x14
    35dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35de:	8b 89       	ldd	r24, Y+19	; 0x13
    35e0:	9c 89       	ldd	r25, Y+20	; 0x14
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	69 f7       	brne	.-38     	; 0x35c0 <Lcd_vidInit+0x1f6>
    35e6:	14 c0       	rjmp	.+40     	; 0x3610 <Lcd_vidInit+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ea:	7e 89       	ldd	r23, Y+22	; 0x16
    35ec:	8f 89       	ldd	r24, Y+23	; 0x17
    35ee:	98 8d       	ldd	r25, Y+24	; 0x18
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9c 8b       	std	Y+20, r25	; 0x14
    35fa:	8b 8b       	std	Y+19, r24	; 0x13
    35fc:	8b 89       	ldd	r24, Y+19	; 0x13
    35fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3600:	98 8b       	std	Y+16, r25	; 0x10
    3602:	8f 87       	std	Y+15, r24	; 0x0f
    3604:	8f 85       	ldd	r24, Y+15	; 0x0f
    3606:	98 89       	ldd	r25, Y+16	; 0x10
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	f1 f7       	brne	.-4      	; 0x3608 <Lcd_vidInit+0x23e>
    360c:	98 8b       	std	Y+16, r25	; 0x10
    360e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	// Display On / Off
	Lcd_vidSendCommand(Add_strucLcd,0b00001100);
    3610:	8b a5       	ldd	r24, Y+43	; 0x2b
    3612:	9c a5       	ldd	r25, Y+44	; 0x2c
    3614:	6c e0       	ldi	r22, 0x0C	; 12
    3616:	0e 94 9f 19 	call	0x333e	; 0x333e <Lcd_vidSendCommand>
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	a0 e8       	ldi	r26, 0x80	; 128
    3620:	bf e3       	ldi	r27, 0x3F	; 63
    3622:	8b 87       	std	Y+11, r24	; 0x0b
    3624:	9c 87       	std	Y+12, r25	; 0x0c
    3626:	ad 87       	std	Y+13, r26	; 0x0d
    3628:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362a:	6b 85       	ldd	r22, Y+11	; 0x0b
    362c:	7c 85       	ldd	r23, Y+12	; 0x0c
    362e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3630:	9e 85       	ldd	r25, Y+14	; 0x0e
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	4a ef       	ldi	r20, 0xFA	; 250
    3638:	54 e4       	ldi	r21, 0x44	; 68
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	8f 83       	std	Y+7, r24	; 0x07
    3644:	98 87       	std	Y+8, r25	; 0x08
    3646:	a9 87       	std	Y+9, r26	; 0x09
    3648:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    364a:	6f 81       	ldd	r22, Y+7	; 0x07
    364c:	78 85       	ldd	r23, Y+8	; 0x08
    364e:	89 85       	ldd	r24, Y+9	; 0x09
    3650:	9a 85       	ldd	r25, Y+10	; 0x0a
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e8       	ldi	r20, 0x80	; 128
    3658:	5f e3       	ldi	r21, 0x3F	; 63
    365a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365e:	88 23       	and	r24, r24
    3660:	2c f4       	brge	.+10     	; 0x366c <Lcd_vidInit+0x2a2>
		__ticks = 1;
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
    366a:	3f c0       	rjmp	.+126    	; 0x36ea <Lcd_vidInit+0x320>
	else if (__tmp > 65535)
    366c:	6f 81       	ldd	r22, Y+7	; 0x07
    366e:	78 85       	ldd	r23, Y+8	; 0x08
    3670:	89 85       	ldd	r24, Y+9	; 0x09
    3672:	9a 85       	ldd	r25, Y+10	; 0x0a
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	3f ef       	ldi	r19, 0xFF	; 255
    3678:	4f e7       	ldi	r20, 0x7F	; 127
    367a:	57 e4       	ldi	r21, 0x47	; 71
    367c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3680:	18 16       	cp	r1, r24
    3682:	4c f5       	brge	.+82     	; 0x36d6 <Lcd_vidInit+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3684:	6b 85       	ldd	r22, Y+11	; 0x0b
    3686:	7c 85       	ldd	r23, Y+12	; 0x0c
    3688:	8d 85       	ldd	r24, Y+13	; 0x0d
    368a:	9e 85       	ldd	r25, Y+14	; 0x0e
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e2       	ldi	r20, 0x20	; 32
    3692:	51 e4       	ldi	r21, 0x41	; 65
    3694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
    36ac:	0f c0       	rjmp	.+30     	; 0x36cc <Lcd_vidInit+0x302>
    36ae:	88 ec       	ldi	r24, 0xC8	; 200
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9c 83       	std	Y+4, r25	; 0x04
    36b4:	8b 83       	std	Y+3, r24	; 0x03
    36b6:	8b 81       	ldd	r24, Y+3	; 0x03
    36b8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	f1 f7       	brne	.-4      	; 0x36ba <Lcd_vidInit+0x2f0>
    36be:	9c 83       	std	Y+4, r25	; 0x04
    36c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	9e 83       	std	Y+6, r25	; 0x06
    36ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36cc:	8d 81       	ldd	r24, Y+5	; 0x05
    36ce:	9e 81       	ldd	r25, Y+6	; 0x06
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	69 f7       	brne	.-38     	; 0x36ae <Lcd_vidInit+0x2e4>
    36d4:	14 c0       	rjmp	.+40     	; 0x36fe <Lcd_vidInit+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d6:	6f 81       	ldd	r22, Y+7	; 0x07
    36d8:	78 85       	ldd	r23, Y+8	; 0x08
    36da:	89 85       	ldd	r24, Y+9	; 0x09
    36dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	9e 83       	std	Y+6, r25	; 0x06
    36e8:	8d 83       	std	Y+5, r24	; 0x05
    36ea:	8d 81       	ldd	r24, Y+5	; 0x05
    36ec:	9e 81       	ldd	r25, Y+6	; 0x06
    36ee:	9a 83       	std	Y+2, r25	; 0x02
    36f0:	89 83       	std	Y+1, r24	; 0x01
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	9a 81       	ldd	r25, Y+2	; 0x02
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <Lcd_vidInit+0x32c>
    36fa:	9a 83       	std	Y+2, r25	; 0x02
    36fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Lcd_vidSendCommand(Add_strucLcd,0b00000001);
    36fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3700:	9c a5       	ldd	r25, Y+44	; 0x2c
    3702:	61 e0       	ldi	r22, 0x01	; 1
    3704:	0e 94 9f 19 	call	0x333e	; 0x333e <Lcd_vidSendCommand>

}
    3708:	ac 96       	adiw	r28, 0x2c	; 44
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <Lcd_CLR>:
/***********************Lcd_CLR*************************/
/* USE : Clear The LCD if the user needs               */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_CLR(Lcd_tstrucCfg*Add_strucLcd){
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	00 d0       	rcall	.+0      	; 0x3720 <Lcd_CLR+0x6>
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    3724:	9a 83       	std	Y+2, r25	; 0x02
    3726:	89 83       	std	Y+1, r24	; 0x01
	Lcd_vidSendCommand(Add_strucLcd,0b00000001);
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	9a 81       	ldd	r25, Y+2	; 0x02
    372c:	61 e0       	ldi	r22, 0x01	; 1
    372e:	0e 94 9f 19 	call	0x333e	; 0x333e <Lcd_vidSendCommand>
}
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	08 95       	ret

0000373c <Lcd_WriteLetter>:
/* USE : Write Single Letter on LCD                    */
/* PARAMETERS: - The struct carries cfg                */
/*             - The Data to write                     */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_WriteLetter(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdLetter){
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	00 d0       	rcall	.+0      	; 0x3742 <Lcd_WriteLetter+0x6>
    3742:	00 d0       	rcall	.+0      	; 0x3744 <Lcd_WriteLetter+0x8>
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	7c 83       	std	Y+4, r23	; 0x04
    374e:	6b 83       	std	Y+3, r22	; 0x03
	Lcd_vidSendData(Add_strucLcd,*Add_u8LcdLetter);
    3750:	eb 81       	ldd	r30, Y+3	; 0x03
    3752:	fc 81       	ldd	r31, Y+4	; 0x04
    3754:	20 81       	ld	r18, Z
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	9a 81       	ldd	r25, Y+2	; 0x02
    375a:	62 2f       	mov	r22, r18
    375c:	0e 94 c2 19 	call	0x3384	; 0x3384 <Lcd_vidSendData>
}
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <Lcd_WriteString>:
/* PARAMETERS: - The struct carries cfg                */
/*             - The Pointer points to the address of  */
/*             element of string                       */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_WriteString(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdString){
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	00 d0       	rcall	.+0      	; 0x3774 <Lcd_WriteString+0x6>
    3774:	00 d0       	rcall	.+0      	; 0x3776 <Lcd_WriteString+0x8>
    3776:	0f 92       	push	r0
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	9b 83       	std	Y+3, r25	; 0x03
    377e:	8a 83       	std	Y+2, r24	; 0x02
    3780:	7d 83       	std	Y+5, r23	; 0x05
    3782:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 StringCounter=0;Add_u8LcdString[StringCounter]!='\0';StringCounter++){
    3784:	19 82       	std	Y+1, r1	; 0x01
    3786:	11 c0       	rjmp	.+34     	; 0x37aa <Lcd_WriteString+0x3c>
		Lcd_vidSendData(Add_strucLcd,Add_u8LcdString[StringCounter]);
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	8c 81       	ldd	r24, Y+4	; 0x04
    3790:	9d 81       	ldd	r25, Y+5	; 0x05
    3792:	fc 01       	movw	r30, r24
    3794:	e2 0f       	add	r30, r18
    3796:	f3 1f       	adc	r31, r19
    3798:	20 81       	ld	r18, Z
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	9b 81       	ldd	r25, Y+3	; 0x03
    379e:	62 2f       	mov	r22, r18
    37a0:	0e 94 c2 19 	call	0x3384	; 0x3384 <Lcd_vidSendData>
/*             - The Pointer points to the address of  */
/*             element of string                       */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_WriteString(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdString){
	for(u8 StringCounter=0;Add_u8LcdString[StringCounter]!='\0';StringCounter++){
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	8f 5f       	subi	r24, 0xFF	; 255
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	28 2f       	mov	r18, r24
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	8c 81       	ldd	r24, Y+4	; 0x04
    37b2:	9d 81       	ldd	r25, Y+5	; 0x05
    37b4:	fc 01       	movw	r30, r24
    37b6:	e2 0f       	add	r30, r18
    37b8:	f3 1f       	adc	r31, r19
    37ba:	80 81       	ld	r24, Z
    37bc:	88 23       	and	r24, r24
    37be:	21 f7       	brne	.-56     	; 0x3788 <Lcd_WriteString+0x1a>
		Lcd_vidSendData(Add_strucLcd,Add_u8LcdString[StringCounter]);
	}
}
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <Lcd_WriteNumber>:
/* USE : Write Numbers on LCD                          */
/* PARAMETERS: - The struct carries cfg                */
/*             - The number to be displayed            */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_WriteNumber(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_u8LcdNumber){
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	2e 97       	sbiw	r28, 0x0e	; 14
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	0f be       	out	0x3f, r0	; 63
    37e2:	cd bf       	out	0x3d, r28	; 61
    37e4:	9d 87       	std	Y+13, r25	; 0x0d
    37e6:	8c 87       	std	Y+12, r24	; 0x0c
    37e8:	6e 87       	std	Y+14, r22	; 0x0e
	if(Copy_u8LcdNumber<10)
    37ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    37ec:	8a 30       	cpi	r24, 0x0A	; 10
    37ee:	48 f4       	brcc	.+18     	; 0x3802 <Lcd_WriteNumber+0x32>
		Lcd_vidSendData(Add_strucLcd,Copy_u8LcdNumber+48);
    37f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37f2:	28 2f       	mov	r18, r24
    37f4:	20 5d       	subi	r18, 0xD0	; 208
    37f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    37f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    37fa:	62 2f       	mov	r22, r18
    37fc:	0e 94 c2 19 	call	0x3384	; 0x3384 <Lcd_vidSendData>
    3800:	49 c0       	rjmp	.+146    	; 0x3894 <Lcd_WriteNumber+0xc4>
	else{
		u8 Lcd_LargeNumbers[10];
		u8 count=9;
    3802:	89 e0       	ldi	r24, 0x09	; 9
    3804:	89 83       	std	Y+1, r24	; 0x01
		do{
			Lcd_LargeNumbers[count--]=Copy_u8LcdNumber%10;
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	48 2f       	mov	r20, r24
    380a:	50 e0       	ldi	r21, 0x00	; 0
    380c:	8e 85       	ldd	r24, Y+14	; 0x0e
    380e:	9a e0       	ldi	r25, 0x0A	; 10
    3810:	69 2f       	mov	r22, r25
    3812:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    3816:	89 2f       	mov	r24, r25
    3818:	28 2f       	mov	r18, r24
    381a:	ce 01       	movw	r24, r28
    381c:	02 96       	adiw	r24, 0x02	; 2
    381e:	fc 01       	movw	r30, r24
    3820:	e4 0f       	add	r30, r20
    3822:	f5 1f       	adc	r31, r21
    3824:	20 83       	st	Z, r18
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	81 50       	subi	r24, 0x01	; 1
    382a:	89 83       	std	Y+1, r24	; 0x01
			Copy_u8LcdNumber/=10;
    382c:	8e 85       	ldd	r24, Y+14	; 0x0e
    382e:	9a e0       	ldi	r25, 0x0A	; 10
    3830:	69 2f       	mov	r22, r25
    3832:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    3836:	8e 87       	std	Y+14, r24	; 0x0e

		}while(Copy_u8LcdNumber>1);
    3838:	8e 85       	ldd	r24, Y+14	; 0x0e
    383a:	82 30       	cpi	r24, 0x02	; 2
    383c:	20 f7       	brcc	.-56     	; 0x3806 <Lcd_WriteNumber+0x36>
		if(Lcd_LargeNumbers[count+1]==0)
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	88 2f       	mov	r24, r24
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	9c 01       	movw	r18, r24
    3846:	2f 5f       	subi	r18, 0xFF	; 255
    3848:	3f 4f       	sbci	r19, 0xFF	; 255
    384a:	ce 01       	movw	r24, r28
    384c:	02 96       	adiw	r24, 0x02	; 2
    384e:	fc 01       	movw	r30, r24
    3850:	e2 0f       	add	r30, r18
    3852:	f3 1f       	adc	r31, r19
    3854:	80 81       	ld	r24, Z
    3856:	88 23       	and	r24, r24
    3858:	19 f4       	brne	.+6      	; 0x3860 <Lcd_WriteNumber+0x90>
			count++;
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	8f 5f       	subi	r24, 0xFF	; 255
    385e:	89 83       	std	Y+1, r24	; 0x01
		for(++count;count<10;count++){
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	8f 5f       	subi	r24, 0xFF	; 255
    3864:	89 83       	std	Y+1, r24	; 0x01
    3866:	13 c0       	rjmp	.+38     	; 0x388e <Lcd_WriteNumber+0xbe>
			Lcd_vidSendData(Add_strucLcd,Lcd_LargeNumbers[count]+48);
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	28 2f       	mov	r18, r24
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	ce 01       	movw	r24, r28
    3870:	02 96       	adiw	r24, 0x02	; 2
    3872:	fc 01       	movw	r30, r24
    3874:	e2 0f       	add	r30, r18
    3876:	f3 1f       	adc	r31, r19
    3878:	80 81       	ld	r24, Z
    387a:	28 2f       	mov	r18, r24
    387c:	20 5d       	subi	r18, 0xD0	; 208
    387e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3880:	9d 85       	ldd	r25, Y+13	; 0x0d
    3882:	62 2f       	mov	r22, r18
    3884:	0e 94 c2 19 	call	0x3384	; 0x3384 <Lcd_vidSendData>
			Copy_u8LcdNumber/=10;

		}while(Copy_u8LcdNumber>1);
		if(Lcd_LargeNumbers[count+1]==0)
			count++;
		for(++count;count<10;count++){
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	8f 5f       	subi	r24, 0xFF	; 255
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	8a 30       	cpi	r24, 0x0A	; 10
    3892:	50 f3       	brcs	.-44     	; 0x3868 <Lcd_WriteNumber+0x98>
			Lcd_vidSendData(Add_strucLcd,Lcd_LargeNumbers[count]+48);
		}
	}
}
    3894:	2e 96       	adiw	r28, 0x0e	; 14
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	cf 91       	pop	r28
    38a2:	df 91       	pop	r29
    38a4:	08 95       	ret

000038a6 <Lcd_GotoPosition>:
/* PARAMETERS: - The struct carries cfg                */
/*             - The Line 1 or 2                       */
/*             - The position in the line 0-15         */
/* RETURN: No Return                                   */
/*******************************************************/
void Lcd_GotoPosition(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_u8Line,u8 Copy_u8Digit){
    38a6:	df 93       	push	r29
    38a8:	cf 93       	push	r28
    38aa:	00 d0       	rcall	.+0      	; 0x38ac <Lcd_GotoPosition+0x6>
    38ac:	00 d0       	rcall	.+0      	; 0x38ae <Lcd_GotoPosition+0x8>
    38ae:	00 d0       	rcall	.+0      	; 0x38b0 <Lcd_GotoPosition+0xa>
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	9a 83       	std	Y+2, r25	; 0x02
    38b6:	89 83       	std	Y+1, r24	; 0x01
    38b8:	6b 83       	std	Y+3, r22	; 0x03
    38ba:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8Line){
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	3e 83       	std	Y+6, r19	; 0x06
    38c4:	2d 83       	std	Y+5, r18	; 0x05
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
    38c8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	31 f0       	breq	.+12     	; 0x38da <Lcd_GotoPosition+0x34>
    38ce:	2d 81       	ldd	r18, Y+5	; 0x05
    38d0:	3e 81       	ldd	r19, Y+6	; 0x06
    38d2:	21 30       	cpi	r18, 0x01	; 1
    38d4:	31 05       	cpc	r19, r1
    38d6:	51 f0       	breq	.+20     	; 0x38ec <Lcd_GotoPosition+0x46>
    38d8:	11 c0       	rjmp	.+34     	; 0x38fc <Lcd_GotoPosition+0x56>
	case LCD_LINE1:Lcd_vidSendCommand(Add_strucLcd,LCD_LINE1_COMMAND+Copy_u8Digit);break;
    38da:	8c 81       	ldd	r24, Y+4	; 0x04
    38dc:	28 2f       	mov	r18, r24
    38de:	20 58       	subi	r18, 0x80	; 128
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	62 2f       	mov	r22, r18
    38e6:	0e 94 9f 19 	call	0x333e	; 0x333e <Lcd_vidSendCommand>
    38ea:	08 c0       	rjmp	.+16     	; 0x38fc <Lcd_GotoPosition+0x56>
	case LCD_LINE2:Lcd_vidSendCommand(Add_strucLcd,LCD_LINE2_COMMAND+Copy_u8Digit);break;
    38ec:	8c 81       	ldd	r24, Y+4	; 0x04
    38ee:	28 2f       	mov	r18, r24
    38f0:	20 54       	subi	r18, 0x40	; 64
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	62 2f       	mov	r22, r18
    38f8:	0e 94 9f 19 	call	0x333e	; 0x333e <Lcd_vidSendCommand>
	}
}
    38fc:	26 96       	adiw	r28, 0x06	; 6
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <Keypad_vidInit>:
/*********************Keypad_vidInit********************/
/* USE : Initialize the KeyPad according to user cfg   */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/*******************************************************/
void Keypad_vidInit(Keypad_tstrucCfg*Add_strucKeypad){
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	00 d0       	rcall	.+0      	; 0x3914 <Keypad_vidInit+0x6>
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPortDirection(Add_strucKeypad->DataPortId,0x0f); // 4 Input 4 OutPut
    391c:	e9 81       	ldd	r30, Y+1	; 0x01
    391e:	fa 81       	ldd	r31, Y+2	; 0x02
    3920:	80 81       	ld	r24, Z
    3922:	6f e0       	ldi	r22, 0x0F	; 15
    3924:	0e 94 22 15 	call	0x2a44	; 0x2a44 <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(Add_strucKeypad->DataPortId,DIO_u8_PORT_OUTPUT);
    3928:	e9 81       	ldd	r30, Y+1	; 0x01
    392a:	fa 81       	ldd	r31, Y+2	; 0x02
    392c:	80 81       	ld	r24, Z
    392e:	6f ef       	ldi	r22, 0xFF	; 255
    3930:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>
}
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <Keypad_u8GetPressedKey>:
/* USE : To get the pressed button in Keypad            */
/* PARAMETERS: The struct carries cfg                   */
/* RETURN: The Character or integer representing the    */
/* Pressed key                                          */
/********************************************************/
u8 Keypad_u8GetPressedKey(Keypad_tstrucCfg*Add_strucKeypad){
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	27 97       	sbiw	r28, 0x07	; 7
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	9e 83       	std	Y+6, r25	; 0x06
    3954:	8d 83       	std	Y+5, r24	; 0x05
	u8 Keypad_RowResult=1;
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	8c 83       	std	Y+4, r24	; 0x04
	u8 Keypad_Result=Keypad_NotPressed;
    395a:	8f ef       	ldi	r24, 0xFF	; 255
    395c:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 Keypad_u8Col=0;Keypad_u8Col<4;Keypad_u8Col++){
    395e:	1a 82       	std	Y+2, r1	; 0x02
    3960:	57 c0       	rjmp	.+174    	; 0x3a10 <Keypad_u8GetPressedKey+0xd2>
		//Activate each col (=0)
		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_LOW);
    3962:	ed 81       	ldd	r30, Y+5	; 0x05
    3964:	fe 81       	ldd	r31, Y+6	; 0x06
    3966:	80 81       	ld	r24, Z
    3968:	6a 81       	ldd	r22, Y+2	; 0x02
    396a:	40 e0       	ldi	r20, 0x00	; 0
    396c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>

		for(u8 Keypad_u8Row=0;Keypad_u8Row<4;Keypad_u8Row++){
    3970:	19 82       	std	Y+1, r1	; 0x01
    3972:	40 c0       	rjmp	.+128    	; 0x39f4 <Keypad_u8GetPressedKey+0xb6>

			DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);
    3974:	ed 81       	ldd	r30, Y+5	; 0x05
    3976:	fe 81       	ldd	r31, Y+6	; 0x06
    3978:	40 81       	ld	r20, Z
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	98 2f       	mov	r25, r24
    397e:	9c 5f       	subi	r25, 0xFC	; 252
    3980:	9e 01       	movw	r18, r28
    3982:	2c 5f       	subi	r18, 0xFC	; 252
    3984:	3f 4f       	sbci	r19, 0xFF	; 255
    3986:	84 2f       	mov	r24, r20
    3988:	69 2f       	mov	r22, r25
    398a:	a9 01       	movw	r20, r18
    398c:	0e 94 8e 14 	call	0x291c	; 0x291c <DIO_u8GetPinValue>

			if(Keypad_RowResult==Keypad_Pressed){
    3990:	8c 81       	ldd	r24, Y+4	; 0x04
    3992:	88 23       	and	r24, r24
    3994:	61 f5       	brne	.+88     	; 0x39ee <Keypad_u8GetPressedKey+0xb0>
    3996:	0e c0       	rjmp	.+28     	; 0x39b4 <Keypad_u8GetPressedKey+0x76>
				while(Keypad_RowResult==Keypad_Pressed){
					DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);
    3998:	ed 81       	ldd	r30, Y+5	; 0x05
    399a:	fe 81       	ldd	r31, Y+6	; 0x06
    399c:	40 81       	ld	r20, Z
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	98 2f       	mov	r25, r24
    39a2:	9c 5f       	subi	r25, 0xFC	; 252
    39a4:	9e 01       	movw	r18, r28
    39a6:	2c 5f       	subi	r18, 0xFC	; 252
    39a8:	3f 4f       	sbci	r19, 0xFF	; 255
    39aa:	84 2f       	mov	r24, r20
    39ac:	69 2f       	mov	r22, r25
    39ae:	a9 01       	movw	r20, r18
    39b0:	0e 94 8e 14 	call	0x291c	; 0x291c <DIO_u8GetPinValue>
		for(u8 Keypad_u8Row=0;Keypad_u8Row<4;Keypad_u8Row++){

			DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);

			if(Keypad_RowResult==Keypad_Pressed){
				while(Keypad_RowResult==Keypad_Pressed){
    39b4:	8c 81       	ldd	r24, Y+4	; 0x04
    39b6:	88 23       	and	r24, r24
    39b8:	79 f3       	breq	.-34     	; 0x3998 <Keypad_u8GetPressedKey+0x5a>
					DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);
				}
				DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_HIGH);
    39ba:	ed 81       	ldd	r30, Y+5	; 0x05
    39bc:	fe 81       	ldd	r31, Y+6	; 0x06
    39be:	80 81       	ld	r24, Z
    39c0:	6a 81       	ldd	r22, Y+2	; 0x02
    39c2:	41 e0       	ldi	r20, 0x01	; 1
    39c4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
				return Keypad_arrCfg [Keypad_u8Col][Keypad_u8Row];
    39c8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ca:	48 2f       	mov	r20, r24
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	28 2f       	mov	r18, r24
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	ca 01       	movw	r24, r20
    39d6:	88 0f       	add	r24, r24
    39d8:	99 1f       	adc	r25, r25
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	82 0f       	add	r24, r18
    39e0:	93 1f       	adc	r25, r19
    39e2:	fc 01       	movw	r30, r24
    39e4:	ee 58       	subi	r30, 0x8E	; 142
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	80 81       	ld	r24, Z
    39ea:	8f 83       	std	Y+7, r24	; 0x07
    39ec:	17 c0       	rjmp	.+46     	; 0x3a1c <Keypad_u8GetPressedKey+0xde>
	u8 Keypad_Result=Keypad_NotPressed;
	for(u8 Keypad_u8Col=0;Keypad_u8Col<4;Keypad_u8Col++){
		//Activate each col (=0)
		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_LOW);

		for(u8 Keypad_u8Row=0;Keypad_u8Row<4;Keypad_u8Row++){
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	8f 5f       	subi	r24, 0xFF	; 255
    39f2:	89 83       	std	Y+1, r24	; 0x01
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	84 30       	cpi	r24, 0x04	; 4
    39f8:	08 f4       	brcc	.+2      	; 0x39fc <Keypad_u8GetPressedKey+0xbe>
    39fa:	bc cf       	rjmp	.-136    	; 0x3974 <Keypad_u8GetPressedKey+0x36>
				_delay_ms(10);
			}

		}

		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_HIGH);
    39fc:	ed 81       	ldd	r30, Y+5	; 0x05
    39fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3a00:	80 81       	ld	r24, Z
    3a02:	6a 81       	ldd	r22, Y+2	; 0x02
    3a04:	41 e0       	ldi	r20, 0x01	; 1
    3a06:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
/* Pressed key                                          */
/********************************************************/
u8 Keypad_u8GetPressedKey(Keypad_tstrucCfg*Add_strucKeypad){
	u8 Keypad_RowResult=1;
	u8 Keypad_Result=Keypad_NotPressed;
	for(u8 Keypad_u8Col=0;Keypad_u8Col<4;Keypad_u8Col++){
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	8f 5f       	subi	r24, 0xFF	; 255
    3a0e:	8a 83       	std	Y+2, r24	; 0x02
    3a10:	8a 81       	ldd	r24, Y+2	; 0x02
    3a12:	84 30       	cpi	r24, 0x04	; 4
    3a14:	08 f4       	brcc	.+2      	; 0x3a18 <Keypad_u8GetPressedKey+0xda>
    3a16:	a5 cf       	rjmp	.-182    	; 0x3962 <Keypad_u8GetPressedKey+0x24>
		}

		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_HIGH);
	}

	return Keypad_Result;
    3a18:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1a:	8f 83       	std	Y+7, r24	; 0x07
    3a1c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3a1e:	27 96       	adiw	r28, 0x07	; 7
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	08 95       	ret

00003a30 <Button_vidButtonInit>:
/* USE : Initialize the Button according to user cfg   */
/* PARAMETERS: The struct carries cfg                  */
/* RETURN: No Return                                   */
/* PULL UP mode                                        */
/*******************************************************/
void Button_vidButtonInit(Button_tstrucCfg*Add_structButton){
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <Button_vidButtonInit+0x6>
    3a36:	cd b7       	in	r28, 0x3d	; 61
    3a38:	de b7       	in	r29, 0x3e	; 62
    3a3a:	9a 83       	std	Y+2, r25	; 0x02
    3a3c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,DIO_u8_INPUT);
    3a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a40:	fa 81       	ldd	r31, Y+2	; 0x02
    3a42:	81 81       	ldd	r24, Z+1	; 0x01
    3a44:	83 70       	andi	r24, 0x03	; 3
    3a46:	e9 81       	ldd	r30, Y+1	; 0x01
    3a48:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4a:	90 81       	ld	r25, Z
    3a4c:	69 2f       	mov	r22, r25
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	0e 94 81 13 	call	0x2702	; 0x2702 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,DIO_u8_HIGH);
    3a54:	e9 81       	ldd	r30, Y+1	; 0x01
    3a56:	fa 81       	ldd	r31, Y+2	; 0x02
    3a58:	81 81       	ldd	r24, Z+1	; 0x01
    3a5a:	83 70       	andi	r24, 0x03	; 3
    3a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a60:	90 81       	ld	r25, Z
    3a62:	69 2f       	mov	r22, r25
    3a64:	41 e0       	ldi	r20, 0x01	; 1
    3a66:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
}
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	08 95       	ret

00003a74 <Button_u8ButtonRead>:
/* USE : Determine whether the Button is Pressed or not */
/* PARAMETERS: The struct carries cfg                   */
/* RETURN: The Button Read                              */
/* The FOR loop solve debouncing problem                */
/********************************************************/
u8 Button_u8ButtonRead(Button_tstrucCfg*Add_structButton){
    3a74:	df 93       	push	r29
    3a76:	cf 93       	push	r28
    3a78:	00 d0       	rcall	.+0      	; 0x3a7a <Button_u8ButtonRead+0x6>
    3a7a:	00 d0       	rcall	.+0      	; 0x3a7c <Button_u8ButtonRead+0x8>
    3a7c:	cd b7       	in	r28, 0x3d	; 61
    3a7e:	de b7       	in	r29, 0x3e	; 62
    3a80:	9c 83       	std	Y+4, r25	; 0x04
    3a82:	8b 83       	std	Y+3, r24	; 0x03
	u8 ButtonRead;
	for(u8 Button_u8ButtonDebouncing=0;Button_u8ButtonDebouncing<=150;Button_u8ButtonDebouncing++){
    3a84:	19 82       	std	Y+1, r1	; 0x01
    3a86:	15 c0       	rjmp	.+42     	; 0x3ab2 <Button_u8ButtonRead+0x3e>
	DIO_u8GetPinValue(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,&ButtonRead);
    3a88:	eb 81       	ldd	r30, Y+3	; 0x03
    3a8a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a8c:	81 81       	ldd	r24, Z+1	; 0x01
    3a8e:	83 70       	andi	r24, 0x03	; 3
    3a90:	eb 81       	ldd	r30, Y+3	; 0x03
    3a92:	fc 81       	ldd	r31, Y+4	; 0x04
    3a94:	90 81       	ld	r25, Z
    3a96:	9e 01       	movw	r18, r28
    3a98:	2e 5f       	subi	r18, 0xFE	; 254
    3a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9c:	69 2f       	mov	r22, r25
    3a9e:	a9 01       	movw	r20, r18
    3aa0:	0e 94 8e 14 	call	0x291c	; 0x291c <DIO_u8GetPinValue>
	if(ButtonRead==Button_NotPressed)
    3aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <Button_u8ButtonRead+0x38>
		Button_u8ButtonDebouncing=0;
    3aaa:	19 82       	std	Y+1, r1	; 0x01
/* RETURN: The Button Read                              */
/* The FOR loop solve debouncing problem                */
/********************************************************/
u8 Button_u8ButtonRead(Button_tstrucCfg*Add_structButton){
	u8 ButtonRead;
	for(u8 Button_u8ButtonDebouncing=0;Button_u8ButtonDebouncing<=150;Button_u8ButtonDebouncing++){
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	8f 5f       	subi	r24, 0xFF	; 255
    3ab0:	89 83       	std	Y+1, r24	; 0x01
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	87 39       	cpi	r24, 0x97	; 151
    3ab6:	40 f3       	brcs	.-48     	; 0x3a88 <Button_u8ButtonRead+0x14>
	DIO_u8GetPinValue(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,&ButtonRead);
	if(ButtonRead==Button_NotPressed)
		Button_u8ButtonDebouncing=0;
	}
	return ButtonRead;
    3ab8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	cf 91       	pop	r28
    3ac4:	df 91       	pop	r29
    3ac6:	08 95       	ret

00003ac8 <__vector_7>:

////////////////// Timer 1 ISR \\\\\\\\\\\\\\\\\\\\\\
// Every 1 second it's Executed                    \\
// It Increases Seconds , Minutes and Hours        \\
/////////////////////////////////////////////////////
ISR(TIMER1_COMPA_vect){
    3ac8:	1f 92       	push	r1
    3aca:	0f 92       	push	r0
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	0f 92       	push	r0
    3ad0:	11 24       	eor	r1, r1
    3ad2:	8f 93       	push	r24
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
	Global_u8Seconds++;
    3adc:	80 91 2a 01 	lds	r24, 0x012A
    3ae0:	8f 5f       	subi	r24, 0xFF	; 255
    3ae2:	80 93 2a 01 	sts	0x012A, r24
	if(Global_u8Seconds==60)
    3ae6:	80 91 2a 01 	lds	r24, 0x012A
    3aea:	8c 33       	cpi	r24, 0x3C	; 60
    3aec:	39 f4       	brne	.+14     	; 0x3afc <__vector_7+0x34>
		{
			Global_u8Seconds=0;
    3aee:	10 92 2a 01 	sts	0x012A, r1
			Global_u8Minutes++;
    3af2:	80 91 2c 01 	lds	r24, 0x012C
    3af6:	8f 5f       	subi	r24, 0xFF	; 255
    3af8:	80 93 2c 01 	sts	0x012C, r24
		}
		if(Global_u8Minutes==60)
    3afc:	80 91 2c 01 	lds	r24, 0x012C
    3b00:	8c 33       	cpi	r24, 0x3C	; 60
    3b02:	39 f4       	brne	.+14     	; 0x3b12 <__vector_7+0x4a>
		{
			Global_u8Minutes=0;
    3b04:	10 92 2c 01 	sts	0x012C, r1
			Global_u8Hours++;
    3b08:	80 91 2b 01 	lds	r24, 0x012B
    3b0c:	8f 5f       	subi	r24, 0xFF	; 255
    3b0e:	80 93 2b 01 	sts	0x012B, r24
		}
		if(Global_u8Hours==24)
    3b12:	80 91 2b 01 	lds	r24, 0x012B
    3b16:	88 31       	cpi	r24, 0x18	; 24
    3b18:	21 f4       	brne	.+8      	; 0x3b22 <__vector_7+0x5a>
		{
			Global_u8Seconds=0;
    3b1a:	10 92 2a 01 	sts	0x012A, r1
			Global_u8Hours=0;
    3b1e:	10 92 2b 01 	sts	0x012B, r1
		}
}
    3b22:	cf 91       	pop	r28
    3b24:	df 91       	pop	r29
    3b26:	8f 91       	pop	r24
    3b28:	0f 90       	pop	r0
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	0f 90       	pop	r0
    3b2e:	1f 90       	pop	r1
    3b30:	18 95       	reti

00003b32 <main>:
	u8 InTimerMode [] = "Timer Mode";
	u8 TimerModeExit [] ="1)Clock 2)Reset";
	// Wrong Input
	u8 WrongChoice[]   = " Wrong Choice ";

int main(void) {
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
    3b3a:	aa 97       	sbiw	r28, 0x2a	; 42
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	f8 94       	cli
    3b40:	de bf       	out	0x3e, r29	; 62
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	cd bf       	out	0x3d, r28	; 61

	// Initial Value of Keypad
	u8 Loc_u8pressedKey = Keypad_NotPressed;
    3b46:	8f ef       	ldi	r24, 0xFF	; 255
    3b48:	88 8b       	std	Y+16, r24	; 0x10

	// Array to store each 7 seg value to display
	u8 Array[6]={'#','#','#','#','#','#'};
    3b4a:	ce 01       	movw	r24, r28
    3b4c:	41 96       	adiw	r24, 0x11	; 17
    3b4e:	9f a3       	std	Y+39, r25	; 0x27
    3b50:	8e a3       	std	Y+38, r24	; 0x26
    3b52:	a7 e1       	ldi	r26, 0x17	; 23
    3b54:	b1 e0       	ldi	r27, 0x01	; 1
    3b56:	b9 a7       	std	Y+41, r27	; 0x29
    3b58:	a8 a7       	std	Y+40, r26	; 0x28
    3b5a:	b6 e0       	ldi	r27, 0x06	; 6
    3b5c:	ba a7       	std	Y+42, r27	; 0x2a
    3b5e:	e8 a5       	ldd	r30, Y+40	; 0x28
    3b60:	f9 a5       	ldd	r31, Y+41	; 0x29
    3b62:	00 80       	ld	r0, Z
    3b64:	88 a5       	ldd	r24, Y+40	; 0x28
    3b66:	99 a5       	ldd	r25, Y+41	; 0x29
    3b68:	01 96       	adiw	r24, 0x01	; 1
    3b6a:	99 a7       	std	Y+41, r25	; 0x29
    3b6c:	88 a7       	std	Y+40, r24	; 0x28
    3b6e:	ae a1       	ldd	r26, Y+38	; 0x26
    3b70:	bf a1       	ldd	r27, Y+39	; 0x27
    3b72:	0c 92       	st	X, r0
    3b74:	ee a1       	ldd	r30, Y+38	; 0x26
    3b76:	ff a1       	ldd	r31, Y+39	; 0x27
    3b78:	31 96       	adiw	r30, 0x01	; 1
    3b7a:	ff a3       	std	Y+39, r31	; 0x27
    3b7c:	ee a3       	std	Y+38, r30	; 0x26
    3b7e:	fa a5       	ldd	r31, Y+42	; 0x2a
    3b80:	f1 50       	subi	r31, 0x01	; 1
    3b82:	fa a7       	std	Y+42, r31	; 0x2a
    3b84:	8a a5       	ldd	r24, Y+42	; 0x2a
    3b86:	88 23       	and	r24, r24
    3b88:	51 f7       	brne	.-44     	; 0x3b5e <main+0x2c>

	// Enable Global Interrupt
	GIE_voidGlobalInterruptEnable();
    3b8a:	0e 94 b5 10 	call	0x216a	; 0x216a <GIE_voidGlobalInterruptEnable>
			.Timer_u8TimerNo =TIMER_NO_TIMER1,
			.Timer_u8TimerForceOutputCompare=TIMER1_FOC_OFF,
			.Timer_u8WaveFormGenerationMode=TIMER1_MODE_CTC,
			.Timer_u8ClockSelect=TIMER1_CLOCK_PRESCALLING_1024,
			.Timer1_u8Channel=TIMER1_CHANNEL_A
	};
    3b8e:	8f e0       	ldi	r24, 0x0F	; 15
    3b90:	fe 01       	movw	r30, r28
    3b92:	77 96       	adiw	r30, 0x17	; 23
    3b94:	df 01       	movw	r26, r30
    3b96:	98 2f       	mov	r25, r24
    3b98:	1d 92       	st	X+, r1
    3b9a:	9a 95       	dec	r25
    3b9c:	e9 f7       	brne	.-6      	; 0x3b98 <main+0x66>
    3b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3ba0:	8c 7f       	andi	r24, 0xFC	; 252
    3ba2:	81 60       	ori	r24, 0x01	; 1
    3ba4:	8f 8b       	std	Y+23, r24	; 0x17
    3ba6:	88 e0       	ldi	r24, 0x08	; 8
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	9b 8f       	std	Y+27, r25	; 0x1b
    3bac:	8a 8f       	std	Y+26, r24	; 0x1a
    3bae:	85 e0       	ldi	r24, 0x05	; 5
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	9d 8f       	std	Y+29, r25	; 0x1d
    3bb4:	8c 8f       	std	Y+28, r24	; 0x1c

    // CTC = 976
	// 1 second = (1024/10^6) * 976
	TIMER_voidCTCcfg(&timer1,976);
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	47 96       	adiw	r24, 0x17	; 23
    3bba:	60 ed       	ldi	r22, 0xD0	; 208
    3bbc:	73 e0       	ldi	r23, 0x03	; 3
    3bbe:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TIMER_voidCTCcfg>

	// Enable Timer 1 Interrupt
	TIMSK |= 0b00010000;
    3bc2:	a9 e5       	ldi	r26, 0x59	; 89
    3bc4:	b0 e0       	ldi	r27, 0x00	; 0
    3bc6:	e9 e5       	ldi	r30, 0x59	; 89
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	80 81       	ld	r24, Z
    3bcc:	80 61       	ori	r24, 0x10	; 16
    3bce:	8c 93       	st	X, r24

	// Init Timer 1
	TIMER_voidTimerInit(&timer1);
    3bd0:	ce 01       	movw	r24, r28
    3bd2:	47 96       	adiw	r24, 0x17	; 23
    3bd4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <TIMER_voidTimerInit>

	////////////////////////// 7 SEG \\\\\\\\\\\\\\\\\\\\\\\\\\\

	// Set enables pins to output
	DIO_enuSetPortDirection(DIO_u8_PORTC,0b00111111); // 7SEG Power --> 0-5 Port C
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	6f e3       	ldi	r22, 0x3F	; 63
    3bdc:	0e 94 22 15 	call	0x2a44	; 0x2a44 <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(DIO_u8_PORTC,0b00111111); // 7SEG Power --> 0-5 Port C
    3be0:	82 e0       	ldi	r24, 0x02	; 2
    3be2:	6f e3       	ldi	r22, 0x3F	; 63
    3be4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <DIO_enuSetPortValue>


	// Init 7 Seg
	Seg_vidInit(&segments);
    3be8:	88 e8       	ldi	r24, 0x88	; 136
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Seg_vidInit>

	/////////////////////////// Lcd \\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	// Init LCD
	Lcd_vidInit(&Lcd1);
    3bf0:	82 e8       	ldi	r24, 0x82	; 130
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_vidInit>

	////////////////////////// KeyPad \\\\\\\\\\\\\\\\\\\\\\\\\\\

	// Init Keypad
	Keypad_vidInit(&Keypad1);
    3bf8:	87 e8       	ldi	r24, 0x87	; 135
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	0e 94 87 1c 	call	0x390e	; 0x390e <Keypad_vidInit>

	//////////////////// Intro Message Display \\\\\\\\\\\\\\\\\\

	Lcd_WriteString(&Lcd1,Intro_line1);
    3c00:	82 e8       	ldi	r24, 0x82	; 130
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	29 e8       	ldi	r18, 0x89	; 137
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	b9 01       	movw	r22, r18
    3c0a:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
	Lcd_GotoPosition(&Lcd1,LCD_LINE2,0);
    3c0e:	82 e8       	ldi	r24, 0x82	; 130
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	61 e0       	ldi	r22, 0x01	; 1
    3c14:	40 e0       	ldi	r20, 0x00	; 0
    3c16:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <Lcd_GotoPosition>
	Lcd_WriteString(&Lcd1,Intro_line2);
    3c1a:	82 e8       	ldi	r24, 0x82	; 130
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	27 e9       	ldi	r18, 0x97	; 151
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	b9 01       	movw	r22, r18
    3c24:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>

	// Flag to distinguish First enter to loop
	u8 FirstTime=1;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	8f 87       	std	Y+15, r24	; 0x0f

	while (1) {
		// Get Keypad Read
		Loc_u8pressedKey=Keypad_u8GetPressedKey(&Keypad1);
    3c2c:	87 e8       	ldi	r24, 0x87	; 135
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 9f 1c 	call	0x393e	; 0x393e <Keypad_u8GetPressedKey>
    3c34:	88 8b       	std	Y+16, r24	; 0x10
		// 1 to Enter Clock Mode
		// 2 to Enter Timer Mode
		if (Loc_u8pressedKey != Keypad_NotPressed) {
    3c36:	88 89       	ldd	r24, Y+16	; 0x10
    3c38:	8f 3f       	cpi	r24, 0xFF	; 255
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <main+0x10c>
    3c3c:	f0 c0       	rjmp	.+480    	; 0x3e1e <main+0x2ec>

			// Clock Mode
			if (Loc_u8pressedKey == '1') {
    3c3e:	88 89       	ldd	r24, Y+16	; 0x10
    3c40:	81 33       	cpi	r24, 0x31	; 49
    3c42:	79 f5       	brne	.+94     	; 0x3ca2 <main+0x170>

				FirstTime=0;
    3c44:	1f 86       	std	Y+15, r1	; 0x0f
				Lcd_CLR(&Lcd1);
    3c46:	82 e8       	ldi	r24, 0x82	; 130
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>

				// Set Clock Time
			    RTC_u8SetClockTime(Array,6);
    3c4e:	ce 01       	movw	r24, r28
    3c50:	41 96       	adiw	r24, 0x11	; 17
    3c52:	66 e0       	ldi	r22, 0x06	; 6
    3c54:	0e 94 46 23 	call	0x468c	; 0x468c <RTC_u8SetClockTime>

			    // Update Time with set Time
			    RTC_voidUpdateClockTime(&Global_u8Seconds,&Global_u8Minutes,&Global_u8Hours,Array);
    3c58:	8a e2       	ldi	r24, 0x2A	; 42
    3c5a:	91 e0       	ldi	r25, 0x01	; 1
    3c5c:	2c e2       	ldi	r18, 0x2C	; 44
    3c5e:	31 e0       	ldi	r19, 0x01	; 1
    3c60:	4b e2       	ldi	r20, 0x2B	; 43
    3c62:	51 e0       	ldi	r21, 0x01	; 1
    3c64:	fe 01       	movw	r30, r28
    3c66:	71 96       	adiw	r30, 0x11	; 17
    3c68:	b9 01       	movw	r22, r18
    3c6a:	9f 01       	movw	r18, r30
    3c6c:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <RTC_voidUpdateClockTime>

			    // Message displayed in Clock Mode
			    Lcd_CLR(&Lcd1);
    3c70:	82 e8       	ldi	r24, 0x82	; 130
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
			    Lcd_WriteString(&Lcd1,InClockMode);
    3c78:	82 e8       	ldi	r24, 0x82	; 130
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	2d ec       	ldi	r18, 0xCD	; 205
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	b9 01       	movw	r22, r18
    3c82:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
			    Lcd_GotoPosition(&Lcd1,LCD_LINE2,0);
    3c86:	82 e8       	ldi	r24, 0x82	; 130
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	61 e0       	ldi	r22, 0x01	; 1
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <Lcd_GotoPosition>
			    Lcd_WriteString(&Lcd1,ClockModeExit);
    3c92:	82 e8       	ldi	r24, 0x82	; 130
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	28 ed       	ldi	r18, 0xD8	; 216
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	b9 01       	movw	r22, r18
    3c9c:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    3ca0:	be c0       	rjmp	.+380    	; 0x3e1e <main+0x2ec>

			}
			// Timer Mode
			else if(Loc_u8pressedKey == '2'){
    3ca2:	88 89       	ldd	r24, Y+16	; 0x10
    3ca4:	82 33       	cpi	r24, 0x32	; 50
    3ca6:	01 f5       	brne	.+64     	; 0x3ce8 <main+0x1b6>
				FirstTime=0;
    3ca8:	1f 86       	std	Y+15, r1	; 0x0f

				// Zero all 7 seg
				Global_u8Seconds=0;
    3caa:	10 92 2a 01 	sts	0x012A, r1
				Global_u8Minutes=0;
    3cae:	10 92 2c 01 	sts	0x012C, r1
				Global_u8Hours=0;
    3cb2:	10 92 2b 01 	sts	0x012B, r1

				// Message displayed in Timer Mode
				Lcd_CLR(&Lcd1);
    3cb6:	82 e8       	ldi	r24, 0x82	; 130
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
				Lcd_WriteString(&Lcd1,InTimerMode);
    3cbe:	82 e8       	ldi	r24, 0x82	; 130
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	2d ee       	ldi	r18, 0xED	; 237
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	b9 01       	movw	r22, r18
    3cc8:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
				Lcd_GotoPosition(&Lcd1,LCD_LINE2,0);
    3ccc:	82 e8       	ldi	r24, 0x82	; 130
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	61 e0       	ldi	r22, 0x01	; 1
    3cd2:	40 e0       	ldi	r20, 0x00	; 0
    3cd4:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <Lcd_GotoPosition>
				Lcd_WriteString(&Lcd1,TimerModeExit);
    3cd8:	82 e8       	ldi	r24, 0x82	; 130
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	28 ef       	ldi	r18, 0xF8	; 248
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	b9 01       	movw	r22, r18
    3ce2:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    3ce6:	9b c0       	rjmp	.+310    	; 0x3e1e <main+0x2ec>
			}
			// Wrong input from Keypad
			else {

				// Wrong Message
				Lcd_CLR(&Lcd1);
    3ce8:	82 e8       	ldi	r24, 0x82	; 130
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
				Lcd_GotoPosition(&Lcd1,LCD_LINE1,0);
    3cf0:	82 e8       	ldi	r24, 0x82	; 130
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	60 e0       	ldi	r22, 0x00	; 0
    3cf6:	40 e0       	ldi	r20, 0x00	; 0
    3cf8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <Lcd_GotoPosition>
				Lcd_WriteString(&Lcd1,WrongChoice);
    3cfc:	82 e8       	ldi	r24, 0x82	; 130
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	28 e0       	ldi	r18, 0x08	; 8
    3d02:	31 e0       	ldi	r19, 0x01	; 1
    3d04:	b9 01       	movw	r22, r18
    3d06:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	a8 ec       	ldi	r26, 0xC8	; 200
    3d10:	b2 e4       	ldi	r27, 0x42	; 66
    3d12:	8b 87       	std	Y+11, r24	; 0x0b
    3d14:	9c 87       	std	Y+12, r25	; 0x0c
    3d16:	ad 87       	std	Y+13, r26	; 0x0d
    3d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	4a ef       	ldi	r20, 0xFA	; 250
    3d28:	54 e4       	ldi	r21, 0x44	; 68
    3d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	8f 83       	std	Y+7, r24	; 0x07
    3d34:	98 87       	std	Y+8, r25	; 0x08
    3d36:	a9 87       	std	Y+9, r26	; 0x09
    3d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3c:	78 85       	ldd	r23, Y+8	; 0x08
    3d3e:	89 85       	ldd	r24, Y+9	; 0x09
    3d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e8       	ldi	r20, 0x80	; 128
    3d48:	5f e3       	ldi	r21, 0x3F	; 63
    3d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d4e:	88 23       	and	r24, r24
    3d50:	2c f4       	brge	.+10     	; 0x3d5c <main+0x22a>
		__ticks = 1;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	9e 83       	std	Y+6, r25	; 0x06
    3d58:	8d 83       	std	Y+5, r24	; 0x05
    3d5a:	3f c0       	rjmp	.+126    	; 0x3dda <main+0x2a8>
	else if (__tmp > 65535)
    3d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5e:	78 85       	ldd	r23, Y+8	; 0x08
    3d60:	89 85       	ldd	r24, Y+9	; 0x09
    3d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	3f ef       	ldi	r19, 0xFF	; 255
    3d68:	4f e7       	ldi	r20, 0x7F	; 127
    3d6a:	57 e4       	ldi	r21, 0x47	; 71
    3d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d70:	18 16       	cp	r1, r24
    3d72:	4c f5       	brge	.+82     	; 0x3dc6 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e2       	ldi	r20, 0x20	; 32
    3d82:	51 e4       	ldi	r21, 0x41	; 65
    3d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	bc 01       	movw	r22, r24
    3d8e:	cd 01       	movw	r24, r26
    3d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	9e 83       	std	Y+6, r25	; 0x06
    3d9a:	8d 83       	std	Y+5, r24	; 0x05
    3d9c:	0f c0       	rjmp	.+30     	; 0x3dbc <main+0x28a>
    3d9e:	88 ec       	ldi	r24, 0xC8	; 200
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	9c 83       	std	Y+4, r25	; 0x04
    3da4:	8b 83       	std	Y+3, r24	; 0x03
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <main+0x278>
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	9e 81       	ldd	r25, Y+6	; 0x06
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	9e 83       	std	Y+6, r25	; 0x06
    3dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	69 f7       	brne	.-38     	; 0x3d9e <main+0x26c>
    3dc4:	14 c0       	rjmp	.+40     	; 0x3dee <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc8:	78 85       	ldd	r23, Y+8	; 0x08
    3dca:	89 85       	ldd	r24, Y+9	; 0x09
    3dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	9e 83       	std	Y+6, r25	; 0x06
    3dd8:	8d 83       	std	Y+5, r24	; 0x05
    3dda:	8d 81       	ldd	r24, Y+5	; 0x05
    3ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	9a 81       	ldd	r25, Y+2	; 0x02
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <main+0x2b4>
    3dea:	9a 83       	std	Y+2, r25	; 0x02
    3dec:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(100);

				// Intro Message Again
				Lcd_CLR(&Lcd1);
    3dee:	82 e8       	ldi	r24, 0x82	; 130
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
				Lcd_WriteString(&Lcd1,Intro_line1);
    3df6:	82 e8       	ldi	r24, 0x82	; 130
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	29 e8       	ldi	r18, 0x89	; 137
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	b9 01       	movw	r22, r18
    3e00:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
				Lcd_GotoPosition(&Lcd1,LCD_LINE2,0);
    3e04:	82 e8       	ldi	r24, 0x82	; 130
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	61 e0       	ldi	r22, 0x01	; 1
    3e0a:	40 e0       	ldi	r20, 0x00	; 0
    3e0c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <Lcd_GotoPosition>
				Lcd_WriteString(&Lcd1,Intro_line2);
    3e10:	82 e8       	ldi	r24, 0x82	; 130
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	27 e9       	ldi	r18, 0x97	; 151
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	b9 01       	movw	r22, r18
    3e1a:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
			}

		// Display Time in 7 seg
		}
		if(FirstTime==0)
    3e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e20:	88 23       	and	r24, r24
    3e22:	09 f0       	breq	.+2      	; 0x3e26 <main+0x2f4>
    3e24:	03 cf       	rjmp	.-506    	; 0x3c2c <main+0xfa>
		RTC_voidDisplay();
    3e26:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <RTC_voidDisplay>
    3e2a:	00 cf       	rjmp	.-512    	; 0x3c2c <main+0xfa>

00003e2c <RTC_voidDisplay>:
///////////////// RTC_voidDisplay \\\\\\\\\\\\\\\\\
// Func to perform multiplexing method           \\
// It turn on each 7 seg and display value on it \\
// Then Turn It off and turn on next one         \\
///////////////////////////////////////////////////
void RTC_voidDisplay(void){
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	df 93       	push	r29
    3e32:	cf 93       	push	r28
    3e34:	cd b7       	in	r28, 0x3d	; 61
    3e36:	de b7       	in	r29, 0x3e	; 62
    3e38:	c8 55       	subi	r28, 0x58	; 88
    3e3a:	d0 40       	sbci	r29, 0x00	; 0
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	de bf       	out	0x3e, r29	; 62
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	cd bf       	out	0x3d, r28	; 61

	for(int i=0;i<6;i++)
    3e46:	fe 01       	movw	r30, r28
    3e48:	eb 5a       	subi	r30, 0xAB	; 171
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	11 82       	std	Z+1, r1	; 0x01
    3e4e:	10 82       	st	Z, r1
    3e50:	08 c4       	rjmp	.+2064   	; 0x4662 <RTC_voidDisplay+0x836>
	{
		switch(i){
    3e52:	fe 01       	movw	r30, r28
    3e54:	eb 5a       	subi	r30, 0xAB	; 171
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	69 96       	adiw	r28, 0x19	; 25
    3e5e:	9f af       	std	Y+63, r25	; 0x3f
    3e60:	8e af       	std	Y+62, r24	; 0x3e
    3e62:	69 97       	sbiw	r28, 0x19	; 25
    3e64:	69 96       	adiw	r28, 0x19	; 25
    3e66:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e68:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e6a:	69 97       	sbiw	r28, 0x19	; 25
    3e6c:	e2 30       	cpi	r30, 0x02	; 2
    3e6e:	f1 05       	cpc	r31, r1
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <RTC_voidDisplay+0x48>
    3e72:	a6 c1       	rjmp	.+844    	; 0x41c0 <RTC_voidDisplay+0x394>
    3e74:	69 96       	adiw	r28, 0x19	; 25
    3e76:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e78:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e7a:	69 97       	sbiw	r28, 0x19	; 25
    3e7c:	83 30       	cpi	r24, 0x03	; 3
    3e7e:	91 05       	cpc	r25, r1
    3e80:	7c f4       	brge	.+30     	; 0x3ea0 <RTC_voidDisplay+0x74>
    3e82:	69 96       	adiw	r28, 0x19	; 25
    3e84:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e86:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e88:	69 97       	sbiw	r28, 0x19	; 25
    3e8a:	30 97       	sbiw	r30, 0x00	; 0
    3e8c:	11 f1       	breq	.+68     	; 0x3ed2 <RTC_voidDisplay+0xa6>
    3e8e:	69 96       	adiw	r28, 0x19	; 25
    3e90:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e92:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e94:	69 97       	sbiw	r28, 0x19	; 25
    3e96:	81 30       	cpi	r24, 0x01	; 1
    3e98:	91 05       	cpc	r25, r1
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <RTC_voidDisplay+0x72>
    3e9c:	ed c0       	rjmp	.+474    	; 0x4078 <RTC_voidDisplay+0x24c>
    3e9e:	d5 c3       	rjmp	.+1962   	; 0x464a <RTC_voidDisplay+0x81e>
    3ea0:	69 96       	adiw	r28, 0x19	; 25
    3ea2:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ea4:	ff ad       	ldd	r31, Y+63	; 0x3f
    3ea6:	69 97       	sbiw	r28, 0x19	; 25
    3ea8:	e4 30       	cpi	r30, 0x04	; 4
    3eaa:	f1 05       	cpc	r31, r1
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <RTC_voidDisplay+0x84>
    3eae:	ab c2       	rjmp	.+1366   	; 0x4406 <RTC_voidDisplay+0x5da>
    3eb0:	69 96       	adiw	r28, 0x19	; 25
    3eb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eb6:	69 97       	sbiw	r28, 0x19	; 25
    3eb8:	84 30       	cpi	r24, 0x04	; 4
    3eba:	91 05       	cpc	r25, r1
    3ebc:	0c f4       	brge	.+2      	; 0x3ec0 <RTC_voidDisplay+0x94>
    3ebe:	12 c2       	rjmp	.+1060   	; 0x42e4 <RTC_voidDisplay+0x4b8>
    3ec0:	69 96       	adiw	r28, 0x19	; 25
    3ec2:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ec4:	ff ad       	ldd	r31, Y+63	; 0x3f
    3ec6:	69 97       	sbiw	r28, 0x19	; 25
    3ec8:	e5 30       	cpi	r30, 0x05	; 5
    3eca:	f1 05       	cpc	r31, r1
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <RTC_voidDisplay+0xa4>
    3ece:	2d c3       	rjmp	.+1626   	; 0x452a <RTC_voidDisplay+0x6fe>
    3ed0:	bc c3       	rjmp	.+1912   	; 0x464a <RTC_voidDisplay+0x81e>

		case 0:
			// Turn On
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_LOW);
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	eb 5a       	subi	r30, 0xAB	; 171
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	90 81       	ld	r25, Z
    3eda:	82 e0       	ldi	r24, 0x02	; 2
    3edc:	69 2f       	mov	r22, r25
    3ede:	40 e0       	ldi	r20, 0x00	; 0
    3ee0:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
			// Display
		    Seg_vidOn(&segments,Global_u8Seconds%10);
    3ee4:	80 91 2a 01 	lds	r24, 0x012A
    3ee8:	9a e0       	ldi	r25, 0x0A	; 10
    3eea:	69 2f       	mov	r22, r25
    3eec:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    3ef0:	89 2f       	mov	r24, r25
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	88 e8       	ldi	r24, 0x88	; 136
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	62 2f       	mov	r22, r18
    3efa:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Seg_vidOn>
    3efe:	fe 01       	movw	r30, r28
    3f00:	ef 5a       	subi	r30, 0xAF	; 175
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	a0 e0       	ldi	r26, 0x00	; 0
    3f0a:	bf e3       	ldi	r27, 0x3F	; 63
    3f0c:	80 83       	st	Z, r24
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	a2 83       	std	Z+2, r26	; 0x02
    3f12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f14:	8e 01       	movw	r16, r28
    3f16:	03 5b       	subi	r16, 0xB3	; 179
    3f18:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	ef 5a       	subi	r30, 0xAF	; 175
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	60 81       	ld	r22, Z
    3f22:	71 81       	ldd	r23, Z+1	; 0x01
    3f24:	82 81       	ldd	r24, Z+2	; 0x02
    3f26:	93 81       	ldd	r25, Z+3	; 0x03
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	4a ef       	ldi	r20, 0xFA	; 250
    3f2e:	54 e4       	ldi	r21, 0x44	; 68
    3f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	f8 01       	movw	r30, r16
    3f3a:	80 83       	st	Z, r24
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	a2 83       	std	Z+2, r26	; 0x02
    3f40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f42:	fe 01       	movw	r30, r28
    3f44:	e3 5b       	subi	r30, 0xB3	; 179
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e8       	ldi	r20, 0x80	; 128
    3f56:	5f e3       	ldi	r21, 0x3F	; 63
    3f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f5c:	88 23       	and	r24, r24
    3f5e:	44 f4       	brge	.+16     	; 0x3f70 <RTC_voidDisplay+0x144>
		__ticks = 1;
    3f60:	fe 01       	movw	r30, r28
    3f62:	e5 5b       	subi	r30, 0xB5	; 181
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
    3f6e:	64 c0       	rjmp	.+200    	; 0x4038 <RTC_voidDisplay+0x20c>
	else if (__tmp > 65535)
    3f70:	fe 01       	movw	r30, r28
    3f72:	e3 5b       	subi	r30, 0xB3	; 179
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	60 81       	ld	r22, Z
    3f78:	71 81       	ldd	r23, Z+1	; 0x01
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	3f ef       	ldi	r19, 0xFF	; 255
    3f82:	4f e7       	ldi	r20, 0x7F	; 127
    3f84:	57 e4       	ldi	r21, 0x47	; 71
    3f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f8a:	18 16       	cp	r1, r24
    3f8c:	0c f0       	brlt	.+2      	; 0x3f90 <RTC_voidDisplay+0x164>
    3f8e:	43 c0       	rjmp	.+134    	; 0x4016 <RTC_voidDisplay+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f90:	fe 01       	movw	r30, r28
    3f92:	ef 5a       	subi	r30, 0xAF	; 175
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	60 81       	ld	r22, Z
    3f98:	71 81       	ldd	r23, Z+1	; 0x01
    3f9a:	82 81       	ldd	r24, Z+2	; 0x02
    3f9c:	93 81       	ldd	r25, Z+3	; 0x03
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	40 e2       	ldi	r20, 0x20	; 32
    3fa4:	51 e4       	ldi	r21, 0x41	; 65
    3fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	8e 01       	movw	r16, r28
    3fb0:	05 5b       	subi	r16, 0xB5	; 181
    3fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb4:	bc 01       	movw	r22, r24
    3fb6:	cd 01       	movw	r24, r26
    3fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	80 83       	st	Z, r24
    3fc6:	1f c0       	rjmp	.+62     	; 0x4006 <RTC_voidDisplay+0x1da>
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e7 5b       	subi	r30, 0xB7	; 183
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	88 ec       	ldi	r24, 0xC8	; 200
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	91 83       	std	Z+1, r25	; 0x01
    3fd4:	80 83       	st	Z, r24
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e7 5b       	subi	r30, 0xB7	; 183
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	80 81       	ld	r24, Z
    3fde:	91 81       	ldd	r25, Z+1	; 0x01
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	f1 f7       	brne	.-4      	; 0x3fe0 <RTC_voidDisplay+0x1b4>
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e7 5b       	subi	r30, 0xB7	; 183
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fee:	de 01       	movw	r26, r28
    3ff0:	a5 5b       	subi	r26, 0xB5	; 181
    3ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e5 5b       	subi	r30, 0xB5	; 181
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 81       	ld	r24, Z
    3ffc:	91 81       	ldd	r25, Z+1	; 0x01
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	11 96       	adiw	r26, 0x01	; 1
    4002:	9c 93       	st	X, r25
    4004:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4006:	fe 01       	movw	r30, r28
    4008:	e5 5b       	subi	r30, 0xB5	; 181
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 81       	ld	r24, Z
    400e:	91 81       	ldd	r25, Z+1	; 0x01
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	d1 f6       	brne	.-76     	; 0x3fc8 <RTC_voidDisplay+0x19c>
    4014:	27 c0       	rjmp	.+78     	; 0x4064 <RTC_voidDisplay+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4016:	8e 01       	movw	r16, r28
    4018:	05 5b       	subi	r16, 0xB5	; 181
    401a:	1f 4f       	sbci	r17, 0xFF	; 255
    401c:	fe 01       	movw	r30, r28
    401e:	e3 5b       	subi	r30, 0xB3	; 179
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	60 81       	ld	r22, Z
    4024:	71 81       	ldd	r23, Z+1	; 0x01
    4026:	82 81       	ldd	r24, Z+2	; 0x02
    4028:	93 81       	ldd	r25, Z+3	; 0x03
    402a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402e:	dc 01       	movw	r26, r24
    4030:	cb 01       	movw	r24, r22
    4032:	f8 01       	movw	r30, r16
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
    4038:	de 01       	movw	r26, r28
    403a:	a9 5b       	subi	r26, 0xB9	; 185
    403c:	bf 4f       	sbci	r27, 0xFF	; 255
    403e:	fe 01       	movw	r30, r28
    4040:	e5 5b       	subi	r30, 0xB5	; 181
    4042:	ff 4f       	sbci	r31, 0xFF	; 255
    4044:	80 81       	ld	r24, Z
    4046:	91 81       	ldd	r25, Z+1	; 0x01
    4048:	8d 93       	st	X+, r24
    404a:	9c 93       	st	X, r25
    404c:	fe 01       	movw	r30, r28
    404e:	e9 5b       	subi	r30, 0xB9	; 185
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	91 81       	ldd	r25, Z+1	; 0x01
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <RTC_voidDisplay+0x22a>
    405a:	fe 01       	movw	r30, r28
    405c:	e9 5b       	subi	r30, 0xB9	; 185
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	91 83       	std	Z+1, r25	; 0x01
    4062:	80 83       	st	Z, r24
		    // Delay
			_delay_ms(RTC_MULTIPLEXING_TIME);
			// Turn off
			DIO_enuSetPinValue(DIO_u8_PORTC, i, DIO_u8_HIGH);
    4064:	fe 01       	movw	r30, r28
    4066:	eb 5a       	subi	r30, 0xAB	; 171
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	90 81       	ld	r25, Z
    406c:	82 e0       	ldi	r24, 0x02	; 2
    406e:	69 2f       	mov	r22, r25
    4070:	41 e0       	ldi	r20, 0x01	; 1
    4072:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    4076:	e9 c2       	rjmp	.+1490   	; 0x464a <RTC_voidDisplay+0x81e>
			break;
		case 1:
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_LOW);
    4078:	fe 01       	movw	r30, r28
    407a:	eb 5a       	subi	r30, 0xAB	; 171
    407c:	ff 4f       	sbci	r31, 0xFF	; 255
    407e:	90 81       	ld	r25, Z
    4080:	82 e0       	ldi	r24, 0x02	; 2
    4082:	69 2f       	mov	r22, r25
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
			Seg_vidOn(&segments,Global_u8Seconds/10);
    408a:	80 91 2a 01 	lds	r24, 0x012A
    408e:	9a e0       	ldi	r25, 0x0A	; 10
    4090:	69 2f       	mov	r22, r25
    4092:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    4096:	28 2f       	mov	r18, r24
    4098:	88 e8       	ldi	r24, 0x88	; 136
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	62 2f       	mov	r22, r18
    409e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Seg_vidOn>
    40a2:	fe 01       	movw	r30, r28
    40a4:	ed 5b       	subi	r30, 0xBD	; 189
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	a0 e0       	ldi	r26, 0x00	; 0
    40ae:	bf e3       	ldi	r27, 0x3F	; 63
    40b0:	80 83       	st	Z, r24
    40b2:	91 83       	std	Z+1, r25	; 0x01
    40b4:	a2 83       	std	Z+2, r26	; 0x02
    40b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b8:	8e 01       	movw	r16, r28
    40ba:	01 5c       	subi	r16, 0xC1	; 193
    40bc:	1f 4f       	sbci	r17, 0xFF	; 255
    40be:	fe 01       	movw	r30, r28
    40c0:	ed 5b       	subi	r30, 0xBD	; 189
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	60 81       	ld	r22, Z
    40c6:	71 81       	ldd	r23, Z+1	; 0x01
    40c8:	82 81       	ldd	r24, Z+2	; 0x02
    40ca:	93 81       	ldd	r25, Z+3	; 0x03
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	4a ef       	ldi	r20, 0xFA	; 250
    40d2:	54 e4       	ldi	r21, 0x44	; 68
    40d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	f8 01       	movw	r30, r16
    40de:	80 83       	st	Z, r24
    40e0:	91 83       	std	Z+1, r25	; 0x01
    40e2:	a2 83       	std	Z+2, r26	; 0x02
    40e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40e6:	fe 01       	movw	r30, r28
    40e8:	ff 96       	adiw	r30, 0x3f	; 63
    40ea:	60 81       	ld	r22, Z
    40ec:	71 81       	ldd	r23, Z+1	; 0x01
    40ee:	82 81       	ldd	r24, Z+2	; 0x02
    40f0:	93 81       	ldd	r25, Z+3	; 0x03
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	40 e8       	ldi	r20, 0x80	; 128
    40f8:	5f e3       	ldi	r21, 0x3F	; 63
    40fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40fe:	88 23       	and	r24, r24
    4100:	2c f4       	brge	.+10     	; 0x410c <RTC_voidDisplay+0x2e0>
		__ticks = 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	9e af       	std	Y+62, r25	; 0x3e
    4108:	8d af       	std	Y+61, r24	; 0x3d
    410a:	46 c0       	rjmp	.+140    	; 0x4198 <RTC_voidDisplay+0x36c>
	else if (__tmp > 65535)
    410c:	fe 01       	movw	r30, r28
    410e:	ff 96       	adiw	r30, 0x3f	; 63
    4110:	60 81       	ld	r22, Z
    4112:	71 81       	ldd	r23, Z+1	; 0x01
    4114:	82 81       	ldd	r24, Z+2	; 0x02
    4116:	93 81       	ldd	r25, Z+3	; 0x03
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	3f ef       	ldi	r19, 0xFF	; 255
    411c:	4f e7       	ldi	r20, 0x7F	; 127
    411e:	57 e4       	ldi	r21, 0x47	; 71
    4120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4124:	18 16       	cp	r1, r24
    4126:	64 f5       	brge	.+88     	; 0x4180 <RTC_voidDisplay+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4128:	fe 01       	movw	r30, r28
    412a:	ed 5b       	subi	r30, 0xBD	; 189
    412c:	ff 4f       	sbci	r31, 0xFF	; 255
    412e:	60 81       	ld	r22, Z
    4130:	71 81       	ldd	r23, Z+1	; 0x01
    4132:	82 81       	ldd	r24, Z+2	; 0x02
    4134:	93 81       	ldd	r25, Z+3	; 0x03
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e2       	ldi	r20, 0x20	; 32
    413c:	51 e4       	ldi	r21, 0x41	; 65
    413e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	bc 01       	movw	r22, r24
    4148:	cd 01       	movw	r24, r26
    414a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414e:	dc 01       	movw	r26, r24
    4150:	cb 01       	movw	r24, r22
    4152:	9e af       	std	Y+62, r25	; 0x3e
    4154:	8d af       	std	Y+61, r24	; 0x3d
    4156:	0f c0       	rjmp	.+30     	; 0x4176 <RTC_voidDisplay+0x34a>
    4158:	88 ec       	ldi	r24, 0xC8	; 200
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	9c af       	std	Y+60, r25	; 0x3c
    415e:	8b af       	std	Y+59, r24	; 0x3b
    4160:	8b ad       	ldd	r24, Y+59	; 0x3b
    4162:	9c ad       	ldd	r25, Y+60	; 0x3c
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	f1 f7       	brne	.-4      	; 0x4164 <RTC_voidDisplay+0x338>
    4168:	9c af       	std	Y+60, r25	; 0x3c
    416a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    416c:	8d ad       	ldd	r24, Y+61	; 0x3d
    416e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	9e af       	std	Y+62, r25	; 0x3e
    4174:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4176:	8d ad       	ldd	r24, Y+61	; 0x3d
    4178:	9e ad       	ldd	r25, Y+62	; 0x3e
    417a:	00 97       	sbiw	r24, 0x00	; 0
    417c:	69 f7       	brne	.-38     	; 0x4158 <RTC_voidDisplay+0x32c>
    417e:	16 c0       	rjmp	.+44     	; 0x41ac <RTC_voidDisplay+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4180:	fe 01       	movw	r30, r28
    4182:	ff 96       	adiw	r30, 0x3f	; 63
    4184:	60 81       	ld	r22, Z
    4186:	71 81       	ldd	r23, Z+1	; 0x01
    4188:	82 81       	ldd	r24, Z+2	; 0x02
    418a:	93 81       	ldd	r25, Z+3	; 0x03
    418c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	9e af       	std	Y+62, r25	; 0x3e
    4196:	8d af       	std	Y+61, r24	; 0x3d
    4198:	8d ad       	ldd	r24, Y+61	; 0x3d
    419a:	9e ad       	ldd	r25, Y+62	; 0x3e
    419c:	9a af       	std	Y+58, r25	; 0x3a
    419e:	89 af       	std	Y+57, r24	; 0x39
    41a0:	89 ad       	ldd	r24, Y+57	; 0x39
    41a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <RTC_voidDisplay+0x378>
    41a8:	9a af       	std	Y+58, r25	; 0x3a
    41aa:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(RTC_MULTIPLEXING_TIME);
			DIO_enuSetPinValue(DIO_u8_PORTC, i, DIO_u8_HIGH);
    41ac:	fe 01       	movw	r30, r28
    41ae:	eb 5a       	subi	r30, 0xAB	; 171
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	90 81       	ld	r25, Z
    41b4:	82 e0       	ldi	r24, 0x02	; 2
    41b6:	69 2f       	mov	r22, r25
    41b8:	41 e0       	ldi	r20, 0x01	; 1
    41ba:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    41be:	45 c2       	rjmp	.+1162   	; 0x464a <RTC_voidDisplay+0x81e>
			break;
		case 2:
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_LOW);
    41c0:	fe 01       	movw	r30, r28
    41c2:	eb 5a       	subi	r30, 0xAB	; 171
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	90 81       	ld	r25, Z
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	69 2f       	mov	r22, r25
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
			Seg_vidOn(&segments,Global_u8Minutes%10);
    41d2:	80 91 2c 01 	lds	r24, 0x012C
    41d6:	9a e0       	ldi	r25, 0x0A	; 10
    41d8:	69 2f       	mov	r22, r25
    41da:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    41de:	89 2f       	mov	r24, r25
    41e0:	28 2f       	mov	r18, r24
    41e2:	88 e8       	ldi	r24, 0x88	; 136
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	62 2f       	mov	r22, r18
    41e8:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Seg_vidOn>
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a0 e0       	ldi	r26, 0x00	; 0
    41f2:	bf e3       	ldi	r27, 0x3F	; 63
    41f4:	8d ab       	std	Y+53, r24	; 0x35
    41f6:	9e ab       	std	Y+54, r25	; 0x36
    41f8:	af ab       	std	Y+55, r26	; 0x37
    41fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41fc:	6d a9       	ldd	r22, Y+53	; 0x35
    41fe:	7e a9       	ldd	r23, Y+54	; 0x36
    4200:	8f a9       	ldd	r24, Y+55	; 0x37
    4202:	98 ad       	ldd	r25, Y+56	; 0x38
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4a ef       	ldi	r20, 0xFA	; 250
    420a:	54 e4       	ldi	r21, 0x44	; 68
    420c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	89 ab       	std	Y+49, r24	; 0x31
    4216:	9a ab       	std	Y+50, r25	; 0x32
    4218:	ab ab       	std	Y+51, r26	; 0x33
    421a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    421c:	69 a9       	ldd	r22, Y+49	; 0x31
    421e:	7a a9       	ldd	r23, Y+50	; 0x32
    4220:	8b a9       	ldd	r24, Y+51	; 0x33
    4222:	9c a9       	ldd	r25, Y+52	; 0x34
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e8       	ldi	r20, 0x80	; 128
    422a:	5f e3       	ldi	r21, 0x3F	; 63
    422c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4230:	88 23       	and	r24, r24
    4232:	2c f4       	brge	.+10     	; 0x423e <RTC_voidDisplay+0x412>
		__ticks = 1;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	98 ab       	std	Y+48, r25	; 0x30
    423a:	8f a7       	std	Y+47, r24	; 0x2f
    423c:	3f c0       	rjmp	.+126    	; 0x42bc <RTC_voidDisplay+0x490>
	else if (__tmp > 65535)
    423e:	69 a9       	ldd	r22, Y+49	; 0x31
    4240:	7a a9       	ldd	r23, Y+50	; 0x32
    4242:	8b a9       	ldd	r24, Y+51	; 0x33
    4244:	9c a9       	ldd	r25, Y+52	; 0x34
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	3f ef       	ldi	r19, 0xFF	; 255
    424a:	4f e7       	ldi	r20, 0x7F	; 127
    424c:	57 e4       	ldi	r21, 0x47	; 71
    424e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4252:	18 16       	cp	r1, r24
    4254:	4c f5       	brge	.+82     	; 0x42a8 <RTC_voidDisplay+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4256:	6d a9       	ldd	r22, Y+53	; 0x35
    4258:	7e a9       	ldd	r23, Y+54	; 0x36
    425a:	8f a9       	ldd	r24, Y+55	; 0x37
    425c:	98 ad       	ldd	r25, Y+56	; 0x38
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e2       	ldi	r20, 0x20	; 32
    4264:	51 e4       	ldi	r21, 0x41	; 65
    4266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	bc 01       	movw	r22, r24
    4270:	cd 01       	movw	r24, r26
    4272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	98 ab       	std	Y+48, r25	; 0x30
    427c:	8f a7       	std	Y+47, r24	; 0x2f
    427e:	0f c0       	rjmp	.+30     	; 0x429e <RTC_voidDisplay+0x472>
    4280:	88 ec       	ldi	r24, 0xC8	; 200
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	9e a7       	std	Y+46, r25	; 0x2e
    4286:	8d a7       	std	Y+45, r24	; 0x2d
    4288:	8d a5       	ldd	r24, Y+45	; 0x2d
    428a:	9e a5       	ldd	r25, Y+46	; 0x2e
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <RTC_voidDisplay+0x460>
    4290:	9e a7       	std	Y+46, r25	; 0x2e
    4292:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4294:	8f a5       	ldd	r24, Y+47	; 0x2f
    4296:	98 a9       	ldd	r25, Y+48	; 0x30
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	98 ab       	std	Y+48, r25	; 0x30
    429c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    429e:	8f a5       	ldd	r24, Y+47	; 0x2f
    42a0:	98 a9       	ldd	r25, Y+48	; 0x30
    42a2:	00 97       	sbiw	r24, 0x00	; 0
    42a4:	69 f7       	brne	.-38     	; 0x4280 <RTC_voidDisplay+0x454>
    42a6:	14 c0       	rjmp	.+40     	; 0x42d0 <RTC_voidDisplay+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a8:	69 a9       	ldd	r22, Y+49	; 0x31
    42aa:	7a a9       	ldd	r23, Y+50	; 0x32
    42ac:	8b a9       	ldd	r24, Y+51	; 0x33
    42ae:	9c a9       	ldd	r25, Y+52	; 0x34
    42b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	98 ab       	std	Y+48, r25	; 0x30
    42ba:	8f a7       	std	Y+47, r24	; 0x2f
    42bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    42be:	98 a9       	ldd	r25, Y+48	; 0x30
    42c0:	9c a7       	std	Y+44, r25	; 0x2c
    42c2:	8b a7       	std	Y+43, r24	; 0x2b
    42c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    42c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    42c8:	01 97       	sbiw	r24, 0x01	; 1
    42ca:	f1 f7       	brne	.-4      	; 0x42c8 <RTC_voidDisplay+0x49c>
    42cc:	9c a7       	std	Y+44, r25	; 0x2c
    42ce:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(RTC_MULTIPLEXING_TIME);
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_HIGH);
    42d0:	fe 01       	movw	r30, r28
    42d2:	eb 5a       	subi	r30, 0xAB	; 171
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	90 81       	ld	r25, Z
    42d8:	82 e0       	ldi	r24, 0x02	; 2
    42da:	69 2f       	mov	r22, r25
    42dc:	41 e0       	ldi	r20, 0x01	; 1
    42de:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    42e2:	b3 c1       	rjmp	.+870    	; 0x464a <RTC_voidDisplay+0x81e>
			break;
		case 3:
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_LOW);
    42e4:	fe 01       	movw	r30, r28
    42e6:	eb 5a       	subi	r30, 0xAB	; 171
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	90 81       	ld	r25, Z
    42ec:	82 e0       	ldi	r24, 0x02	; 2
    42ee:	69 2f       	mov	r22, r25
    42f0:	40 e0       	ldi	r20, 0x00	; 0
    42f2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
			Seg_vidOn(&segments,Global_u8Minutes/10);
    42f6:	80 91 2c 01 	lds	r24, 0x012C
    42fa:	9a e0       	ldi	r25, 0x0A	; 10
    42fc:	69 2f       	mov	r22, r25
    42fe:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    4302:	28 2f       	mov	r18, r24
    4304:	88 e8       	ldi	r24, 0x88	; 136
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	62 2f       	mov	r22, r18
    430a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Seg_vidOn>
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	a0 e0       	ldi	r26, 0x00	; 0
    4314:	bf e3       	ldi	r27, 0x3F	; 63
    4316:	8f a3       	std	Y+39, r24	; 0x27
    4318:	98 a7       	std	Y+40, r25	; 0x28
    431a:	a9 a7       	std	Y+41, r26	; 0x29
    431c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431e:	6f a1       	ldd	r22, Y+39	; 0x27
    4320:	78 a5       	ldd	r23, Y+40	; 0x28
    4322:	89 a5       	ldd	r24, Y+41	; 0x29
    4324:	9a a5       	ldd	r25, Y+42	; 0x2a
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	4a ef       	ldi	r20, 0xFA	; 250
    432c:	54 e4       	ldi	r21, 0x44	; 68
    432e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	8b a3       	std	Y+35, r24	; 0x23
    4338:	9c a3       	std	Y+36, r25	; 0x24
    433a:	ad a3       	std	Y+37, r26	; 0x25
    433c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    433e:	6b a1       	ldd	r22, Y+35	; 0x23
    4340:	7c a1       	ldd	r23, Y+36	; 0x24
    4342:	8d a1       	ldd	r24, Y+37	; 0x25
    4344:	9e a1       	ldd	r25, Y+38	; 0x26
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	40 e8       	ldi	r20, 0x80	; 128
    434c:	5f e3       	ldi	r21, 0x3F	; 63
    434e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4352:	88 23       	and	r24, r24
    4354:	2c f4       	brge	.+10     	; 0x4360 <RTC_voidDisplay+0x534>
		__ticks = 1;
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	9a a3       	std	Y+34, r25	; 0x22
    435c:	89 a3       	std	Y+33, r24	; 0x21
    435e:	3f c0       	rjmp	.+126    	; 0x43de <RTC_voidDisplay+0x5b2>
	else if (__tmp > 65535)
    4360:	6b a1       	ldd	r22, Y+35	; 0x23
    4362:	7c a1       	ldd	r23, Y+36	; 0x24
    4364:	8d a1       	ldd	r24, Y+37	; 0x25
    4366:	9e a1       	ldd	r25, Y+38	; 0x26
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	3f ef       	ldi	r19, 0xFF	; 255
    436c:	4f e7       	ldi	r20, 0x7F	; 127
    436e:	57 e4       	ldi	r21, 0x47	; 71
    4370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4374:	18 16       	cp	r1, r24
    4376:	4c f5       	brge	.+82     	; 0x43ca <RTC_voidDisplay+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4378:	6f a1       	ldd	r22, Y+39	; 0x27
    437a:	78 a5       	ldd	r23, Y+40	; 0x28
    437c:	89 a5       	ldd	r24, Y+41	; 0x29
    437e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	40 e2       	ldi	r20, 0x20	; 32
    4386:	51 e4       	ldi	r21, 0x41	; 65
    4388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	bc 01       	movw	r22, r24
    4392:	cd 01       	movw	r24, r26
    4394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	9a a3       	std	Y+34, r25	; 0x22
    439e:	89 a3       	std	Y+33, r24	; 0x21
    43a0:	0f c0       	rjmp	.+30     	; 0x43c0 <RTC_voidDisplay+0x594>
    43a2:	88 ec       	ldi	r24, 0xC8	; 200
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	98 a3       	std	Y+32, r25	; 0x20
    43a8:	8f 8f       	std	Y+31, r24	; 0x1f
    43aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43ac:	98 a1       	ldd	r25, Y+32	; 0x20
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	f1 f7       	brne	.-4      	; 0x43ae <RTC_voidDisplay+0x582>
    43b2:	98 a3       	std	Y+32, r25	; 0x20
    43b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b6:	89 a1       	ldd	r24, Y+33	; 0x21
    43b8:	9a a1       	ldd	r25, Y+34	; 0x22
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	9a a3       	std	Y+34, r25	; 0x22
    43be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43c0:	89 a1       	ldd	r24, Y+33	; 0x21
    43c2:	9a a1       	ldd	r25, Y+34	; 0x22
    43c4:	00 97       	sbiw	r24, 0x00	; 0
    43c6:	69 f7       	brne	.-38     	; 0x43a2 <RTC_voidDisplay+0x576>
    43c8:	14 c0       	rjmp	.+40     	; 0x43f2 <RTC_voidDisplay+0x5c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ca:	6b a1       	ldd	r22, Y+35	; 0x23
    43cc:	7c a1       	ldd	r23, Y+36	; 0x24
    43ce:	8d a1       	ldd	r24, Y+37	; 0x25
    43d0:	9e a1       	ldd	r25, Y+38	; 0x26
    43d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	9a a3       	std	Y+34, r25	; 0x22
    43dc:	89 a3       	std	Y+33, r24	; 0x21
    43de:	89 a1       	ldd	r24, Y+33	; 0x21
    43e0:	9a a1       	ldd	r25, Y+34	; 0x22
    43e2:	9e 8f       	std	Y+30, r25	; 0x1e
    43e4:	8d 8f       	std	Y+29, r24	; 0x1d
    43e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43ea:	01 97       	sbiw	r24, 0x01	; 1
    43ec:	f1 f7       	brne	.-4      	; 0x43ea <RTC_voidDisplay+0x5be>
    43ee:	9e 8f       	std	Y+30, r25	; 0x1e
    43f0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(RTC_MULTIPLEXING_TIME);
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_HIGH);
    43f2:	fe 01       	movw	r30, r28
    43f4:	eb 5a       	subi	r30, 0xAB	; 171
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	90 81       	ld	r25, Z
    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	69 2f       	mov	r22, r25
    43fe:	41 e0       	ldi	r20, 0x01	; 1
    4400:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    4404:	22 c1       	rjmp	.+580    	; 0x464a <RTC_voidDisplay+0x81e>
			break;
		case 4:
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_LOW);
    4406:	fe 01       	movw	r30, r28
    4408:	eb 5a       	subi	r30, 0xAB	; 171
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	90 81       	ld	r25, Z
    440e:	82 e0       	ldi	r24, 0x02	; 2
    4410:	69 2f       	mov	r22, r25
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
			Seg_vidOn(&segments,Global_u8Hours%10);
    4418:	80 91 2b 01 	lds	r24, 0x012B
    441c:	9a e0       	ldi	r25, 0x0A	; 10
    441e:	69 2f       	mov	r22, r25
    4420:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    4424:	89 2f       	mov	r24, r25
    4426:	28 2f       	mov	r18, r24
    4428:	88 e8       	ldi	r24, 0x88	; 136
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	62 2f       	mov	r22, r18
    442e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Seg_vidOn>
    4432:	80 e0       	ldi	r24, 0x00	; 0
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	a0 e0       	ldi	r26, 0x00	; 0
    4438:	bf e3       	ldi	r27, 0x3F	; 63
    443a:	89 8f       	std	Y+25, r24	; 0x19
    443c:	9a 8f       	std	Y+26, r25	; 0x1a
    443e:	ab 8f       	std	Y+27, r26	; 0x1b
    4440:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4442:	69 8d       	ldd	r22, Y+25	; 0x19
    4444:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	4a ef       	ldi	r20, 0xFA	; 250
    4450:	54 e4       	ldi	r21, 0x44	; 68
    4452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	8d 8b       	std	Y+21, r24	; 0x15
    445c:	9e 8b       	std	Y+22, r25	; 0x16
    445e:	af 8b       	std	Y+23, r26	; 0x17
    4460:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4462:	6d 89       	ldd	r22, Y+21	; 0x15
    4464:	7e 89       	ldd	r23, Y+22	; 0x16
    4466:	8f 89       	ldd	r24, Y+23	; 0x17
    4468:	98 8d       	ldd	r25, Y+24	; 0x18
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e8       	ldi	r20, 0x80	; 128
    4470:	5f e3       	ldi	r21, 0x3F	; 63
    4472:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4476:	88 23       	and	r24, r24
    4478:	2c f4       	brge	.+10     	; 0x4484 <RTC_voidDisplay+0x658>
		__ticks = 1;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	9c 8b       	std	Y+20, r25	; 0x14
    4480:	8b 8b       	std	Y+19, r24	; 0x13
    4482:	3f c0       	rjmp	.+126    	; 0x4502 <RTC_voidDisplay+0x6d6>
	else if (__tmp > 65535)
    4484:	6d 89       	ldd	r22, Y+21	; 0x15
    4486:	7e 89       	ldd	r23, Y+22	; 0x16
    4488:	8f 89       	ldd	r24, Y+23	; 0x17
    448a:	98 8d       	ldd	r25, Y+24	; 0x18
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	3f ef       	ldi	r19, 0xFF	; 255
    4490:	4f e7       	ldi	r20, 0x7F	; 127
    4492:	57 e4       	ldi	r21, 0x47	; 71
    4494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4498:	18 16       	cp	r1, r24
    449a:	4c f5       	brge	.+82     	; 0x44ee <RTC_voidDisplay+0x6c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449c:	69 8d       	ldd	r22, Y+25	; 0x19
    449e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e2       	ldi	r20, 0x20	; 32
    44aa:	51 e4       	ldi	r21, 0x41	; 65
    44ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	9c 8b       	std	Y+20, r25	; 0x14
    44c2:	8b 8b       	std	Y+19, r24	; 0x13
    44c4:	0f c0       	rjmp	.+30     	; 0x44e4 <RTC_voidDisplay+0x6b8>
    44c6:	88 ec       	ldi	r24, 0xC8	; 200
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	9a 8b       	std	Y+18, r25	; 0x12
    44cc:	89 8b       	std	Y+17, r24	; 0x11
    44ce:	89 89       	ldd	r24, Y+17	; 0x11
    44d0:	9a 89       	ldd	r25, Y+18	; 0x12
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	f1 f7       	brne	.-4      	; 0x44d2 <RTC_voidDisplay+0x6a6>
    44d6:	9a 8b       	std	Y+18, r25	; 0x12
    44d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44da:	8b 89       	ldd	r24, Y+19	; 0x13
    44dc:	9c 89       	ldd	r25, Y+20	; 0x14
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	9c 8b       	std	Y+20, r25	; 0x14
    44e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e4:	8b 89       	ldd	r24, Y+19	; 0x13
    44e6:	9c 89       	ldd	r25, Y+20	; 0x14
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	69 f7       	brne	.-38     	; 0x44c6 <RTC_voidDisplay+0x69a>
    44ec:	14 c0       	rjmp	.+40     	; 0x4516 <RTC_voidDisplay+0x6ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ee:	6d 89       	ldd	r22, Y+21	; 0x15
    44f0:	7e 89       	ldd	r23, Y+22	; 0x16
    44f2:	8f 89       	ldd	r24, Y+23	; 0x17
    44f4:	98 8d       	ldd	r25, Y+24	; 0x18
    44f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	9c 8b       	std	Y+20, r25	; 0x14
    4500:	8b 8b       	std	Y+19, r24	; 0x13
    4502:	8b 89       	ldd	r24, Y+19	; 0x13
    4504:	9c 89       	ldd	r25, Y+20	; 0x14
    4506:	98 8b       	std	Y+16, r25	; 0x10
    4508:	8f 87       	std	Y+15, r24	; 0x0f
    450a:	8f 85       	ldd	r24, Y+15	; 0x0f
    450c:	98 89       	ldd	r25, Y+16	; 0x10
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <RTC_voidDisplay+0x6e2>
    4512:	98 8b       	std	Y+16, r25	; 0x10
    4514:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(RTC_MULTIPLEXING_TIME);
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_HIGH);
    4516:	fe 01       	movw	r30, r28
    4518:	eb 5a       	subi	r30, 0xAB	; 171
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	90 81       	ld	r25, Z
    451e:	82 e0       	ldi	r24, 0x02	; 2
    4520:	69 2f       	mov	r22, r25
    4522:	41 e0       	ldi	r20, 0x01	; 1
    4524:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
    4528:	90 c0       	rjmp	.+288    	; 0x464a <RTC_voidDisplay+0x81e>
			break;
		case 5:
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_LOW);
    452a:	fe 01       	movw	r30, r28
    452c:	eb 5a       	subi	r30, 0xAB	; 171
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	90 81       	ld	r25, Z
    4532:	82 e0       	ldi	r24, 0x02	; 2
    4534:	69 2f       	mov	r22, r25
    4536:	40 e0       	ldi	r20, 0x00	; 0
    4538:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
			Seg_vidOn(&segments,Global_u8Hours/10);
    453c:	80 91 2b 01 	lds	r24, 0x012B
    4540:	9a e0       	ldi	r25, 0x0A	; 10
    4542:	69 2f       	mov	r22, r25
    4544:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__udivmodqi4>
    4548:	28 2f       	mov	r18, r24
    454a:	88 e8       	ldi	r24, 0x88	; 136
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	62 2f       	mov	r22, r18
    4550:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Seg_vidOn>
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	a0 e0       	ldi	r26, 0x00	; 0
    455a:	bf e3       	ldi	r27, 0x3F	; 63
    455c:	8b 87       	std	Y+11, r24	; 0x0b
    455e:	9c 87       	std	Y+12, r25	; 0x0c
    4560:	ad 87       	std	Y+13, r26	; 0x0d
    4562:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4564:	6b 85       	ldd	r22, Y+11	; 0x0b
    4566:	7c 85       	ldd	r23, Y+12	; 0x0c
    4568:	8d 85       	ldd	r24, Y+13	; 0x0d
    456a:	9e 85       	ldd	r25, Y+14	; 0x0e
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	30 e0       	ldi	r19, 0x00	; 0
    4570:	4a ef       	ldi	r20, 0xFA	; 250
    4572:	54 e4       	ldi	r21, 0x44	; 68
    4574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4578:	dc 01       	movw	r26, r24
    457a:	cb 01       	movw	r24, r22
    457c:	8f 83       	std	Y+7, r24	; 0x07
    457e:	98 87       	std	Y+8, r25	; 0x08
    4580:	a9 87       	std	Y+9, r26	; 0x09
    4582:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4584:	6f 81       	ldd	r22, Y+7	; 0x07
    4586:	78 85       	ldd	r23, Y+8	; 0x08
    4588:	89 85       	ldd	r24, Y+9	; 0x09
    458a:	9a 85       	ldd	r25, Y+10	; 0x0a
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 e8       	ldi	r20, 0x80	; 128
    4592:	5f e3       	ldi	r21, 0x3F	; 63
    4594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4598:	88 23       	and	r24, r24
    459a:	2c f4       	brge	.+10     	; 0x45a6 <RTC_voidDisplay+0x77a>
		__ticks = 1;
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	9e 83       	std	Y+6, r25	; 0x06
    45a2:	8d 83       	std	Y+5, r24	; 0x05
    45a4:	3f c0       	rjmp	.+126    	; 0x4624 <RTC_voidDisplay+0x7f8>
	else if (__tmp > 65535)
    45a6:	6f 81       	ldd	r22, Y+7	; 0x07
    45a8:	78 85       	ldd	r23, Y+8	; 0x08
    45aa:	89 85       	ldd	r24, Y+9	; 0x09
    45ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	3f ef       	ldi	r19, 0xFF	; 255
    45b2:	4f e7       	ldi	r20, 0x7F	; 127
    45b4:	57 e4       	ldi	r21, 0x47	; 71
    45b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45ba:	18 16       	cp	r1, r24
    45bc:	4c f5       	brge	.+82     	; 0x4610 <RTC_voidDisplay+0x7e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45be:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	40 e2       	ldi	r20, 0x20	; 32
    45cc:	51 e4       	ldi	r21, 0x41	; 65
    45ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	bc 01       	movw	r22, r24
    45d8:	cd 01       	movw	r24, r26
    45da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	9e 83       	std	Y+6, r25	; 0x06
    45e4:	8d 83       	std	Y+5, r24	; 0x05
    45e6:	0f c0       	rjmp	.+30     	; 0x4606 <RTC_voidDisplay+0x7da>
    45e8:	88 ec       	ldi	r24, 0xC8	; 200
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	9c 83       	std	Y+4, r25	; 0x04
    45ee:	8b 83       	std	Y+3, r24	; 0x03
    45f0:	8b 81       	ldd	r24, Y+3	; 0x03
    45f2:	9c 81       	ldd	r25, Y+4	; 0x04
    45f4:	01 97       	sbiw	r24, 0x01	; 1
    45f6:	f1 f7       	brne	.-4      	; 0x45f4 <RTC_voidDisplay+0x7c8>
    45f8:	9c 83       	std	Y+4, r25	; 0x04
    45fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fc:	8d 81       	ldd	r24, Y+5	; 0x05
    45fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	9e 83       	std	Y+6, r25	; 0x06
    4604:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4606:	8d 81       	ldd	r24, Y+5	; 0x05
    4608:	9e 81       	ldd	r25, Y+6	; 0x06
    460a:	00 97       	sbiw	r24, 0x00	; 0
    460c:	69 f7       	brne	.-38     	; 0x45e8 <RTC_voidDisplay+0x7bc>
    460e:	14 c0       	rjmp	.+40     	; 0x4638 <RTC_voidDisplay+0x80c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4610:	6f 81       	ldd	r22, Y+7	; 0x07
    4612:	78 85       	ldd	r23, Y+8	; 0x08
    4614:	89 85       	ldd	r24, Y+9	; 0x09
    4616:	9a 85       	ldd	r25, Y+10	; 0x0a
    4618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	9e 83       	std	Y+6, r25	; 0x06
    4622:	8d 83       	std	Y+5, r24	; 0x05
    4624:	8d 81       	ldd	r24, Y+5	; 0x05
    4626:	9e 81       	ldd	r25, Y+6	; 0x06
    4628:	9a 83       	std	Y+2, r25	; 0x02
    462a:	89 83       	std	Y+1, r24	; 0x01
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	9a 81       	ldd	r25, Y+2	; 0x02
    4630:	01 97       	sbiw	r24, 0x01	; 1
    4632:	f1 f7       	brne	.-4      	; 0x4630 <RTC_voidDisplay+0x804>
    4634:	9a 83       	std	Y+2, r25	; 0x02
    4636:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(RTC_MULTIPLEXING_TIME);
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_HIGH);
    4638:	fe 01       	movw	r30, r28
    463a:	eb 5a       	subi	r30, 0xAB	; 171
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	90 81       	ld	r25, Z
    4640:	82 e0       	ldi	r24, 0x02	; 2
    4642:	69 2f       	mov	r22, r25
    4644:	41 e0       	ldi	r20, 0x01	; 1
    4646:	0e 94 74 12 	call	0x24e8	; 0x24e8 <DIO_enuSetPinValue>
// It turn on each 7 seg and display value on it \\
// Then Turn It off and turn on next one         \\
///////////////////////////////////////////////////
void RTC_voidDisplay(void){

	for(int i=0;i<6;i++)
    464a:	de 01       	movw	r26, r28
    464c:	ab 5a       	subi	r26, 0xAB	; 171
    464e:	bf 4f       	sbci	r27, 0xFF	; 255
    4650:	fe 01       	movw	r30, r28
    4652:	eb 5a       	subi	r30, 0xAB	; 171
    4654:	ff 4f       	sbci	r31, 0xFF	; 255
    4656:	80 81       	ld	r24, Z
    4658:	91 81       	ldd	r25, Z+1	; 0x01
    465a:	01 96       	adiw	r24, 0x01	; 1
    465c:	11 96       	adiw	r26, 0x01	; 1
    465e:	9c 93       	st	X, r25
    4660:	8e 93       	st	-X, r24
    4662:	fe 01       	movw	r30, r28
    4664:	eb 5a       	subi	r30, 0xAB	; 171
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	86 30       	cpi	r24, 0x06	; 6
    466e:	91 05       	cpc	r25, r1
    4670:	0c f4       	brge	.+2      	; 0x4674 <RTC_voidDisplay+0x848>
    4672:	ef cb       	rjmp	.-2082   	; 0x3e52 <RTC_voidDisplay+0x26>
			DIO_enuSetPinValue(DIO_u8_PORTC, i , DIO_u8_HIGH);
			break;
		default:break;
		}
	}
}
    4674:	c8 5a       	subi	r28, 0xA8	; 168
    4676:	df 4f       	sbci	r29, 0xFF	; 255
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	f8 94       	cli
    467c:	de bf       	out	0x3e, r29	; 62
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	cd bf       	out	0x3d, r28	; 61
    4682:	cf 91       	pop	r28
    4684:	df 91       	pop	r29
    4686:	1f 91       	pop	r17
    4688:	0f 91       	pop	r16
    468a:	08 95       	ret

0000468c <RTC_u8SetClockTime>:

////////////////////// RTC_u8SetClockTime //////////////////////
// - Get Clock values from user by KeyPad                     //
////////////////////////////////////////////////////////////////
u8 RTC_u8SetClockTime(u8 *capy_u16PtrArray,u8 capy_SizeArray){
    468c:	0f 93       	push	r16
    468e:	1f 93       	push	r17
    4690:	df 93       	push	r29
    4692:	cf 93       	push	r28
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
    4698:	cb 55       	subi	r28, 0x5B	; 91
    469a:	d0 40       	sbci	r29, 0x00	; 0
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	f8 94       	cli
    46a0:	de bf       	out	0x3e, r29	; 62
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	cd bf       	out	0x3d, r28	; 61
    46a6:	fe 01       	movw	r30, r28
    46a8:	e8 5a       	subi	r30, 0xA8	; 168
    46aa:	ff 4f       	sbci	r31, 0xFF	; 255
    46ac:	91 83       	std	Z+1, r25	; 0x01
    46ae:	80 83       	st	Z, r24
    46b0:	fe 01       	movw	r30, r28
    46b2:	e6 5a       	subi	r30, 0xA6	; 166
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	60 83       	st	Z, r22

	u8 loc_counter=0;
    46b8:	fe 01       	movw	r30, r28
    46ba:	ea 5a       	subi	r30, 0xAA	; 170
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	10 82       	st	Z, r1
	u8 loc_u8pressedKey=Keypad_NotPressed;
    46c0:	fe 01       	movw	r30, r28
    46c2:	eb 5a       	subi	r30, 0xAB	; 171
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	8f ef       	ldi	r24, 0xFF	; 255
    46c8:	80 83       	st	Z, r24
	Lcd_CLR(&Lcd1);
    46ca:	82 e8       	ldi	r24, 0x82	; 130
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
	// Enter Hours Message
	Lcd_WriteString(&Lcd1,EnterHours);
    46d2:	82 e8       	ldi	r24, 0x82	; 130
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	25 ea       	ldi	r18, 0xA5	; 165
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	b9 01       	movw	r22, r18
    46dc:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    46e0:	fe 01       	movw	r30, r28
    46e2:	ef 5a       	subi	r30, 0xAF	; 175
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	80 e0       	ldi	r24, 0x00	; 0
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	a8 ec       	ldi	r26, 0xC8	; 200
    46ec:	b2 e4       	ldi	r27, 0x42	; 66
    46ee:	80 83       	st	Z, r24
    46f0:	91 83       	std	Z+1, r25	; 0x01
    46f2:	a2 83       	std	Z+2, r26	; 0x02
    46f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46f6:	8e 01       	movw	r16, r28
    46f8:	03 5b       	subi	r16, 0xB3	; 179
    46fa:	1f 4f       	sbci	r17, 0xFF	; 255
    46fc:	fe 01       	movw	r30, r28
    46fe:	ef 5a       	subi	r30, 0xAF	; 175
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	60 81       	ld	r22, Z
    4704:	71 81       	ldd	r23, Z+1	; 0x01
    4706:	82 81       	ldd	r24, Z+2	; 0x02
    4708:	93 81       	ldd	r25, Z+3	; 0x03
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	4a ef       	ldi	r20, 0xFA	; 250
    4710:	54 e4       	ldi	r21, 0x44	; 68
    4712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	f8 01       	movw	r30, r16
    471c:	80 83       	st	Z, r24
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	a2 83       	std	Z+2, r26	; 0x02
    4722:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4724:	fe 01       	movw	r30, r28
    4726:	e3 5b       	subi	r30, 0xB3	; 179
    4728:	ff 4f       	sbci	r31, 0xFF	; 255
    472a:	60 81       	ld	r22, Z
    472c:	71 81       	ldd	r23, Z+1	; 0x01
    472e:	82 81       	ldd	r24, Z+2	; 0x02
    4730:	93 81       	ldd	r25, Z+3	; 0x03
    4732:	20 e0       	ldi	r18, 0x00	; 0
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	40 e8       	ldi	r20, 0x80	; 128
    4738:	5f e3       	ldi	r21, 0x3F	; 63
    473a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    473e:	88 23       	and	r24, r24
    4740:	44 f4       	brge	.+16     	; 0x4752 <RTC_u8SetClockTime+0xc6>
		__ticks = 1;
    4742:	fe 01       	movw	r30, r28
    4744:	e5 5b       	subi	r30, 0xB5	; 181
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	91 83       	std	Z+1, r25	; 0x01
    474e:	80 83       	st	Z, r24
    4750:	64 c0       	rjmp	.+200    	; 0x481a <RTC_u8SetClockTime+0x18e>
	else if (__tmp > 65535)
    4752:	fe 01       	movw	r30, r28
    4754:	e3 5b       	subi	r30, 0xB3	; 179
    4756:	ff 4f       	sbci	r31, 0xFF	; 255
    4758:	60 81       	ld	r22, Z
    475a:	71 81       	ldd	r23, Z+1	; 0x01
    475c:	82 81       	ldd	r24, Z+2	; 0x02
    475e:	93 81       	ldd	r25, Z+3	; 0x03
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	3f ef       	ldi	r19, 0xFF	; 255
    4764:	4f e7       	ldi	r20, 0x7F	; 127
    4766:	57 e4       	ldi	r21, 0x47	; 71
    4768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    476c:	18 16       	cp	r1, r24
    476e:	0c f0       	brlt	.+2      	; 0x4772 <RTC_u8SetClockTime+0xe6>
    4770:	43 c0       	rjmp	.+134    	; 0x47f8 <RTC_u8SetClockTime+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4772:	fe 01       	movw	r30, r28
    4774:	ef 5a       	subi	r30, 0xAF	; 175
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	60 81       	ld	r22, Z
    477a:	71 81       	ldd	r23, Z+1	; 0x01
    477c:	82 81       	ldd	r24, Z+2	; 0x02
    477e:	93 81       	ldd	r25, Z+3	; 0x03
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	40 e2       	ldi	r20, 0x20	; 32
    4786:	51 e4       	ldi	r21, 0x41	; 65
    4788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	8e 01       	movw	r16, r28
    4792:	05 5b       	subi	r16, 0xB5	; 181
    4794:	1f 4f       	sbci	r17, 0xFF	; 255
    4796:	bc 01       	movw	r22, r24
    4798:	cd 01       	movw	r24, r26
    479a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	f8 01       	movw	r30, r16
    47a4:	91 83       	std	Z+1, r25	; 0x01
    47a6:	80 83       	st	Z, r24
    47a8:	1f c0       	rjmp	.+62     	; 0x47e8 <RTC_u8SetClockTime+0x15c>
    47aa:	fe 01       	movw	r30, r28
    47ac:	e7 5b       	subi	r30, 0xB7	; 183
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	88 ec       	ldi	r24, 0xC8	; 200
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	91 83       	std	Z+1, r25	; 0x01
    47b6:	80 83       	st	Z, r24
    47b8:	fe 01       	movw	r30, r28
    47ba:	e7 5b       	subi	r30, 0xB7	; 183
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	80 81       	ld	r24, Z
    47c0:	91 81       	ldd	r25, Z+1	; 0x01
    47c2:	01 97       	sbiw	r24, 0x01	; 1
    47c4:	f1 f7       	brne	.-4      	; 0x47c2 <RTC_u8SetClockTime+0x136>
    47c6:	fe 01       	movw	r30, r28
    47c8:	e7 5b       	subi	r30, 0xB7	; 183
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	91 83       	std	Z+1, r25	; 0x01
    47ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47d0:	de 01       	movw	r26, r28
    47d2:	a5 5b       	subi	r26, 0xB5	; 181
    47d4:	bf 4f       	sbci	r27, 0xFF	; 255
    47d6:	fe 01       	movw	r30, r28
    47d8:	e5 5b       	subi	r30, 0xB5	; 181
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	80 81       	ld	r24, Z
    47de:	91 81       	ldd	r25, Z+1	; 0x01
    47e0:	01 97       	sbiw	r24, 0x01	; 1
    47e2:	11 96       	adiw	r26, 0x01	; 1
    47e4:	9c 93       	st	X, r25
    47e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e8:	fe 01       	movw	r30, r28
    47ea:	e5 5b       	subi	r30, 0xB5	; 181
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	80 81       	ld	r24, Z
    47f0:	91 81       	ldd	r25, Z+1	; 0x01
    47f2:	00 97       	sbiw	r24, 0x00	; 0
    47f4:	d1 f6       	brne	.-76     	; 0x47aa <RTC_u8SetClockTime+0x11e>
    47f6:	27 c3       	rjmp	.+1614   	; 0x4e46 <RTC_u8SetClockTime+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f8:	8e 01       	movw	r16, r28
    47fa:	05 5b       	subi	r16, 0xB5	; 181
    47fc:	1f 4f       	sbci	r17, 0xFF	; 255
    47fe:	fe 01       	movw	r30, r28
    4800:	e3 5b       	subi	r30, 0xB3	; 179
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	60 81       	ld	r22, Z
    4806:	71 81       	ldd	r23, Z+1	; 0x01
    4808:	82 81       	ldd	r24, Z+2	; 0x02
    480a:	93 81       	ldd	r25, Z+3	; 0x03
    480c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	f8 01       	movw	r30, r16
    4816:	91 83       	std	Z+1, r25	; 0x01
    4818:	80 83       	st	Z, r24
    481a:	de 01       	movw	r26, r28
    481c:	a9 5b       	subi	r26, 0xB9	; 185
    481e:	bf 4f       	sbci	r27, 0xFF	; 255
    4820:	fe 01       	movw	r30, r28
    4822:	e5 5b       	subi	r30, 0xB5	; 181
    4824:	ff 4f       	sbci	r31, 0xFF	; 255
    4826:	80 81       	ld	r24, Z
    4828:	91 81       	ldd	r25, Z+1	; 0x01
    482a:	11 96       	adiw	r26, 0x01	; 1
    482c:	9c 93       	st	X, r25
    482e:	8e 93       	st	-X, r24
    4830:	fe 01       	movw	r30, r28
    4832:	e9 5b       	subi	r30, 0xB9	; 185
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	80 81       	ld	r24, Z
    4838:	91 81       	ldd	r25, Z+1	; 0x01
    483a:	01 97       	sbiw	r24, 0x01	; 1
    483c:	f1 f7       	brne	.-4      	; 0x483a <RTC_u8SetClockTime+0x1ae>
    483e:	fe 01       	movw	r30, r28
    4840:	e9 5b       	subi	r30, 0xB9	; 185
    4842:	ff 4f       	sbci	r31, 0xFF	; 255
    4844:	91 83       	std	Z+1, r25	; 0x01
    4846:	80 83       	st	Z, r24
    4848:	fe c2       	rjmp	.+1532   	; 0x4e46 <RTC_u8SetClockTime+0x7ba>
	_delay_ms(100);
	while(loc_counter <=capy_SizeArray){

		// Get Read form Keypad
		do{
			loc_u8pressedKey=Keypad_u8GetPressedKey(&Keypad1);
    484a:	87 e8       	ldi	r24, 0x87	; 135
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	0e 94 9f 1c 	call	0x393e	; 0x393e <Keypad_u8GetPressedKey>
    4852:	fe 01       	movw	r30, r28
    4854:	eb 5a       	subi	r30, 0xAB	; 171
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	80 83       	st	Z, r24
		}while (loc_u8pressedKey==Keypad_NotPressed);
    485a:	fe 01       	movw	r30, r28
    485c:	eb 5a       	subi	r30, 0xAB	; 171
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	80 81       	ld	r24, Z
    4862:	8f 3f       	cpi	r24, 0xFF	; 255
    4864:	91 f3       	breq	.-28     	; 0x484a <RTC_u8SetClockTime+0x1be>

		// Get hours from Keypad
		if((loc_u8pressedKey!=Keypad_NotPressed) && (loc_u8pressedKey!='c'))
    4866:	fe 01       	movw	r30, r28
    4868:	eb 5a       	subi	r30, 0xAB	; 171
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	80 81       	ld	r24, Z
    486e:	8f 3f       	cpi	r24, 0xFF	; 255
    4870:	09 f4       	brne	.+2      	; 0x4874 <RTC_u8SetClockTime+0x1e8>
    4872:	ba c0       	rjmp	.+372    	; 0x49e8 <RTC_u8SetClockTime+0x35c>
    4874:	fe 01       	movw	r30, r28
    4876:	eb 5a       	subi	r30, 0xAB	; 171
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	80 81       	ld	r24, Z
    487c:	83 36       	cpi	r24, 0x63	; 99
    487e:	09 f4       	brne	.+2      	; 0x4882 <RTC_u8SetClockTime+0x1f6>
    4880:	b3 c0       	rjmp	.+358    	; 0x49e8 <RTC_u8SetClockTime+0x35c>
		{
			capy_u16PtrArray[loc_counter]=loc_u8pressedKey;
    4882:	fe 01       	movw	r30, r28
    4884:	ea 5a       	subi	r30, 0xAA	; 170
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	80 81       	ld	r24, Z
    488a:	28 2f       	mov	r18, r24
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	fe 01       	movw	r30, r28
    4890:	e8 5a       	subi	r30, 0xA8	; 168
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	80 81       	ld	r24, Z
    4896:	91 81       	ldd	r25, Z+1	; 0x01
    4898:	dc 01       	movw	r26, r24
    489a:	a2 0f       	add	r26, r18
    489c:	b3 1f       	adc	r27, r19
    489e:	fe 01       	movw	r30, r28
    48a0:	eb 5a       	subi	r30, 0xAB	; 171
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	80 81       	ld	r24, Z
    48a6:	8c 93       	st	X, r24
			u8 letter = capy_u16PtrArray[loc_counter];
    48a8:	fe 01       	movw	r30, r28
    48aa:	ea 5a       	subi	r30, 0xAA	; 170
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	80 81       	ld	r24, Z
    48b0:	28 2f       	mov	r18, r24
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	fe 01       	movw	r30, r28
    48b6:	e8 5a       	subi	r30, 0xA8	; 168
    48b8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ba:	80 81       	ld	r24, Z
    48bc:	91 81       	ldd	r25, Z+1	; 0x01
    48be:	fc 01       	movw	r30, r24
    48c0:	e2 0f       	add	r30, r18
    48c2:	f3 1f       	adc	r31, r19
    48c4:	80 81       	ld	r24, Z
    48c6:	fe 01       	movw	r30, r28
    48c8:	e9 5a       	subi	r30, 0xA9	; 169
    48ca:	ff 4f       	sbci	r31, 0xFF	; 255
    48cc:	80 83       	st	Z, r24
			Lcd_WriteLetter(&Lcd1,&letter);
    48ce:	82 e8       	ldi	r24, 0x82	; 130
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	9e 01       	movw	r18, r28
    48d4:	29 5a       	subi	r18, 0xA9	; 169
    48d6:	3f 4f       	sbci	r19, 0xFF	; 255
    48d8:	b9 01       	movw	r22, r18
    48da:	0e 94 9e 1b 	call	0x373c	; 0x373c <Lcd_WriteLetter>
    48de:	fe 01       	movw	r30, r28
    48e0:	ed 5b       	subi	r30, 0xBD	; 189
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	a8 ec       	ldi	r26, 0xC8	; 200
    48ea:	b2 e4       	ldi	r27, 0x42	; 66
    48ec:	80 83       	st	Z, r24
    48ee:	91 83       	std	Z+1, r25	; 0x01
    48f0:	a2 83       	std	Z+2, r26	; 0x02
    48f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f4:	8e 01       	movw	r16, r28
    48f6:	01 5c       	subi	r16, 0xC1	; 193
    48f8:	1f 4f       	sbci	r17, 0xFF	; 255
    48fa:	fe 01       	movw	r30, r28
    48fc:	ed 5b       	subi	r30, 0xBD	; 189
    48fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4900:	60 81       	ld	r22, Z
    4902:	71 81       	ldd	r23, Z+1	; 0x01
    4904:	82 81       	ldd	r24, Z+2	; 0x02
    4906:	93 81       	ldd	r25, Z+3	; 0x03
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	4a ef       	ldi	r20, 0xFA	; 250
    490e:	54 e4       	ldi	r21, 0x44	; 68
    4910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	f8 01       	movw	r30, r16
    491a:	80 83       	st	Z, r24
    491c:	91 83       	std	Z+1, r25	; 0x01
    491e:	a2 83       	std	Z+2, r26	; 0x02
    4920:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4922:	fe 01       	movw	r30, r28
    4924:	ff 96       	adiw	r30, 0x3f	; 63
    4926:	60 81       	ld	r22, Z
    4928:	71 81       	ldd	r23, Z+1	; 0x01
    492a:	82 81       	ldd	r24, Z+2	; 0x02
    492c:	93 81       	ldd	r25, Z+3	; 0x03
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	40 e8       	ldi	r20, 0x80	; 128
    4934:	5f e3       	ldi	r21, 0x3F	; 63
    4936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    493a:	88 23       	and	r24, r24
    493c:	2c f4       	brge	.+10     	; 0x4948 <RTC_u8SetClockTime+0x2bc>
		__ticks = 1;
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	9e af       	std	Y+62, r25	; 0x3e
    4944:	8d af       	std	Y+61, r24	; 0x3d
    4946:	46 c0       	rjmp	.+140    	; 0x49d4 <RTC_u8SetClockTime+0x348>
	else if (__tmp > 65535)
    4948:	fe 01       	movw	r30, r28
    494a:	ff 96       	adiw	r30, 0x3f	; 63
    494c:	60 81       	ld	r22, Z
    494e:	71 81       	ldd	r23, Z+1	; 0x01
    4950:	82 81       	ldd	r24, Z+2	; 0x02
    4952:	93 81       	ldd	r25, Z+3	; 0x03
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	3f ef       	ldi	r19, 0xFF	; 255
    4958:	4f e7       	ldi	r20, 0x7F	; 127
    495a:	57 e4       	ldi	r21, 0x47	; 71
    495c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4960:	18 16       	cp	r1, r24
    4962:	64 f5       	brge	.+88     	; 0x49bc <RTC_u8SetClockTime+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4964:	fe 01       	movw	r30, r28
    4966:	ed 5b       	subi	r30, 0xBD	; 189
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	60 81       	ld	r22, Z
    496c:	71 81       	ldd	r23, Z+1	; 0x01
    496e:	82 81       	ldd	r24, Z+2	; 0x02
    4970:	93 81       	ldd	r25, Z+3	; 0x03
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	40 e2       	ldi	r20, 0x20	; 32
    4978:	51 e4       	ldi	r21, 0x41	; 65
    497a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	bc 01       	movw	r22, r24
    4984:	cd 01       	movw	r24, r26
    4986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498a:	dc 01       	movw	r26, r24
    498c:	cb 01       	movw	r24, r22
    498e:	9e af       	std	Y+62, r25	; 0x3e
    4990:	8d af       	std	Y+61, r24	; 0x3d
    4992:	0f c0       	rjmp	.+30     	; 0x49b2 <RTC_u8SetClockTime+0x326>
    4994:	88 ec       	ldi	r24, 0xC8	; 200
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	9c af       	std	Y+60, r25	; 0x3c
    499a:	8b af       	std	Y+59, r24	; 0x3b
    499c:	8b ad       	ldd	r24, Y+59	; 0x3b
    499e:	9c ad       	ldd	r25, Y+60	; 0x3c
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	f1 f7       	brne	.-4      	; 0x49a0 <RTC_u8SetClockTime+0x314>
    49a4:	9c af       	std	Y+60, r25	; 0x3c
    49a6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    49aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	9e af       	std	Y+62, r25	; 0x3e
    49b0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    49b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    49b6:	00 97       	sbiw	r24, 0x00	; 0
    49b8:	69 f7       	brne	.-38     	; 0x4994 <RTC_u8SetClockTime+0x308>
    49ba:	16 c0       	rjmp	.+44     	; 0x49e8 <RTC_u8SetClockTime+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49bc:	fe 01       	movw	r30, r28
    49be:	ff 96       	adiw	r30, 0x3f	; 63
    49c0:	60 81       	ld	r22, Z
    49c2:	71 81       	ldd	r23, Z+1	; 0x01
    49c4:	82 81       	ldd	r24, Z+2	; 0x02
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	9e af       	std	Y+62, r25	; 0x3e
    49d2:	8d af       	std	Y+61, r24	; 0x3d
    49d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    49d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    49d8:	9a af       	std	Y+58, r25	; 0x3a
    49da:	89 af       	std	Y+57, r24	; 0x39
    49dc:	89 ad       	ldd	r24, Y+57	; 0x39
    49de:	9a ad       	ldd	r25, Y+58	; 0x3a
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <RTC_u8SetClockTime+0x354>
    49e4:	9a af       	std	Y+58, r25	; 0x3a
    49e6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(100);
		}

		// Get Minutes
		if(loc_counter==1)
    49e8:	fe 01       	movw	r30, r28
    49ea:	ea 5a       	subi	r30, 0xAA	; 170
    49ec:	ff 4f       	sbci	r31, 0xFF	; 255
    49ee:	80 81       	ld	r24, Z
    49f0:	81 30       	cpi	r24, 0x01	; 1
    49f2:	09 f0       	breq	.+2      	; 0x49f6 <RTC_u8SetClockTime+0x36a>
    49f4:	7d c0       	rjmp	.+250    	; 0x4af0 <RTC_u8SetClockTime+0x464>
		{
			Lcd_CLR(&Lcd1);
    49f6:	82 e8       	ldi	r24, 0x82	; 130
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
			Lcd_WriteString(&Lcd1,EnterMin);
    49fe:	82 e8       	ldi	r24, 0x82	; 130
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	23 eb       	ldi	r18, 0xB3	; 179
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	b9 01       	movw	r22, r18
    4a08:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	a8 ec       	ldi	r26, 0xC8	; 200
    4a12:	b2 e4       	ldi	r27, 0x42	; 66
    4a14:	8d ab       	std	Y+53, r24	; 0x35
    4a16:	9e ab       	std	Y+54, r25	; 0x36
    4a18:	af ab       	std	Y+55, r26	; 0x37
    4a1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a1c:	6d a9       	ldd	r22, Y+53	; 0x35
    4a1e:	7e a9       	ldd	r23, Y+54	; 0x36
    4a20:	8f a9       	ldd	r24, Y+55	; 0x37
    4a22:	98 ad       	ldd	r25, Y+56	; 0x38
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	4a ef       	ldi	r20, 0xFA	; 250
    4a2a:	54 e4       	ldi	r21, 0x44	; 68
    4a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a30:	dc 01       	movw	r26, r24
    4a32:	cb 01       	movw	r24, r22
    4a34:	89 ab       	std	Y+49, r24	; 0x31
    4a36:	9a ab       	std	Y+50, r25	; 0x32
    4a38:	ab ab       	std	Y+51, r26	; 0x33
    4a3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    4a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    4a40:	8b a9       	ldd	r24, Y+51	; 0x33
    4a42:	9c a9       	ldd	r25, Y+52	; 0x34
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	40 e8       	ldi	r20, 0x80	; 128
    4a4a:	5f e3       	ldi	r21, 0x3F	; 63
    4a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a50:	88 23       	and	r24, r24
    4a52:	2c f4       	brge	.+10     	; 0x4a5e <RTC_u8SetClockTime+0x3d2>
		__ticks = 1;
    4a54:	81 e0       	ldi	r24, 0x01	; 1
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	98 ab       	std	Y+48, r25	; 0x30
    4a5a:	8f a7       	std	Y+47, r24	; 0x2f
    4a5c:	3f c0       	rjmp	.+126    	; 0x4adc <RTC_u8SetClockTime+0x450>
	else if (__tmp > 65535)
    4a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    4a60:	7a a9       	ldd	r23, Y+50	; 0x32
    4a62:	8b a9       	ldd	r24, Y+51	; 0x33
    4a64:	9c a9       	ldd	r25, Y+52	; 0x34
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	3f ef       	ldi	r19, 0xFF	; 255
    4a6a:	4f e7       	ldi	r20, 0x7F	; 127
    4a6c:	57 e4       	ldi	r21, 0x47	; 71
    4a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a72:	18 16       	cp	r1, r24
    4a74:	4c f5       	brge	.+82     	; 0x4ac8 <RTC_u8SetClockTime+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a76:	6d a9       	ldd	r22, Y+53	; 0x35
    4a78:	7e a9       	ldd	r23, Y+54	; 0x36
    4a7a:	8f a9       	ldd	r24, Y+55	; 0x37
    4a7c:	98 ad       	ldd	r25, Y+56	; 0x38
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e2       	ldi	r20, 0x20	; 32
    4a84:	51 e4       	ldi	r21, 0x41	; 65
    4a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	bc 01       	movw	r22, r24
    4a90:	cd 01       	movw	r24, r26
    4a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a96:	dc 01       	movw	r26, r24
    4a98:	cb 01       	movw	r24, r22
    4a9a:	98 ab       	std	Y+48, r25	; 0x30
    4a9c:	8f a7       	std	Y+47, r24	; 0x2f
    4a9e:	0f c0       	rjmp	.+30     	; 0x4abe <RTC_u8SetClockTime+0x432>
    4aa0:	88 ec       	ldi	r24, 0xC8	; 200
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	9e a7       	std	Y+46, r25	; 0x2e
    4aa6:	8d a7       	std	Y+45, r24	; 0x2d
    4aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    4aaa:	9e a5       	ldd	r25, Y+46	; 0x2e
    4aac:	01 97       	sbiw	r24, 0x01	; 1
    4aae:	f1 f7       	brne	.-4      	; 0x4aac <RTC_u8SetClockTime+0x420>
    4ab0:	9e a7       	std	Y+46, r25	; 0x2e
    4ab2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	98 ab       	std	Y+48, r25	; 0x30
    4abc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    4ac2:	00 97       	sbiw	r24, 0x00	; 0
    4ac4:	69 f7       	brne	.-38     	; 0x4aa0 <RTC_u8SetClockTime+0x414>
    4ac6:	14 c0       	rjmp	.+40     	; 0x4af0 <RTC_u8SetClockTime+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    4aca:	7a a9       	ldd	r23, Y+50	; 0x32
    4acc:	8b a9       	ldd	r24, Y+51	; 0x33
    4ace:	9c a9       	ldd	r25, Y+52	; 0x34
    4ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad4:	dc 01       	movw	r26, r24
    4ad6:	cb 01       	movw	r24, r22
    4ad8:	98 ab       	std	Y+48, r25	; 0x30
    4ada:	8f a7       	std	Y+47, r24	; 0x2f
    4adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ade:	98 a9       	ldd	r25, Y+48	; 0x30
    4ae0:	9c a7       	std	Y+44, r25	; 0x2c
    4ae2:	8b a7       	std	Y+43, r24	; 0x2b
    4ae4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ae6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ae8:	01 97       	sbiw	r24, 0x01	; 1
    4aea:	f1 f7       	brne	.-4      	; 0x4ae8 <RTC_u8SetClockTime+0x45c>
    4aec:	9c a7       	std	Y+44, r25	; 0x2c
    4aee:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);
		}

		// Get Seconds
		if(loc_counter==3)
    4af0:	fe 01       	movw	r30, r28
    4af2:	ea 5a       	subi	r30, 0xAA	; 170
    4af4:	ff 4f       	sbci	r31, 0xFF	; 255
    4af6:	80 81       	ld	r24, Z
    4af8:	83 30       	cpi	r24, 0x03	; 3
    4afa:	09 f0       	breq	.+2      	; 0x4afe <RTC_u8SetClockTime+0x472>
    4afc:	7d c0       	rjmp	.+250    	; 0x4bf8 <RTC_u8SetClockTime+0x56c>
		{
			Lcd_CLR(&Lcd1);
    4afe:	82 e8       	ldi	r24, 0x82	; 130
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
			Lcd_WriteString(&Lcd1,EnterSec);
    4b06:	82 e8       	ldi	r24, 0x82	; 130
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	20 ec       	ldi	r18, 0xC0	; 192
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	b9 01       	movw	r22, r18
    4b10:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	a8 ec       	ldi	r26, 0xC8	; 200
    4b1a:	b2 e4       	ldi	r27, 0x42	; 66
    4b1c:	8f a3       	std	Y+39, r24	; 0x27
    4b1e:	98 a7       	std	Y+40, r25	; 0x28
    4b20:	a9 a7       	std	Y+41, r26	; 0x29
    4b22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b24:	6f a1       	ldd	r22, Y+39	; 0x27
    4b26:	78 a5       	ldd	r23, Y+40	; 0x28
    4b28:	89 a5       	ldd	r24, Y+41	; 0x29
    4b2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	4a ef       	ldi	r20, 0xFA	; 250
    4b32:	54 e4       	ldi	r21, 0x44	; 68
    4b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	8b a3       	std	Y+35, r24	; 0x23
    4b3e:	9c a3       	std	Y+36, r25	; 0x24
    4b40:	ad a3       	std	Y+37, r26	; 0x25
    4b42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b44:	6b a1       	ldd	r22, Y+35	; 0x23
    4b46:	7c a1       	ldd	r23, Y+36	; 0x24
    4b48:	8d a1       	ldd	r24, Y+37	; 0x25
    4b4a:	9e a1       	ldd	r25, Y+38	; 0x26
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e8       	ldi	r20, 0x80	; 128
    4b52:	5f e3       	ldi	r21, 0x3F	; 63
    4b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b58:	88 23       	and	r24, r24
    4b5a:	2c f4       	brge	.+10     	; 0x4b66 <RTC_u8SetClockTime+0x4da>
		__ticks = 1;
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	9a a3       	std	Y+34, r25	; 0x22
    4b62:	89 a3       	std	Y+33, r24	; 0x21
    4b64:	3f c0       	rjmp	.+126    	; 0x4be4 <RTC_u8SetClockTime+0x558>
	else if (__tmp > 65535)
    4b66:	6b a1       	ldd	r22, Y+35	; 0x23
    4b68:	7c a1       	ldd	r23, Y+36	; 0x24
    4b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    4b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	3f ef       	ldi	r19, 0xFF	; 255
    4b72:	4f e7       	ldi	r20, 0x7F	; 127
    4b74:	57 e4       	ldi	r21, 0x47	; 71
    4b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b7a:	18 16       	cp	r1, r24
    4b7c:	4c f5       	brge	.+82     	; 0x4bd0 <RTC_u8SetClockTime+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7e:	6f a1       	ldd	r22, Y+39	; 0x27
    4b80:	78 a5       	ldd	r23, Y+40	; 0x28
    4b82:	89 a5       	ldd	r24, Y+41	; 0x29
    4b84:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b86:	20 e0       	ldi	r18, 0x00	; 0
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e2       	ldi	r20, 0x20	; 32
    4b8c:	51 e4       	ldi	r21, 0x41	; 65
    4b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	bc 01       	movw	r22, r24
    4b98:	cd 01       	movw	r24, r26
    4b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	9a a3       	std	Y+34, r25	; 0x22
    4ba4:	89 a3       	std	Y+33, r24	; 0x21
    4ba6:	0f c0       	rjmp	.+30     	; 0x4bc6 <RTC_u8SetClockTime+0x53a>
    4ba8:	88 ec       	ldi	r24, 0xC8	; 200
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	98 a3       	std	Y+32, r25	; 0x20
    4bae:	8f 8f       	std	Y+31, r24	; 0x1f
    4bb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bb2:	98 a1       	ldd	r25, Y+32	; 0x20
    4bb4:	01 97       	sbiw	r24, 0x01	; 1
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <RTC_u8SetClockTime+0x528>
    4bb8:	98 a3       	std	Y+32, r25	; 0x20
    4bba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    4bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    4bc0:	01 97       	sbiw	r24, 0x01	; 1
    4bc2:	9a a3       	std	Y+34, r25	; 0x22
    4bc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    4bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    4bca:	00 97       	sbiw	r24, 0x00	; 0
    4bcc:	69 f7       	brne	.-38     	; 0x4ba8 <RTC_u8SetClockTime+0x51c>
    4bce:	14 c0       	rjmp	.+40     	; 0x4bf8 <RTC_u8SetClockTime+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    4bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    4bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    4bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    4bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	9a a3       	std	Y+34, r25	; 0x22
    4be2:	89 a3       	std	Y+33, r24	; 0x21
    4be4:	89 a1       	ldd	r24, Y+33	; 0x21
    4be6:	9a a1       	ldd	r25, Y+34	; 0x22
    4be8:	9e 8f       	std	Y+30, r25	; 0x1e
    4bea:	8d 8f       	std	Y+29, r24	; 0x1d
    4bec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <RTC_u8SetClockTime+0x564>
    4bf4:	9e 8f       	std	Y+30, r25	; 0x1e
    4bf6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
		}

		// End of getting Keypad
		if(loc_counter==5)
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	ea 5a       	subi	r30, 0xAA	; 170
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	80 81       	ld	r24, Z
    4c00:	85 30       	cpi	r24, 0x05	; 5
    4c02:	09 f0       	breq	.+2      	; 0x4c06 <RTC_u8SetClockTime+0x57a>
    4c04:	85 c0       	rjmp	.+266    	; 0x4d10 <RTC_u8SetClockTime+0x684>
		{
			Lcd_CLR(&Lcd1);
    4c06:	82 e8       	ldi	r24, 0x82	; 130
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
			Lcd_WriteString(&Lcd1,ThankYou);
    4c0e:	82 e8       	ldi	r24, 0x82	; 130
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	26 ee       	ldi	r18, 0xE6	; 230
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	b9 01       	movw	r22, r18
    4c18:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	a8 ec       	ldi	r26, 0xC8	; 200
    4c22:	b2 e4       	ldi	r27, 0x42	; 66
    4c24:	89 8f       	std	Y+25, r24	; 0x19
    4c26:	9a 8f       	std	Y+26, r25	; 0x1a
    4c28:	ab 8f       	std	Y+27, r26	; 0x1b
    4c2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c2c:	69 8d       	ldd	r22, Y+25	; 0x19
    4c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	4a ef       	ldi	r20, 0xFA	; 250
    4c3a:	54 e4       	ldi	r21, 0x44	; 68
    4c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	8d 8b       	std	Y+21, r24	; 0x15
    4c46:	9e 8b       	std	Y+22, r25	; 0x16
    4c48:	af 8b       	std	Y+23, r26	; 0x17
    4c4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c50:	8f 89       	ldd	r24, Y+23	; 0x17
    4c52:	98 8d       	ldd	r25, Y+24	; 0x18
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	40 e8       	ldi	r20, 0x80	; 128
    4c5a:	5f e3       	ldi	r21, 0x3F	; 63
    4c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c60:	88 23       	and	r24, r24
    4c62:	2c f4       	brge	.+10     	; 0x4c6e <RTC_u8SetClockTime+0x5e2>
		__ticks = 1;
    4c64:	81 e0       	ldi	r24, 0x01	; 1
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	9c 8b       	std	Y+20, r25	; 0x14
    4c6a:	8b 8b       	std	Y+19, r24	; 0x13
    4c6c:	3f c0       	rjmp	.+126    	; 0x4cec <RTC_u8SetClockTime+0x660>
	else if (__tmp > 65535)
    4c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c70:	7e 89       	ldd	r23, Y+22	; 0x16
    4c72:	8f 89       	ldd	r24, Y+23	; 0x17
    4c74:	98 8d       	ldd	r25, Y+24	; 0x18
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	3f ef       	ldi	r19, 0xFF	; 255
    4c7a:	4f e7       	ldi	r20, 0x7F	; 127
    4c7c:	57 e4       	ldi	r21, 0x47	; 71
    4c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c82:	18 16       	cp	r1, r24
    4c84:	4c f5       	brge	.+82     	; 0x4cd8 <RTC_u8SetClockTime+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c86:	69 8d       	ldd	r22, Y+25	; 0x19
    4c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	40 e2       	ldi	r20, 0x20	; 32
    4c94:	51 e4       	ldi	r21, 0x41	; 65
    4c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	bc 01       	movw	r22, r24
    4ca0:	cd 01       	movw	r24, r26
    4ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	9c 8b       	std	Y+20, r25	; 0x14
    4cac:	8b 8b       	std	Y+19, r24	; 0x13
    4cae:	0f c0       	rjmp	.+30     	; 0x4cce <RTC_u8SetClockTime+0x642>
    4cb0:	88 ec       	ldi	r24, 0xC8	; 200
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	9a 8b       	std	Y+18, r25	; 0x12
    4cb6:	89 8b       	std	Y+17, r24	; 0x11
    4cb8:	89 89       	ldd	r24, Y+17	; 0x11
    4cba:	9a 89       	ldd	r25, Y+18	; 0x12
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	f1 f7       	brne	.-4      	; 0x4cbc <RTC_u8SetClockTime+0x630>
    4cc0:	9a 8b       	std	Y+18, r25	; 0x12
    4cc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    4cc8:	01 97       	sbiw	r24, 0x01	; 1
    4cca:	9c 8b       	std	Y+20, r25	; 0x14
    4ccc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cce:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    4cd2:	00 97       	sbiw	r24, 0x00	; 0
    4cd4:	69 f7       	brne	.-38     	; 0x4cb0 <RTC_u8SetClockTime+0x624>
    4cd6:	14 c0       	rjmp	.+40     	; 0x4d00 <RTC_u8SetClockTime+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    4cda:	7e 89       	ldd	r23, Y+22	; 0x16
    4cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    4cde:	98 8d       	ldd	r25, Y+24	; 0x18
    4ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	cb 01       	movw	r24, r22
    4ce8:	9c 8b       	std	Y+20, r25	; 0x14
    4cea:	8b 8b       	std	Y+19, r24	; 0x13
    4cec:	8b 89       	ldd	r24, Y+19	; 0x13
    4cee:	9c 89       	ldd	r25, Y+20	; 0x14
    4cf0:	98 8b       	std	Y+16, r25	; 0x10
    4cf2:	8f 87       	std	Y+15, r24	; 0x0f
    4cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cf6:	98 89       	ldd	r25, Y+16	; 0x10
    4cf8:	01 97       	sbiw	r24, 0x01	; 1
    4cfa:	f1 f7       	brne	.-4      	; 0x4cf8 <RTC_u8SetClockTime+0x66c>
    4cfc:	98 8b       	std	Y+16, r25	; 0x10
    4cfe:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			return 0 ;
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	6c 96       	adiw	r28, 0x1c	; 28
    4d04:	8f af       	std	Y+63, r24	; 0x3f
    4d06:	6c 97       	sbiw	r28, 0x1c	; 28
			break ;
		}
		loc_counter++;

	}
}
    4d08:	6c 96       	adiw	r28, 0x1c	; 28
    4d0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d0c:	6c 97       	sbiw	r28, 0x1c	; 28
    4d0e:	a6 c0       	rjmp	.+332    	; 0x4e5c <RTC_u8SetClockTime+0x7d0>
			Lcd_CLR(&Lcd1);
			Lcd_WriteString(&Lcd1,ThankYou);
			_delay_ms(100);
			return 0 ;
		}
		if(loc_u8pressedKey=='c')
    4d10:	fe 01       	movw	r30, r28
    4d12:	eb 5a       	subi	r30, 0xAB	; 171
    4d14:	ff 4f       	sbci	r31, 0xFF	; 255
    4d16:	80 81       	ld	r24, Z
    4d18:	83 36       	cpi	r24, 0x63	; 99
    4d1a:	09 f0       	breq	.+2      	; 0x4d1e <RTC_u8SetClockTime+0x692>
    4d1c:	8b c0       	rjmp	.+278    	; 0x4e34 <RTC_u8SetClockTime+0x7a8>
		{
			Lcd_CLR(&Lcd1);
    4d1e:	82 e8       	ldi	r24, 0x82	; 130
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	0e 94 8d 1b 	call	0x371a	; 0x371a <Lcd_CLR>
			Lcd_WriteString(&Lcd1,Intro_line1);
    4d26:	82 e8       	ldi	r24, 0x82	; 130
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	29 e8       	ldi	r18, 0x89	; 137
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	b9 01       	movw	r22, r18
    4d30:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
			Lcd_GotoPosition(&Lcd1,LCD_LINE2,0);
    4d34:	82 e8       	ldi	r24, 0x82	; 130
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	61 e0       	ldi	r22, 0x01	; 1
    4d3a:	40 e0       	ldi	r20, 0x00	; 0
    4d3c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <Lcd_GotoPosition>
			Lcd_WriteString(&Lcd1,Intro_line2);
    4d40:	82 e8       	ldi	r24, 0x82	; 130
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	27 e9       	ldi	r18, 0x97	; 151
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	b9 01       	movw	r22, r18
    4d4a:	0e 94 b7 1b 	call	0x376e	; 0x376e <Lcd_WriteString>
    4d4e:	80 e0       	ldi	r24, 0x00	; 0
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	a8 ec       	ldi	r26, 0xC8	; 200
    4d54:	b2 e4       	ldi	r27, 0x42	; 66
    4d56:	8b 87       	std	Y+11, r24	; 0x0b
    4d58:	9c 87       	std	Y+12, r25	; 0x0c
    4d5a:	ad 87       	std	Y+13, r26	; 0x0d
    4d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	4a ef       	ldi	r20, 0xFA	; 250
    4d6c:	54 e4       	ldi	r21, 0x44	; 68
    4d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	8f 83       	std	Y+7, r24	; 0x07
    4d78:	98 87       	std	Y+8, r25	; 0x08
    4d7a:	a9 87       	std	Y+9, r26	; 0x09
    4d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d80:	78 85       	ldd	r23, Y+8	; 0x08
    4d82:	89 85       	ldd	r24, Y+9	; 0x09
    4d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e8       	ldi	r20, 0x80	; 128
    4d8c:	5f e3       	ldi	r21, 0x3F	; 63
    4d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d92:	88 23       	and	r24, r24
    4d94:	2c f4       	brge	.+10     	; 0x4da0 <RTC_u8SetClockTime+0x714>
		__ticks = 1;
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	9e 83       	std	Y+6, r25	; 0x06
    4d9c:	8d 83       	std	Y+5, r24	; 0x05
    4d9e:	3f c0       	rjmp	.+126    	; 0x4e1e <RTC_u8SetClockTime+0x792>
	else if (__tmp > 65535)
    4da0:	6f 81       	ldd	r22, Y+7	; 0x07
    4da2:	78 85       	ldd	r23, Y+8	; 0x08
    4da4:	89 85       	ldd	r24, Y+9	; 0x09
    4da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	3f ef       	ldi	r19, 0xFF	; 255
    4dac:	4f e7       	ldi	r20, 0x7F	; 127
    4dae:	57 e4       	ldi	r21, 0x47	; 71
    4db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4db4:	18 16       	cp	r1, r24
    4db6:	4c f5       	brge	.+82     	; 0x4e0a <RTC_u8SetClockTime+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dc0:	20 e0       	ldi	r18, 0x00	; 0
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	40 e2       	ldi	r20, 0x20	; 32
    4dc6:	51 e4       	ldi	r21, 0x41	; 65
    4dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	bc 01       	movw	r22, r24
    4dd2:	cd 01       	movw	r24, r26
    4dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	9e 83       	std	Y+6, r25	; 0x06
    4dde:	8d 83       	std	Y+5, r24	; 0x05
    4de0:	0f c0       	rjmp	.+30     	; 0x4e00 <RTC_u8SetClockTime+0x774>
    4de2:	88 ec       	ldi	r24, 0xC8	; 200
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	9c 83       	std	Y+4, r25	; 0x04
    4de8:	8b 83       	std	Y+3, r24	; 0x03
    4dea:	8b 81       	ldd	r24, Y+3	; 0x03
    4dec:	9c 81       	ldd	r25, Y+4	; 0x04
    4dee:	01 97       	sbiw	r24, 0x01	; 1
    4df0:	f1 f7       	brne	.-4      	; 0x4dee <RTC_u8SetClockTime+0x762>
    4df2:	9c 83       	std	Y+4, r25	; 0x04
    4df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4df6:	8d 81       	ldd	r24, Y+5	; 0x05
    4df8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dfa:	01 97       	sbiw	r24, 0x01	; 1
    4dfc:	9e 83       	std	Y+6, r25	; 0x06
    4dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e00:	8d 81       	ldd	r24, Y+5	; 0x05
    4e02:	9e 81       	ldd	r25, Y+6	; 0x06
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	69 f7       	brne	.-38     	; 0x4de2 <RTC_u8SetClockTime+0x756>
    4e08:	29 c0       	rjmp	.+82     	; 0x4e5c <RTC_u8SetClockTime+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e0c:	78 85       	ldd	r23, Y+8	; 0x08
    4e0e:	89 85       	ldd	r24, Y+9	; 0x09
    4e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	9e 83       	std	Y+6, r25	; 0x06
    4e1c:	8d 83       	std	Y+5, r24	; 0x05
    4e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e20:	9e 81       	ldd	r25, Y+6	; 0x06
    4e22:	9a 83       	std	Y+2, r25	; 0x02
    4e24:	89 83       	std	Y+1, r24	; 0x01
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
    4e28:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2a:	01 97       	sbiw	r24, 0x01	; 1
    4e2c:	f1 f7       	brne	.-4      	; 0x4e2a <RTC_u8SetClockTime+0x79e>
    4e2e:	9a 83       	std	Y+2, r25	; 0x02
    4e30:	89 83       	std	Y+1, r24	; 0x01
    4e32:	14 c0       	rjmp	.+40     	; 0x4e5c <RTC_u8SetClockTime+0x7d0>
			_delay_ms(100);
			break ;
		}
		loc_counter++;
    4e34:	de 01       	movw	r26, r28
    4e36:	aa 5a       	subi	r26, 0xAA	; 170
    4e38:	bf 4f       	sbci	r27, 0xFF	; 255
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	ea 5a       	subi	r30, 0xAA	; 170
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	80 81       	ld	r24, Z
    4e42:	8f 5f       	subi	r24, 0xFF	; 255
    4e44:	8c 93       	st	X, r24
	u8 loc_u8pressedKey=Keypad_NotPressed;
	Lcd_CLR(&Lcd1);
	// Enter Hours Message
	Lcd_WriteString(&Lcd1,EnterHours);
	_delay_ms(100);
	while(loc_counter <=capy_SizeArray){
    4e46:	fe 01       	movw	r30, r28
    4e48:	ea 5a       	subi	r30, 0xAA	; 170
    4e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4c:	de 01       	movw	r26, r28
    4e4e:	a6 5a       	subi	r26, 0xA6	; 166
    4e50:	bf 4f       	sbci	r27, 0xFF	; 255
    4e52:	90 81       	ld	r25, Z
    4e54:	8c 91       	ld	r24, X
    4e56:	89 17       	cp	r24, r25
    4e58:	08 f0       	brcs	.+2      	; 0x4e5c <RTC_u8SetClockTime+0x7d0>
    4e5a:	f7 cc       	rjmp	.-1554   	; 0x484a <RTC_u8SetClockTime+0x1be>
			break ;
		}
		loc_counter++;

	}
}
    4e5c:	c5 5a       	subi	r28, 0xA5	; 165
    4e5e:	df 4f       	sbci	r29, 0xFF	; 255
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	f8 94       	cli
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	0f be       	out	0x3f, r0	; 63
    4e68:	cd bf       	out	0x3d, r28	; 61
    4e6a:	cf 91       	pop	r28
    4e6c:	df 91       	pop	r29
    4e6e:	1f 91       	pop	r17
    4e70:	0f 91       	pop	r16
    4e72:	08 95       	ret

00004e74 <RTC_voidUpdateClockTime>:
///////////////////////////// RTC_voidUpdateClockTime \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
// Update Clock in Array                                                                \\
//////////////////////////////////////////////////////////////////////////////////////////

void RTC_voidUpdateClockTime(u8 *ptrcount_Second,u8 *ptrcount_Minutes,u8 *ptrcount_Hours,u8 *capy_u16PtrArray)
{
    4e74:	df 93       	push	r29
    4e76:	cf 93       	push	r28
    4e78:	cd b7       	in	r28, 0x3d	; 61
    4e7a:	de b7       	in	r29, 0x3e	; 62
    4e7c:	28 97       	sbiw	r28, 0x08	; 8
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	f8 94       	cli
    4e82:	de bf       	out	0x3e, r29	; 62
    4e84:	0f be       	out	0x3f, r0	; 63
    4e86:	cd bf       	out	0x3d, r28	; 61
    4e88:	9a 83       	std	Y+2, r25	; 0x02
    4e8a:	89 83       	std	Y+1, r24	; 0x01
    4e8c:	7c 83       	std	Y+4, r23	; 0x04
    4e8e:	6b 83       	std	Y+3, r22	; 0x03
    4e90:	5e 83       	std	Y+6, r21	; 0x06
    4e92:	4d 83       	std	Y+5, r20	; 0x05
    4e94:	38 87       	std	Y+8, r19	; 0x08
    4e96:	2f 83       	std	Y+7, r18	; 0x07

   *ptrcount_Hours  = 10*(capy_u16PtrArray[0]-48)+(capy_u16PtrArray[1]-48);
    4e98:	ef 81       	ldd	r30, Y+7	; 0x07
    4e9a:	f8 85       	ldd	r31, Y+8	; 0x08
    4e9c:	80 81       	ld	r24, Z
    4e9e:	88 2f       	mov	r24, r24
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	9c 01       	movw	r18, r24
    4ea4:	22 0f       	add	r18, r18
    4ea6:	33 1f       	adc	r19, r19
    4ea8:	c9 01       	movw	r24, r18
    4eaa:	88 0f       	add	r24, r24
    4eac:	99 1f       	adc	r25, r25
    4eae:	88 0f       	add	r24, r24
    4eb0:	99 1f       	adc	r25, r25
    4eb2:	82 0f       	add	r24, r18
    4eb4:	93 1f       	adc	r25, r19
    4eb6:	28 2f       	mov	r18, r24
    4eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    4eba:	98 85       	ldd	r25, Y+8	; 0x08
    4ebc:	fc 01       	movw	r30, r24
    4ebe:	31 96       	adiw	r30, 0x01	; 1
    4ec0:	80 81       	ld	r24, Z
    4ec2:	82 0f       	add	r24, r18
    4ec4:	80 51       	subi	r24, 0x10	; 16
    4ec6:	ed 81       	ldd	r30, Y+5	; 0x05
    4ec8:	fe 81       	ldd	r31, Y+6	; 0x06
    4eca:	80 83       	st	Z, r24
   *ptrcount_Minutes= 10*(capy_u16PtrArray[2]-48)+(capy_u16PtrArray[3]-48);
    4ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    4ece:	98 85       	ldd	r25, Y+8	; 0x08
    4ed0:	fc 01       	movw	r30, r24
    4ed2:	32 96       	adiw	r30, 0x02	; 2
    4ed4:	80 81       	ld	r24, Z
    4ed6:	88 2f       	mov	r24, r24
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	9c 01       	movw	r18, r24
    4edc:	22 0f       	add	r18, r18
    4ede:	33 1f       	adc	r19, r19
    4ee0:	c9 01       	movw	r24, r18
    4ee2:	88 0f       	add	r24, r24
    4ee4:	99 1f       	adc	r25, r25
    4ee6:	88 0f       	add	r24, r24
    4ee8:	99 1f       	adc	r25, r25
    4eea:	82 0f       	add	r24, r18
    4eec:	93 1f       	adc	r25, r19
    4eee:	28 2f       	mov	r18, r24
    4ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ef2:	98 85       	ldd	r25, Y+8	; 0x08
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	33 96       	adiw	r30, 0x03	; 3
    4ef8:	80 81       	ld	r24, Z
    4efa:	82 0f       	add	r24, r18
    4efc:	80 51       	subi	r24, 0x10	; 16
    4efe:	eb 81       	ldd	r30, Y+3	; 0x03
    4f00:	fc 81       	ldd	r31, Y+4	; 0x04
    4f02:	80 83       	st	Z, r24
   *ptrcount_Second = 10*(capy_u16PtrArray[4]-48)+(capy_u16PtrArray[5]-48);
    4f04:	8f 81       	ldd	r24, Y+7	; 0x07
    4f06:	98 85       	ldd	r25, Y+8	; 0x08
    4f08:	fc 01       	movw	r30, r24
    4f0a:	34 96       	adiw	r30, 0x04	; 4
    4f0c:	80 81       	ld	r24, Z
    4f0e:	88 2f       	mov	r24, r24
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	9c 01       	movw	r18, r24
    4f14:	22 0f       	add	r18, r18
    4f16:	33 1f       	adc	r19, r19
    4f18:	c9 01       	movw	r24, r18
    4f1a:	88 0f       	add	r24, r24
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	88 0f       	add	r24, r24
    4f20:	99 1f       	adc	r25, r25
    4f22:	82 0f       	add	r24, r18
    4f24:	93 1f       	adc	r25, r19
    4f26:	28 2f       	mov	r18, r24
    4f28:	8f 81       	ldd	r24, Y+7	; 0x07
    4f2a:	98 85       	ldd	r25, Y+8	; 0x08
    4f2c:	fc 01       	movw	r30, r24
    4f2e:	35 96       	adiw	r30, 0x05	; 5
    4f30:	80 81       	ld	r24, Z
    4f32:	82 0f       	add	r24, r18
    4f34:	80 51       	subi	r24, 0x10	; 16
    4f36:	e9 81       	ldd	r30, Y+1	; 0x01
    4f38:	fa 81       	ldd	r31, Y+2	; 0x02
    4f3a:	80 83       	st	Z, r24

}
    4f3c:	28 96       	adiw	r28, 0x08	; 8
    4f3e:	0f b6       	in	r0, 0x3f	; 63
    4f40:	f8 94       	cli
    4f42:	de bf       	out	0x3e, r29	; 62
    4f44:	0f be       	out	0x3f, r0	; 63
    4f46:	cd bf       	out	0x3d, r28	; 61
    4f48:	cf 91       	pop	r28
    4f4a:	df 91       	pop	r29
    4f4c:	08 95       	ret

00004f4e <__udivmodqi4>:
    4f4e:	99 1b       	sub	r25, r25
    4f50:	79 e0       	ldi	r23, 0x09	; 9
    4f52:	04 c0       	rjmp	.+8      	; 0x4f5c <__udivmodqi4_ep>

00004f54 <__udivmodqi4_loop>:
    4f54:	99 1f       	adc	r25, r25
    4f56:	96 17       	cp	r25, r22
    4f58:	08 f0       	brcs	.+2      	; 0x4f5c <__udivmodqi4_ep>
    4f5a:	96 1b       	sub	r25, r22

00004f5c <__udivmodqi4_ep>:
    4f5c:	88 1f       	adc	r24, r24
    4f5e:	7a 95       	dec	r23
    4f60:	c9 f7       	brne	.-14     	; 0x4f54 <__udivmodqi4_loop>
    4f62:	80 95       	com	r24
    4f64:	08 95       	ret

00004f66 <__prologue_saves__>:
    4f66:	2f 92       	push	r2
    4f68:	3f 92       	push	r3
    4f6a:	4f 92       	push	r4
    4f6c:	5f 92       	push	r5
    4f6e:	6f 92       	push	r6
    4f70:	7f 92       	push	r7
    4f72:	8f 92       	push	r8
    4f74:	9f 92       	push	r9
    4f76:	af 92       	push	r10
    4f78:	bf 92       	push	r11
    4f7a:	cf 92       	push	r12
    4f7c:	df 92       	push	r13
    4f7e:	ef 92       	push	r14
    4f80:	ff 92       	push	r15
    4f82:	0f 93       	push	r16
    4f84:	1f 93       	push	r17
    4f86:	cf 93       	push	r28
    4f88:	df 93       	push	r29
    4f8a:	cd b7       	in	r28, 0x3d	; 61
    4f8c:	de b7       	in	r29, 0x3e	; 62
    4f8e:	ca 1b       	sub	r28, r26
    4f90:	db 0b       	sbc	r29, r27
    4f92:	0f b6       	in	r0, 0x3f	; 63
    4f94:	f8 94       	cli
    4f96:	de bf       	out	0x3e, r29	; 62
    4f98:	0f be       	out	0x3f, r0	; 63
    4f9a:	cd bf       	out	0x3d, r28	; 61
    4f9c:	09 94       	ijmp

00004f9e <__epilogue_restores__>:
    4f9e:	2a 88       	ldd	r2, Y+18	; 0x12
    4fa0:	39 88       	ldd	r3, Y+17	; 0x11
    4fa2:	48 88       	ldd	r4, Y+16	; 0x10
    4fa4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fa6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fa8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4faa:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fac:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fae:	aa 84       	ldd	r10, Y+10	; 0x0a
    4fb0:	b9 84       	ldd	r11, Y+9	; 0x09
    4fb2:	c8 84       	ldd	r12, Y+8	; 0x08
    4fb4:	df 80       	ldd	r13, Y+7	; 0x07
    4fb6:	ee 80       	ldd	r14, Y+6	; 0x06
    4fb8:	fd 80       	ldd	r15, Y+5	; 0x05
    4fba:	0c 81       	ldd	r16, Y+4	; 0x04
    4fbc:	1b 81       	ldd	r17, Y+3	; 0x03
    4fbe:	aa 81       	ldd	r26, Y+2	; 0x02
    4fc0:	b9 81       	ldd	r27, Y+1	; 0x01
    4fc2:	ce 0f       	add	r28, r30
    4fc4:	d1 1d       	adc	r29, r1
    4fc6:	0f b6       	in	r0, 0x3f	; 63
    4fc8:	f8 94       	cli
    4fca:	de bf       	out	0x3e, r29	; 62
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	cd bf       	out	0x3d, r28	; 61
    4fd0:	ed 01       	movw	r28, r26
    4fd2:	08 95       	ret

00004fd4 <_exit>:
    4fd4:	f8 94       	cli

00004fd6 <__stop_program>:
    4fd6:	ff cf       	rjmp	.-2      	; 0x4fd6 <__stop_program>
